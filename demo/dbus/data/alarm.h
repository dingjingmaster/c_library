/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DATA_ALARM_H__
#define __DATA_ALARM_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for es.aleksander.Alarm */

#define TYPE_ALARM (alarm_get_type ())
#define ALARM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ALARM, Alarm))
#define IS_ALARM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ALARM))
#define ALARM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ALARM, AlarmIface))

struct _Alarm;
typedef struct _Alarm Alarm;
typedef struct _AlarmIface AlarmIface;

struct _AlarmIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_configure) (
    Alarm *object,
    GDBusMethodInvocation *invocation,
    guint arg_seconds);

  gboolean  (*get_activated) (Alarm *object);

  void (*beeeeeeeeep) (
    Alarm *object);

};

GType alarm_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_interface_info (void);
guint alarm_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_complete_configure (
    Alarm *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void alarm_emit_beeeeeeeeep (
    Alarm *object);



/* D-Bus method calls: */
void alarm_call_configure (
    Alarm *proxy,
    guint arg_seconds,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_call_configure_finish (
    Alarm *proxy,
    GAsyncResult *res,
    GError **error);

gboolean alarm_call_configure_sync (
    Alarm *proxy,
    guint arg_seconds,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean alarm_get_activated (Alarm *object);
void alarm_set_activated (Alarm *object, gboolean value);


/* ---- */

#define TYPE_ALARM_PROXY (alarm_proxy_get_type ())
#define ALARM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ALARM_PROXY, AlarmProxy))
#define ALARM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ALARM_PROXY, AlarmProxyClass))
#define ALARM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ALARM_PROXY, AlarmProxyClass))
#define IS_ALARM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ALARM_PROXY))
#define IS_ALARM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ALARM_PROXY))

typedef struct _AlarmProxy AlarmProxy;
typedef struct _AlarmProxyClass AlarmProxyClass;
typedef struct _AlarmProxyPrivate AlarmProxyPrivate;

struct _AlarmProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AlarmProxyPrivate *priv;
};

struct _AlarmProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AlarmProxy, g_object_unref)
#endif

void alarm_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Alarm *alarm_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Alarm *alarm_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Alarm *alarm_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Alarm *alarm_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ALARM_SKELETON (alarm_skeleton_get_type ())
#define ALARM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ALARM_SKELETON, AlarmSkeleton))
#define ALARM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ALARM_SKELETON, AlarmSkeletonClass))
#define ALARM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ALARM_SKELETON, AlarmSkeletonClass))
#define IS_ALARM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ALARM_SKELETON))
#define IS_ALARM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ALARM_SKELETON))

typedef struct _AlarmSkeleton AlarmSkeleton;
typedef struct _AlarmSkeletonClass AlarmSkeletonClass;
typedef struct _AlarmSkeletonPrivate AlarmSkeletonPrivate;

struct _AlarmSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AlarmSkeletonPrivate *priv;
};

struct _AlarmSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AlarmSkeleton, g_object_unref)
#endif

Alarm *alarm_skeleton_new (void);


G_END_DECLS

#endif /* __DATA_ALARM_H__ */

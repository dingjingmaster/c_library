!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/data/code/c_library/core/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
ABORT	job.h	/^        ABORT$/;"	e	enum:dingjing::Job::ErrorAction
AVL_TREE_NODE_LEFT	c/tree/clib-avl-tree.h	/^    AVL_TREE_NODE_LEFT = 0,$/;"	e	enum:__anon4cb127d30103
AVL_TREE_NODE_RIGHT	c/tree/clib-avl-tree.h	/^    AVL_TREE_NODE_RIGHT = 1$/;"	e	enum:__anon4cb127d30103
ActivatedClick	folder-model-view/folder-view.h	/^        ActivatedClick,$/;"	e	enum:dingjing::FolderView::ClickType
BG_BLACK	c/log/clib-log.c	/^#define BG_BLACK /;"	d	file:
BG_BLUE	c/log/clib-log.c	/^#define BG_BLUE /;"	d	file:
BG_CYAN	c/log/clib-log.c	/^#define BG_CYAN /;"	d	file:
BG_GREEN	c/log/clib-log.c	/^#define BG_GREEN /;"	d	file:
BG_MAGENTA	c/log/clib-log.c	/^#define BG_MAGENTA /;"	d	file:
BG_RED	c/log/clib-log.c	/^#define BG_RED /;"	d	file:
BG_WHITE	c/log/clib-log.c	/^#define BG_WHITE /;"	d	file:
BG_YELLOW	c/log/clib-log.c	/^#define BG_YELLOW /;"	d	file:
BLUE	c/log/clib-log.c	/^#define BLUE(/;"	d	file:
BUF_SIZE	file-read-write.cpp	/^#define BUF_SIZE /;"	d	file:
B_BLUE	c/log/clib-log.c	/^#define B_BLUE(/;"	d	file:
B_CYAN	c/log/clib-log.c	/^#define B_CYAN(/;"	d	file:
B_GREEN	c/log/clib-log.c	/^#define B_GREEN(/;"	d	file:
B_MAGENTA	c/log/clib-log.c	/^#define B_MAGENTA(/;"	d	file:
B_RED	c/log/clib-log.c	/^#define B_RED(/;"	d	file:
B_WHITE	c/log/clib-log.c	/^#define B_WHITE(/;"	d	file:
B_YELLOW	c/log/clib-log.c	/^#define B_YELLOW(/;"	d	file:
CACHEDFOLDERMODEL_H	folder-model-view/cached-folder-model.h	/^#define CACHEDFOLDERMODEL_H$/;"	d
CANCEL	file-read-write.h	/^            CANCEL,$/;"	e	enum:dingjing::FileReadAndWrite::Status
CLIBAVLTREE_H	c/tree/clib-avl-tree.h	/^#define CLIBAVLTREE_H$/;"	d
CLIBBASE64_H	c/base64/clib-base64.h	/^#define CLIBBASE64_H$/;"	d
CLIBLOG_H	c/log/clib-log.h	/^#define CLIBLOG_H$/;"	d
CLIBSYSLOG_H	c/syslog/clib-syslog.h	/^#define CLIBSYSLOG_H$/;"	d
CLIB_ALIGN_DU8	c/rpc/clib-align.h	/^#define CLIB_ALIGN_DU8(/;"	d
CLIB_ALIGN_EP2	c/rpc/clib-align.h	/^#define CLIB_ALIGN_EP2(/;"	d
CLIB_ALIGN_EP4	c/rpc/clib-align.h	/^#define CLIB_ALIGN_EP4(/;"	d
CLIB_ALIGN_EP8	c/rpc/clib-align.h	/^#define CLIB_ALIGN_EP8(/;"	d
CLIB_ALIGN_EU2	c/rpc/clib-align.h	/^#define CLIB_ALIGN_EU2(/;"	d
CLIB_ALIGN_EU4	c/rpc/clib-align.h	/^#define CLIB_ALIGN_EU4(/;"	d
CLIB_ALIGN_EU8	c/rpc/clib-align.h	/^#define CLIB_ALIGN_EU8(/;"	d
CLIB_ALIGN_NG2	c/rpc/clib-align.h	/^#define CLIB_ALIGN_NG2(/;"	d
CLIB_ALIGN_NG4	c/rpc/clib-align.h	/^#define CLIB_ALIGN_NG4(/;"	d
CLIB_ALIGN_NG8	c/rpc/clib-align.h	/^#define CLIB_ALIGN_NG8(/;"	d
CLIB_ALIGN_OK2	c/rpc/clib-align.h	/^#define CLIB_ALIGN_OK2(/;"	d
CLIB_ALIGN_OK4	c/rpc/clib-align.h	/^#define CLIB_ALIGN_OK4(/;"	d
CLIB_ALIGN_OK8	c/rpc/clib-align.h	/^#define CLIB_ALIGN_OK8(/;"	d
CLIB_CONF_MAX_LINE_BYTES	c/config/clib-conf.h	/^#define CLIB_CONF_MAX_LINE_BYTES /;"	d
CLIB_RET	c/common/clib-ret.h	/^} CLIB_RET;$/;"	t	typeref:enum:__anon96960b770103
CLIB_RPCPACK_ADDR_ISTR_BYTES	c/rpc/clib-rpcpack.h	/^#define CLIB_RPCPACK_ADDR_ISTR_BYTES /;"	d
CLIB_RPCPACK_MAX_NSADDR_BYTES	c/rpc/clib-rpcpack.h	/^#define CLIB_RPCPACK_MAX_NSADDR_BYTES /;"	d
CLIB_RPCPACK_MAX_NSDATA_BYTES	c/rpc/clib-rpcpack.h	/^#define CLIB_RPCPACK_MAX_NSDATA_BYTES /;"	d
CLIB_RPCPACK_MAX_TRACE_DEPTH	c/rpc/clib-rpcpack.h	/^#define CLIB_RPCPACK_MAX_TRACE_DEPTH /;"	d
CLIB_RPCPACK_MODE_LOG_DUMP	c/rpc/clib-rpcpack.h	/^#define CLIB_RPCPACK_MODE_LOG_DUMP /;"	d
CLIB_RPCPACK_NODE_FLAG_IPV6	c/rpc/clib-rpcpack.h	/^#define CLIB_RPCPACK_NODE_FLAG_IPV6 /;"	d
CLIB_SYSTEM_ETC_PASSWD	c/common/clib-ret.h	/^#define CLIB_SYSTEM_ETC_PASSWD /;"	d
CLIB_SYSTEM_PROC	c/common/clib-ret.h	/^#define CLIB_SYSTEM_PROC /;"	d
CLIB_UNUSED	clib-global.h	/^#define CLIB_UNUSED(/;"	d
CLIB_VERSION	clib-global.h	/^#define CLIB_VERSION /;"	d
CLIB_VERSION_CHECK	clib-global.h	/^#define CLIB_VERSION_CHECK(/;"	d
CLIB_VERSION_MAJOR	clib-global.h	/^#define CLIB_VERSION_MAJOR /;"	d
CLIB_VERSION_MINOR	clib-global.h	/^#define CLIB_VERSION_MINOR /;"	d
CLIB_VERSION_PATCH	clib-global.h	/^#define CLIB_VERSION_PATCH /;"	d
CONF	c/config/clib-conf.c	/^#define CONF /;"	d	file:
CONTINUE	job.h	/^        CONTINUE,$/;"	e	enum:dingjing::Job::ErrorAction
CRITICAL	job.h	/^        CRITICAL$/;"	e	enum:dingjing::Job::ErrorSeverity
CStrArrayPtr	smart-ptr.hpp	/^typedef std::unique_ptr<char*[], CStrVDeleter> CStrArrayPtr;$/;"	t	namespace:dingjing	typeref:typename:std::unique_ptr<char * [],CStrVDeleter>
CStrDeleter	smart-ptr.hpp	/^struct CStrDeleter$/;"	s	namespace:dingjing
CStrEqual	smart-ptr.hpp	/^struct CStrEqual$/;"	s	namespace:dingjing
CStrHash	smart-ptr.hpp	/^struct CStrHash$/;"	s	namespace:dingjing
CStrPtr	smart-ptr.hpp	/^typedef std::unique_ptr<char[], CStrDeleter> CStrPtr;$/;"	t	namespace:dingjing	typeref:typename:std::unique_ptr<char[],CStrDeleter>
CStrVDeleter	smart-ptr.hpp	/^struct CStrVDeleter$/;"	s	namespace:dingjing
CTOOL_ALIGN_DU8	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_DU8(/;"	d
CTOOL_ALIGN_EP2	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_EP2(/;"	d
CTOOL_ALIGN_EP4	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_EP4(/;"	d
CTOOL_ALIGN_EP8	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_EP8(/;"	d
CTOOL_ALIGN_EU2	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_EU2(/;"	d
CTOOL_ALIGN_EU4	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_EU4(/;"	d
CTOOL_ALIGN_EU8	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_EU8(/;"	d
CTOOL_ALIGN_NG2	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_NG2(/;"	d
CTOOL_ALIGN_NG4	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_NG4(/;"	d
CTOOL_ALIGN_NG8	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_NG8(/;"	d
CTOOL_ALIGN_OK2	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_OK2(/;"	d
CTOOL_ALIGN_OK4	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_OK4(/;"	d
CTOOL_ALIGN_OK8	c/rpc/ctool_align.h	/^#define CTOOL_ALIGN_OK8(/;"	d
CT_CALL_FUNC	c/common/clib-macro.h	/^#define CT_CALL_FUNC(/;"	d
CT_CFREE	c/common/clib-macro.h	/^#define CT_CFREE(/;"	d
CT_INT_MAX	c/common/clib-macro.h	/^#define CT_INT_MAX(/;"	d
CT_INT_MIN	c/common/clib-macro.h	/^#define CT_INT_MIN(/;"	d
CT_RETURN_IF_SUCCESS	c/common/clib-macro.h	/^#define CT_RETURN_IF_SUCCESS(/;"	d
CT_RETURN_VALUE_IF_SUCCESS	c/common/clib-macro.h	/^#define CT_RETURN_VALUE_IF_SUCCESS(/;"	d
CT_SWAP	c/common/clib-macro.h	/^#define CT_SWAP(/;"	d
CT_SYSLOG	c/syslog/clib-syslog.h	/^#define CT_SYSLOG(/;"	d
CYAN	c/log/clib-log.c	/^#define CYAN(/;"	d	file:
CachedFolderModel	folder-model-view/cached-folder-model.cpp	/^CachedFolderModel::CachedFolderModel(const std::shared_ptr<Folder>& folder):$/;"	f	class:dingjing::CachedFolderModel
CachedFolderModel	folder-model-view/cached-folder-model.h	/^class CachedFolderModel : public FolderModel {$/;"	c	namespace:dingjing
ClickType	folder-model-view/folder-view.h	/^    enum ClickType$/;"	g	class:dingjing::FolderView
ColumnFileCrTime	folder-model-view/folder-model.h	/^        ColumnFileCrTime,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnFileDTime	folder-model-view/folder-model.h	/^        ColumnFileDTime,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnFileGroup	folder-model-view/folder-model.h	/^        ColumnFileGroup,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnFileMTime	folder-model-view/folder-model.h	/^        ColumnFileMTime,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnFileName	folder-model-view/folder-model.h	/^        ColumnFileName,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnFileOwner	folder-model-view/folder-model.h	/^        ColumnFileOwner,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnFileSize	folder-model-view/folder-model.h	/^        ColumnFileSize,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnFileType	folder-model-view/folder-model.h	/^        ColumnFileType,$/;"	e	enum:dingjing::FolderModel::ColumnId
ColumnId	folder-model-view/folder-model.h	/^    enum ColumnId$/;"	g	class:dingjing::FolderModel
CompactMode	folder-model-view/folder-view.h	/^        CompactMode,$/;"	e	enum:dingjing::FolderView::ViewMode
ContextMenuClick	folder-model-view/folder-view.h	/^        ContextMenuClick$/;"	e	enum:dingjing::FolderView::ClickType
DETAILED	dir-list-job.h	/^            DETAILED = 1 << 1$/;"	e	enum:dingjing::DirListJob::Flags
DIR_ONLY	dir-list-job.h	/^            DIR_ONLY = 1 << 0,$/;"	e	enum:dingjing::DirListJob::Flags
DJCLIB_APPEND	c/common/clib-ret.h	/^#define DJCLIB_APPEND /;"	d
DJCLIB_CLOSE	c/common/clib-ret.h	/^#define DJCLIB_CLOSE /;"	d
DJCLIB_DCLOSE	c/common/clib-ret.h	/^#define DJCLIB_DCLOSE /;"	d
DJCLIB_DONE	c/common/clib-ret.h	/^#define DJCLIB_DONE /;"	d
DJCLIB_DROP	c/common/clib-ret.h	/^#define DJCLIB_DROP /;"	d
DJCLIB_EAGAIN	c/common/clib-ret.h	/^#define DJCLIB_EAGAIN /;"	d
DJCLIB_EBUG	c/common/clib-ret.h	/^#define DJCLIB_EBUG /;"	d
DJCLIB_EBUSY	c/common/clib-ret.h	/^#define DJCLIB_EBUSY /;"	d
DJCLIB_ECALL	c/common/clib-ret.h	/^#define DJCLIB_ECALL /;"	d
DJCLIB_ECLOSE	c/common/clib-ret.h	/^#define DJCLIB_ECLOSE /;"	d
DJCLIB_ECLOSED	c/common/clib-ret.h	/^#define DJCLIB_ECLOSED /;"	d
DJCLIB_EEXIT	c/common/clib-ret.h	/^#define DJCLIB_EEXIT /;"	d
DJCLIB_EFAILURE	c/common/clib-ret.h	/^#define DJCLIB_EFAILURE /;"	d
DJCLIB_EFILE	c/common/clib-ret.h	/^#define DJCLIB_EFILE /;"	d
DJCLIB_EINVAL	c/common/clib-ret.h	/^#define DJCLIB_EINVAL /;"	d
DJCLIB_EMEM	c/common/clib-ret.h	/^#define DJCLIB_EMEM /;"	d
DJCLIB_EOVFL	c/common/clib-ret.h	/^#define DJCLIB_EOVFL /;"	d
DJCLIB_ERROR	c/common/clib-ret.h	/^#define DJCLIB_ERROR /;"	d
DJCLIB_ESUCCESS	c/common/clib-ret.h	/^#define DJCLIB_ESUCCESS /;"	d
DJCLIB_ETIMEOUT	c/common/clib-ret.h	/^#define DJCLIB_ETIMEOUT /;"	d
DJCLIB_FALSE	c/common/clib-ret.h	/^#define DJCLIB_FALSE /;"	d
DJCLIB_NFOUND	c/common/clib-ret.h	/^#define DJCLIB_NFOUND /;"	d
DJCLIB_OK	c/common/clib-ret.h	/^#define DJCLIB_OK /;"	d
DJCLIB_OVFL	c/common/clib-ret.h	/^#define DJCLIB_OVFL /;"	d
DJCLIB_REPLACE	c/common/clib-ret.h	/^#define DJCLIB_REPLACE /;"	d
DJCLIB_TIMEOUT	c/common/clib-ret.h	/^#define DJCLIB_TIMEOUT /;"	d
DJCLIB_TRUE	c/common/clib-ret.h	/^#define DJCLIB_TRUE /;"	d
DNDACTIONMENU_H	dnd-action-menu.h	/^#define DNDACTIONMENU_H$/;"	d
DetailedListMode	folder-model-view/folder-view.h	/^        DetailedListMode,$/;"	e	enum:dingjing::FolderView::ViewMode
DirListJob	dir-list-job.cpp	/^    DirListJob::DirListJob(const FilePath& path, Flags _flags) : dir_path{path}, flags{_flags} {/;"	f	class:dingjing::DirListJob
DirListJob	dir-list-job.h	/^    class DirListJob : public Job$/;"	c	namespace:dingjing
DndActionMenu	dnd-action-menu.cpp	/^DndActionMenu::DndActionMenu(Qt::DropActions possibleActions, QWidget* parent)$/;"	f	class:dingjing::DndActionMenu
DndActionMenu	dnd-action-menu.h	/^class DndActionMenu : public QMenu$/;"	c	namespace:dingjing
ERROR	file-read-write.h	/^            ERROR$/;"	e	enum:dingjing::FileReadAndWrite::Status
EXPORT_IMPORT_LIBRARY	global.h	/^#define EXPORT_IMPORT_LIBRARY /;"	d
ErrorAction	job.h	/^    enum class ErrorAction$/;"	g	class:dingjing::Job
ErrorSeverity	job.h	/^    enum class ErrorSeverity$/;"	g	class:dingjing::Job
FAST	dir-list-job.h	/^            FAST = 0,$/;"	e	enum:dingjing::DirListJob::Flags
FG_BLACK	c/log/clib-log.c	/^#define FG_BLACK /;"	d	file:
FG_BLUE	c/log/clib-log.c	/^#define FG_BLUE /;"	d	file:
FG_CYAN	c/log/clib-log.c	/^#define FG_CYAN /;"	d	file:
FG_GREEN	c/log/clib-log.c	/^#define FG_GREEN /;"	d	file:
FG_MAGENTA	c/log/clib-log.c	/^#define FG_MAGENTA /;"	d	file:
FG_RED	c/log/clib-log.c	/^#define FG_RED /;"	d	file:
FG_WHITE	c/log/clib-log.c	/^#define FG_WHITE /;"	d	file:
FG_YELLOW	c/log/clib-log.c	/^#define FG_YELLOW /;"	d	file:
FINISHED	file-read-write.h	/^            FINISHED,$/;"	e	enum:dingjing::FileReadAndWrite::Status
FMCONFIG_H	fm-config.h	/^#define FMCONFIG_H$/;"	d
FM_CONFIG_DEFAULT_AUTO_SELECTION_DELAY	fm-config.h	/^#define     FM_CONFIG_DEFAULT_AUTO_SELECTION_DELAY /;"	d
FM_CONFIG_DEFAULT_BACKUP_HIDDEN	fm-config.h	/^#define     FM_CONFIG_DEFAULT_BACKUP_HIDDEN /;"	d
FM_CONFIG_DEFAULT_BIG_ICON_SIZE	fm-config.h	/^#define     FM_CONFIG_DEFAULT_BIG_ICON_SIZE /;"	d
FM_CONFIG_DEFAULT_CONFIRM_DEL	fm-config.h	/^#define     FM_CONFIG_DEFAULT_CONFIRM_DEL /;"	d
FM_CONFIG_DEFAULT_CONFIRM_TRASH	fm-config.h	/^#define     FM_CONFIG_DEFAULT_CONFIRM_TRASH /;"	d
FM_CONFIG_DEFAULT_DEFER_CONTENT_TEST	fm-config.h	/^#define     FM_CONFIG_DEFAULT_DEFER_CONTENT_TEST /;"	d
FM_CONFIG_DEFAULT_EXTERNAL_THUMBNAIL_MAX	fm-config.h	/^#define     FM_CONFIG_DEFAULT_EXTERNAL_THUMBNAIL_MAX /;"	d
FM_CONFIG_DEFAULT_FORCE_S_NOTIFY	fm-config.h	/^#define     FM_CONFIG_DEFAULT_FORCE_S_NOTIFY /;"	d
FM_CONFIG_DEFAULT_NO_EXPAND_EMPTY	fm-config.h	/^#define     FM_CONFIG_DEFAULT_NO_EXPAND_EMPTY /;"	d
FM_CONFIG_DEFAULT_NO_USB_TRASH	fm-config.h	/^#define     FM_CONFIG_DEFAULT_NO_USB_TRASH /;"	d
FM_CONFIG_DEFAULT_ONLY_USER_TEMPLATES	fm-config.h	/^#define     FM_CONFIG_DEFAULT_ONLY_USER_TEMPLATES /;"	d
FM_CONFIG_DEFAULT_PANE_ICON_SIZE	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PANE_ICON_SIZE /;"	d
FM_CONFIG_DEFAULT_PLACES_APPLICATIONS	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_APPLICATIONS /;"	d
FM_CONFIG_DEFAULT_PLACES_COMPUTER	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_COMPUTER /;"	d
FM_CONFIG_DEFAULT_PLACES_DESKTOP	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_DESKTOP /;"	d
FM_CONFIG_DEFAULT_PLACES_HOME	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_HOME /;"	d
FM_CONFIG_DEFAULT_PLACES_NETWORK	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_NETWORK /;"	d
FM_CONFIG_DEFAULT_PLACES_ROOT	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_ROOT /;"	d
FM_CONFIG_DEFAULT_PLACES_TRASH	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_TRASH /;"	d
FM_CONFIG_DEFAULT_PLACES_UNMOUNTED	fm-config.h	/^#define     FM_CONFIG_DEFAULT_PLACES_UNMOUNTED /;"	d
FM_CONFIG_DEFAULT_QUICK_EXEC	fm-config.h	/^#define     FM_CONFIG_DEFAULT_QUICK_EXEC /;"	d
FM_CONFIG_DEFAULT_SHADOW_HIDDEN	fm-config.h	/^#define     FM_CONFIG_DEFAULT_SHADOW_HIDDEN /;"	d
FM_CONFIG_DEFAULT_SHOW_FULL_NAMES	fm-config.h	/^#define     FM_CONFIG_DEFAULT_SHOW_FULL_NAMES /;"	d
FM_CONFIG_DEFAULT_SHOW_THUMBNAIL	fm-config.h	/^#define     FM_CONFIG_DEFAULT_SHOW_THUMBNAIL /;"	d
FM_CONFIG_DEFAULT_SINGLE_CLICK	fm-config.h	/^#define     FM_CONFIG_DEFAULT_SINGLE_CLICK /;"	d
FM_CONFIG_DEFAULT_SMALL_ICON_SIZE	fm-config.h	/^#define     FM_CONFIG_DEFAULT_SMALL_ICON_SIZE /;"	d
FM_CONFIG_DEFAULT_SMART_DESKTOP_AUTODROP	fm-config.h	/^#define     FM_CONFIG_DEFAULT_SMART_DESKTOP_AUTODROP /;"	d
FM_CONFIG_DEFAULT_TEMPLATE_RUN_APP	fm-config.h	/^#define     FM_CONFIG_DEFAULT_TEMPLATE_RUN_APP /;"	d
FM_CONFIG_DEFAULT_TEMPL_TYPE_ONCE	fm-config.h	/^#define     FM_CONFIG_DEFAULT_TEMPL_TYPE_ONCE /;"	d
FM_CONFIG_DEFAULT_THUMBNAIL_LOCAL	fm-config.h	/^#define     FM_CONFIG_DEFAULT_THUMBNAIL_LOCAL /;"	d
FM_CONFIG_DEFAULT_THUMBNAIL_MAX	fm-config.h	/^#define     FM_CONFIG_DEFAULT_THUMBNAIL_MAX /;"	d
FM_CONFIG_DEFAULT_THUMBNAIL_SIZE	fm-config.h	/^#define     FM_CONFIG_DEFAULT_THUMBNAIL_SIZE /;"	d
FM_CONFIG_DEFAULT_USE_TRASH	fm-config.h	/^#define     FM_CONFIG_DEFAULT_USE_TRASH /;"	d
FOLDEDRVIEW_H	folder-model-view/folder-view.h	/^#define FOLDEDRVIEW_H$/;"	d
FOLDERITEMDELEGATE_H	folder-model-view/folder-item-delegate.h	/^#define FOLDERITEMDELEGATE_H$/;"	d
FOLDERMODEL_H	folder-model-view/folder-model.h	/^#define FOLDERMODEL_H$/;"	d
FOLDERVIEWP_H	folder-model-view/folder-view-p.h	/^#define FOLDERVIEWP_H$/;"	d
FileInfo	file-info.cpp	/^    FileInfo::FileInfo()$/;"	f	class:dingjing::FileInfo
FileInfo	file-info.cpp	/^    FileInfo::FileInfo(const GFileInfoPtr& inf, const FilePath& filePath, const FilePath& parent/;"	f	class:dingjing::FileInfo
FileInfo	file-info.h	/^    class EXPORT_IMPORT_LIBRARY FileInfo$/;"	c	namespace:dingjing
FileInfoJob	file-info-job.cpp	/^    FileInfoJob::FileInfoJob(FilePathList paths): Job(), paths_{std::move(paths)} {}$/;"	f	class:dingjing::FileInfoJob
FileInfoJob	file-info-job.h	/^    class FileInfoJob : public Job$/;"	c	namespace:dingjing
FileInfoList	file-info.h	/^    class EXPORT_IMPORT_LIBRARY FileInfoList: public std::vector<std::shared_ptr<const FileInfo>/;"	c	namespace:dingjing
FileInfoPair	file-info.h	/^    typedef std::pair<FileInfoPtr, FileInfoPtr> FileInfoPair;$/;"	t	namespace:dingjing	typeref:typename:std::pair<FileInfoPtr,FileInfoPtr>
FileInfoPtr	file-info.h	/^    typedef std::shared_ptr<const FileInfo> FileInfoPtr;$/;"	t	namespace:dingjing	typeref:typename:std::shared_ptr<const FileInfo>
FileInfoRole	folder-model-view/folder-model.h	/^        FileInfoRole = Qt::UserRole,$/;"	e	enum:dingjing::FolderModel::Role
FileIsCutRole	folder-model-view/folder-model.h	/^        FileIsCutRole$/;"	e	enum:dingjing::FolderModel::Role
FileIsDirRole	folder-model-view/folder-model.h	/^        FileIsDirRole,$/;"	e	enum:dingjing::FolderModel::Role
FilePath	file-path.cpp	/^FilePath::FilePath()$/;"	f	class:dingjing::FilePath
FilePath	file-path.cpp	/^FilePath::FilePath(FilePath &&other) noexcept: FilePath{}$/;"	f	class:dingjing::FilePath
FilePath	file-path.cpp	/^FilePath::FilePath(GFile *gfile, bool add_ref): mGfile{gfile, add_ref}$/;"	f	class:dingjing::FilePath
FilePath	file-path.cpp	/^FilePath::FilePath(const FilePath &other): FilePath{}$/;"	f	class:dingjing::FilePath
FilePath	file-path.h	/^class FilePath$/;"	c	namespace:dingjing
FilePathHash	file-path.h	/^struct FilePathHash$/;"	s	namespace:dingjing
FilePathList	file-path.h	/^typedef std::vector<FilePath> FilePathList;$/;"	t	namespace:dingjing	typeref:typename:std::vector<FilePath>
FileReadAndWrite	file-read-write.cpp	/^FileReadAndWrite::FileReadAndWrite (QString srcUri, QString destUri, GFileCopyFlags flags, GCanc/;"	f	class:FileReadAndWrite
FileReadAndWrite	file-read-write.h	/^    class FileReadAndWrite : public QObject$/;"	c	namespace:dingjing
FilesystemInfoJob	filesystem-info-job.h	/^        explicit FilesystemInfoJob(const FilePath& path):$/;"	f	class:dingjing::FilesystemInfoJob
FilesystemInfoJob	filesystem-info-job.h	/^    class FilesystemInfoJob : public Job$/;"	c	namespace:dingjing
FirstViewMode	folder-model-view/folder-view.h	/^        FirstViewMode = 1,$/;"	e	enum:dingjing::FolderView::ViewMode
Flags	dir-list-job.h	/^        enum Flags {$/;"	g	class:dingjing::DirListJob
FmConfig	fm-config.h	/^typedef struct _FmConfig            FmConfig;$/;"	t	typeref:struct:_FmConfig
Folder	folder.cpp	/^    Folder::Folder():$/;"	f	class:dingjing::Folder
Folder	folder.cpp	/^    Folder::Folder(const FilePath& path): Folder()$/;"	f	class:dingjing::Folder
Folder	folder.h	/^    class EXPORT_IMPORT_LIBRARY Folder : public QObject$/;"	c	namespace:dingjing
FolderItemDelegate	folder-model-view/folder-item-delegate.cpp	/^FolderItemDelegate::FolderItemDelegate(QAbstractItemView* view, QObject* parent):$/;"	f	class:dingjing::FolderItemDelegate
FolderItemDelegate	folder-model-view/folder-item-delegate.h	/^class FolderItemDelegate : public QStyledItemDelegate$/;"	c	namespace:dingjing
FolderModel	folder-model-view/folder-model.cpp	/^FolderModel::FolderModel() : mHasPendingThumbnailHandler{false}, mShowFullNames{false}, mIsLoade/;"	f	class:dingjing::FolderModel
FolderModel	folder-model-view/folder-model.h	/^class EXPORT_IMPORT_LIBRARY FolderModel : public QAbstractListModel$/;"	c	namespace:dingjing
FolderModelItem	folder-model-view/folder-model-item.cpp	/^FolderModelItem::FolderModelItem(const FolderModelItem& other) : mIsCut{other.mIsCut}, mThumbnai/;"	f	class:dingjing::FolderModelItem
FolderModelItem	folder-model-view/folder-model-item.cpp	/^FolderModelItem::FolderModelItem(const std::shared_ptr<const FileInfo>& info) : mIsCut{false}, m/;"	f	class:dingjing::FolderModelItem
FolderModelItem	folder-model-view/folder-model-item.h	/^    class EXPORT_IMPORT_LIBRARY FolderModelItem$/;"	c	namespace:dingjing
FolderView	folder-model-view/folder-view.cpp	/^FolderView::FolderView(FolderView::ViewMode _mode, QWidget *parent):$/;"	f	class:dingjing::FolderView
FolderView	folder-model-view/folder-view.h	/^    explicit FolderView(QWidget* parent): FolderView{IconMode, parent} {}$/;"	f	class:dingjing::FolderView
FolderView	folder-model-view/folder-view.h	/^class FolderView : public QWidget$/;"	c	namespace:dingjing
FolderViewListView	folder-model-view/folder-view-p.h	/^class FolderViewListView : public QListView$/;"	c	namespace:dingjing
FolderViewListView	folder-model-view/folder-view.cpp	/^FolderViewListView::FolderViewListView(QWidget* parent) : QListView(parent), mActivationAllowed(/;"	f	class:dingjing::FolderViewListView
FolderViewTreeView	folder-model-view/folder-view-p.h	/^class FolderViewTreeView : public QTreeView$/;"	c	namespace:dingjing
FolderViewTreeView	folder-model-view/folder-view.cpp	/^FolderViewTreeView::FolderViewTreeView(QWidget* parent):$/;"	f	class:dingjing::FolderViewTreeView
GAppInfoPtr	smart-ptr.hpp	/^typedef GObjectPtr<GAppInfo> GAppInfoPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GAppInfo>
GCancellablePtr	smart-ptr.hpp	/^typedef GObjectPtr<GCancellable> GCancellablePtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GCancellable>
GErrorPtr	smart-ptr.hpp	/^    GErrorPtr(): err_{nullptr} {}$/;"	f	class:dingjing::GErrorPtr
GErrorPtr	smart-ptr.hpp	/^    GErrorPtr(GError*&& err) noexcept: err_{err}$/;"	f	class:dingjing::GErrorPtr
GErrorPtr	smart-ptr.hpp	/^    GErrorPtr(GErrorPtr&& other) noexcept: err_{other.err_}$/;"	f	class:dingjing::GErrorPtr
GErrorPtr	smart-ptr.hpp	/^    GErrorPtr(std::uint32_t domain, unsigned int code, const QString& msg):$/;"	f	class:dingjing::GErrorPtr
GErrorPtr	smart-ptr.hpp	/^    GErrorPtr(std::uint32_t domain, unsigned int code, const char* msg):$/;"	f	class:dingjing::GErrorPtr
GErrorPtr	smart-ptr.hpp	/^class GErrorPtr$/;"	c	namespace:dingjing
GFileEnumeratorPtr	smart-ptr.hpp	/^typedef GObjectPtr<GFileEnumerator> GFileEnumeratorPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GFileEnumerator>
GFileInfoPtr	smart-ptr.hpp	/^typedef GObjectPtr<GFileInfo> GFileInfoPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GFileInfo>
GFileInputStreamPtr	smart-ptr.hpp	/^typedef GObjectPtr<GFileInputStream> GFileInputStreamPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GFileInputStream>
GFileMonitorPtr	smart-ptr.hpp	/^typedef GObjectPtr<GFileMonitor> GFileMonitorPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GFileMonitor>
GFileOutputStreamPtr	smart-ptr.hpp	/^typedef GObjectPtr<GFileOutputStream> GFileOutputStreamPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GFileOutputStream>
GFilePtr	smart-ptr.hpp	/^typedef GObjectPtr<GFile> GFilePtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GFile>
GIconEqual	icon-info.h	/^    struct GIconEqual {$/;"	s	class:dingjing::IconInfo
GIconHash	icon-info.h	/^    struct GIconHash {$/;"	s	class:dingjing::IconInfo
GIconPtr	smart-ptr.hpp	/^typedef GObjectPtr<GIcon> GIconPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GIcon>
GInputStreamPtr	smart-ptr.hpp	/^typedef GObjectPtr<GInputStream> GInputStreamPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GInputStream>
GMountPtr	smart-ptr.hpp	/^typedef GObjectPtr<GMount> GMountPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GMount>
GObjectPtr	smart-ptr.hpp	/^    GObjectPtr(GObjectPtr&& other) noexcept: gobj_{other.release()} {}$/;"	f	class:dingjing::GObjectPtr
GObjectPtr	smart-ptr.hpp	/^    GObjectPtr(const GObjectPtr& other): gobj_{other.gobj_ ? reinterpret_cast<T*> (g_object_ref(/;"	f	class:dingjing::GObjectPtr
GObjectPtr	smart-ptr.hpp	/^    explicit GObjectPtr(): gobj_{nullptr} {}$/;"	f	class:dingjing::GObjectPtr
GObjectPtr	smart-ptr.hpp	/^    explicit GObjectPtr(T* gobj, bool addRef = true) : gobj_ {gobj}$/;"	f	class:dingjing::GObjectPtr
GObjectPtr	smart-ptr.hpp	/^class GObjectPtr$/;"	c	namespace:dingjing
GOutputStreamPtr	smart-ptr.hpp	/^typedef GObjectPtr<GOutputStream> GOutputStreamPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GOutputStream>
GREEN	c/log/clib-log.c	/^#define GREEN(/;"	d	file:
GVolumeMonitorPtr	smart-ptr.hpp	/^typedef GObjectPtr<GVolumeMonitor> GVolumeMonitorPtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GVolumeMonitor>
GVolumePtr	smart-ptr.hpp	/^typedef GObjectPtr<GVolume> GVolumePtr;$/;"	t	namespace:dingjing	typeref:typename:GObjectPtr<GVolume>
GetGVolumeMonitorJob	volume-manager.h	/^        GetGVolumeMonitorJob() {}$/;"	f	class:dingjing::VolumeManager::GetGVolumeMonitorJob
GetGVolumeMonitorJob	volume-manager.h	/^    class GetGVolumeMonitorJob : public Job$/;"	c	class:dingjing::VolumeManager
HashSet	file-info.h	/^    typedef std::set<unsigned int> HashSet;$/;"	t	namespace:dingjing	typeref:typename:std::set<unsigned int>
INVALID	file-read-write.h	/^            INVALID,$/;"	e	enum:dingjing::FileReadAndWrite::Status
ITERATOR_START_HEAD	c/list/clib-double-list.h	/^#define ITERATOR_START_HEAD /;"	d
ITERATOR_START_TAIL	c/list/clib-double-list.h	/^#define ITERATOR_START_TAIL /;"	d
IconEngine	icon-info-p.h	/^    IconEngine::IconEngine(std::shared_ptr<const IconInfo> info): info_{info} {$/;"	f	class:dingjing::IconEngine
IconEngine	icon-info-p.h	/^    class IconEngine: public QIconEngine$/;"	c	namespace:dingjing
IconInfo	icon-info.cpp	/^    IconInfo::IconInfo(const GIconPtr gicon):$/;"	f	class:dingjing::IconInfo
IconInfo	icon-info.cpp	/^    IconInfo::IconInfo(const char* name):$/;"	f	class:dingjing::IconInfo
IconInfo	icon-info.h	/^    explicit IconInfo() {}$/;"	f	class:dingjing::IconInfo
IconInfo	icon-info.h	/^class EXPORT_IMPORT_LIBRARY IconInfo : public std::enable_shared_from_this<IconInfo>$/;"	c	namespace:dingjing
IconMode	folder-model-view/folder-view.h	/^        IconMode = FirstViewMode,$/;"	e	enum:dingjing::FolderView::ViewMode
Job	job.cpp	/^    Job::Job() : paused_{false}$/;"	f	class:dingjing::Job
Job	job.h	/^class EXPORT_IMPORT_LIBRARY Job : public QObject, public QRunnable$/;"	c	namespace:dingjing
JobThread	job_p.h	/^    JobThread(Job* job): job_{job} {}$/;"	f	class:dingjing::JobThread
JobThread	job_p.h	/^class JobThread: public QThread$/;"	c	namespace:dingjing
LIBCORE_DINGJING_DIRLISTJOB_H	dir-list-job.h	/^#define LIBCORE_DINGJING_DIRLISTJOB_H$/;"	d
LIBCORE_DINGJING_FILEINFOJOB_H	file-info-job.h	/^#define LIBCORE_DINGJING_FILEINFOJOB_H$/;"	d
LIBCORE_DINGJING_FILEINFO_H	file-info.h	/^#define LIBCORE_DINGJING_FILEINFO_H$/;"	d
LIBCORE_DINGJING_FILESYSTEMINFOJOB_H	filesystem-info-job.h	/^#define LIBCORE_DINGJING_FILESYSTEMINFOJOB_H$/;"	d
LIBCORE_DINGJING_FILE_INFO_P_H	file-info-p.h	/^#define LIBCORE_DINGJING_FILE_INFO_P_H$/;"	d
LIBCORE_DINGJING_FILE_PATH_H	file-path.h	/^#define LIBCORE_DINGJING_FILE_PATH_H$/;"	d
LIBCORE_DINGJING_FOLDERMODELITEM_H	folder-model-view/folder-model-item.h	/^#define LIBCORE_DINGJING_FOLDERMODELITEM_H$/;"	d
LIBCORE_DINGJING_FOLDER_H	folder.h	/^#define LIBCORE_DINGJING_FOLDER_H$/;"	d
LIBCORE_DINGJING_GLOBAL_H	global.h	/^#define LIBCORE_DINGJING_GLOBAL_H$/;"	d
LIBCORE_DINGJING_ICON_INFO_H	icon-info.h	/^#define LIBCORE_DINGJING_ICON_INFO_H$/;"	d
LIBCORE_DINGJING_ICON_INFO_P_H	icon-info-p.h	/^#define LIBCORE_DINGJING_ICON_INFO_P_H$/;"	d
LIBCORE_DINGJING_JOB_H	job.h	/^#define LIBCORE_DINGJING_JOB_H$/;"	d
LIBCORE_DINGJING_JOB_P_H	job_p.h	/^#define LIBCORE_DINGJING_JOB_P_H$/;"	d
LIBCORE_DINGJING_MIMETYPE_H	mime-type.h	/^#define LIBCORE_DINGJING_MIMETYPE_H$/;"	d
LIBCORE_DINGJING_SMART_PTR_HPP	smart-ptr.hpp	/^#define LIBCORE_DINGJING_SMART_PTR_HPP$/;"	d
LIBCORE_DINGJING_THUMBNAILER_H	thumbnailer.h	/^#define LIBCORE_DINGJING_THUMBNAILER_H$/;"	d
LIBCORE_DINGJING_VOLUMEMANAGER_H	volume-manager.h	/^#define LIBCORE_DINGJING_VOLUMEMANAGER_H$/;"	d
LIST_FRIST	c/list/clib-double-list.h	/^#define LIST_FRIST(/;"	d
LIST_GET_DUP_METHOD	c/list/clib-double-list.h	/^#define LIST_GET_DUP_METHOD(/;"	d
LIST_GET_FREE_METHOD	c/list/clib-double-list.h	/^#define LIST_GET_FREE_METHOD(/;"	d
LIST_GET_MATCH_METHOD	c/list/clib-double-list.h	/^#define LIST_GET_MATCH_METHOD(/;"	d
LIST_LENGTH	c/list/clib-double-list.h	/^#define LIST_LENGTH(/;"	d
LIST_NEXT_NODE	c/list/clib-double-list.h	/^#define LIST_NEXT_NODE(/;"	d
LIST_NODEVALUE	c/list/clib-double-list.h	/^#define LIST_NODEVALUE(/;"	d
LIST_PREV_NODE	c/list/clib-double-list.h	/^#define LIST_PREV_NODE /;"	d
LIST_SET_DUP_METHOD	c/list/clib-double-list.h	/^#define LIST_SET_DUP_METHOD(/;"	d
LIST_SET_FREE_METHOD	c/list/clib-double-list.h	/^#define LIST_SET_FREE_METHOD(/;"	d
LIST_SET_MATCH_METHOD	c/list/clib-double-list.h	/^#define LIST_SET_MATCH_METHOD(/;"	d
LIST_TAIL	c/list/clib-double-list.h	/^#define LIST_TAIL(/;"	d
LOG_ALERT	c/log/clib-log.h	/^    LOG_ALERT           =   1,              \/* 严重错误 *\/$/;"	e	enum:__anon8bee06e70203
LOG_BUF_SIZE	c/log/clib-log.c	/^#define LOG_BUF_SIZE /;"	d	file:
LOG_CRIT	c/log/clib-log.h	/^    LOG_CRIT            =   2,              \/* 严重警告 *\/$/;"	e	enum:__anon8bee06e70203
LOG_DEBUG	c/log/clib-log.h	/^    LOG_DEBUG           =   7,              \/* 调试信息 *\/$/;"	e	enum:__anon8bee06e70203
LOG_DIRNAME_LEN	c/log/clib-log.c	/^#define LOG_DIRNAME_LEN /;"	d	file:
LOG_EMERG	c/log/clib-log.h	/^    LOG_EMERG           =   0,              \/* 系统不兼容 *\/$/;"	e	enum:__anon8bee06e70203
LOG_ERR	c/log/clib-log.h	/^    LOG_ERR             =   3,              \/* 错误 *\/$/;"	e	enum:__anon8bee06e70203
LOG_FILENAME_LEN	c/log/clib-log.c	/^#define LOG_FILENAME_LEN /;"	d	file:
LOG_INFO	c/log/clib-log.h	/^    LOG_INFO            =   6,              \/* 信息 *\/$/;"	e	enum:__anon8bee06e70203
LOG_IOVEC_MAX	c/log/clib-log.c	/^#define LOG_IOVEC_MAX /;"	d	file:
LOG_NOTICE	c/log/clib-log.h	/^    LOG_NOTICE          =   5,              \/* 正常但重要的情况 *\/$/;"	e	enum:__anon8bee06e70203
LOG_PATH_MAX	c/log/clib-log.c	/^#define LOG_PATH_MAX /;"	d	file:
LOG_ROTATE_FALSE	c/log/clib-log.h	/^    LOG_ROTATE_FALSE    =   2,              \/* 不允许分文件 *\/$/;"	e	enum:__anon8bee06e70303
LOG_ROTATE_TRUE	c/log/clib-log.h	/^    LOG_ROTATE_TRUE     =   1,              \/* 允许分文件 *\/$/;"	e	enum:__anon8bee06e70303
LOG_TAG	c/log/clib-log.h	/^#define LOG_TAG /;"	d
LOG_TYPE_CONSOLE	c/log/clib-log.h	/^    LOG_TYPE_CONSOLE,                       \/* 输出到控制台 *\/$/;"	e	enum:__anon8bee06e70103
LOG_TYPE_FILE	c/log/clib-log.h	/^    LOG_TYPE_FILE       =   0,              \/* 输出日志到文件 *\/$/;"	e	enum:__anon8bee06e70103
LOG_VERB	c/log/clib-log.h	/^    LOG_VERB            =   8,              \/* 详细信息 *\/$/;"	e	enum:__anon8bee06e70203
LOG_WARNING	c/log/clib-log.h	/^    LOG_WARNING         =   4,              \/* 警告 *\/$/;"	e	enum:__anon8bee06e70203
LastViewMode	folder-model-view/folder-view.h	/^        LastViewMode = ThumbnailMode,$/;"	e	enum:dingjing::FolderView::ViewMode
MAGENTA	c/log/clib-log.c	/^#define MAGENTA(/;"	d	file:
MAX_USER	c/util/clib-util.c	/^int MAX_USER = 100;$/;"	v	typeref:typename:int
METADATA_TRUST	file-info.cpp	/^#define METADATA_TRUST /;"	d	file:
MILD	job.h	/^        MILD,$/;"	e	enum:dingjing::Job::ErrorSeverity
MODERATE	job.h	/^        MODERATE,$/;"	e	enum:dingjing::Job::ErrorSeverity
MiddleClick	folder-model-view/folder-view.h	/^        MiddleClick,$/;"	e	enum:dingjing::FolderView::ClickType
MimeType	mime-type.cpp	/^    MimeType::MimeType(const char* typeName): name_{g_strdup(typeName)}, desc_{nullptr}$/;"	f	class:dingjing::MimeType
MimeType	mime-type.h	/^    class EXPORT_IMPORT_LIBRARY MimeType$/;"	c	namespace:dingjing
Mount	volume-manager.h	/^    explicit Mount(GMount* mnt, bool addRef): GMountPtr{mnt, addRef} {$/;"	f	class:dingjing::Mount
Mount	volume-manager.h	/^    explicit Mount(GMountPtr gmnt): GMountPtr{std::move(gmnt)} {$/;"	f	class:dingjing::Mount
Mount	volume-manager.h	/^class EXPORT_IMPORT_LIBRARY Mount : public GMountPtr$/;"	c	namespace:dingjing
NumOfColumns	folder-model-view/folder-model.h	/^        NumOfColumns$/;"	e	enum:dingjing::FolderModel::ColumnId
NumViewModes	folder-model-view/folder-view.h	/^        NumViewModes = (LastViewMode - FirstViewMode + 1)$/;"	e	enum:dingjing::FolderView::ViewMode
PATHBARP_H	pathbar-model-view/pathbar-p.h	/^#define PATHBARP_H$/;"	d
PATHBAR_H	pathbar-model-view/pathbar.h	/^#define PATHBAR_H$/;"	d
PATHEDITORP_H	pathbar-model-view/path-editor-p.h	/^#define PATHEDITORP_H$/;"	d
PATHEDITOR_H	pathbar-model-view/path-editor.h	/^#define PATHEDITOR_H$/;"	d
PATH_SPLIT	c/log/clib-log.c	/^#define PATH_SPLIT /;"	d	file:
PAUSE	file-read-write.h	/^            PAUSE,$/;"	e	enum:dingjing::FileReadAndWrite::Status
PROXYFOLDERMODEL_H	folder-model-view/proxy-folder-model.h	/^#define PROXYFOLDERMODEL_H$/;"	d
PathBar	pathbar-model-view/pathbar.cpp	/^PathBar::PathBar(QWidget* parent) : QWidget(parent), mTempPathEdit(nullptr), mToggledBtn(nullptr/;"	f	class:dingjing::PathBar
PathBar	pathbar-model-view/pathbar.h	/^class PathBar: public QWidget$/;"	c	namespace:dingjing
PathButton	pathbar-model-view/pathbar-p.h	/^    PathButton(std::string name, QString displayName, bool isRoot = false, QWidget* parent = nul/;"	f	class:dingjing::PathButton
PathButton	pathbar-model-view/pathbar-p.h	/^class PathButton: public QToolButton$/;"	c	namespace:dingjing
PathEditor	pathbar-model-view/path-editor.cpp	/^PathEditor::PathEditor(QWidget* parent):$/;"	f	class:dingjing::PathEditor
PathEditor	pathbar-model-view/path-editor.h	/^class PathEditor : public QLineEdit$/;"	c	namespace:dingjing
PathEditorJob	pathbar-model-view/path-editor-p.h	/^class PathEditorJob : public QObject$/;"	c	namespace:dingjing
ProxyFolderModel	folder-model-view/proxy-folder-model.cpp	/^ProxyFolderModel::ProxyFolderModel(QObject* parent) : QSortFilterProxyModel(parent), mThumbnailS/;"	f	class:dingjing::ProxyFolderModel
ProxyFolderModel	folder-model-view/proxy-folder-model.h	/^class EXPORT_IMPORT_LIBRARY ProxyFolderModel : public QSortFilterProxyModel$/;"	c	namespace:dingjing
ProxyFolderModelFilter	folder-model-view/proxy-folder-model.h	/^class EXPORT_IMPORT_LIBRARY ProxyFolderModelFilter$/;"	c	namespace:dingjing
RED	c/log/clib-log.c	/^#define RED(/;"	d	file:
RETRY	job.h	/^        RETRY,$/;"	e	enum:dingjing::Job::ErrorAction
RET_ERROR	c/common/clib-ret.h	/^    RET_ERROR,                                                          \/\/ 错误$/;"	e	enum:__anon96960b770103
RET_FALSE	c/common/clib-ret.h	/^    RET_FALSE,                                                          \/\/ 假$/;"	e	enum:__anon96960b770103
RET_NOTENOUGHMEM	c/common/clib-ret.h	/^    RET_NOTENOUGHMEM,                                                   \/\/ 存储不够$/;"	e	enum:__anon96960b770103
RET_OK	c/common/clib-ret.h	/^    RET_OK,                                                             \/\/ 正常$/;"	e	enum:__anon96960b770103
RET_TRUE	c/common/clib-ret.h	/^    RET_TRUE,                                                           \/\/ 真$/;"	e	enum:__anon96960b770103
RUNNING	file-read-write.h	/^            RUNNING,$/;"	e	enum:dingjing::FileReadAndWrite::Status
Role	folder-model-view/folder-model.h	/^    enum Role$/;"	g	class:dingjing::FolderModel
SCROLL_DURATION	folder-model-view/folder-view.cpp	/^#define SCROLL_DURATION /;"	d	file:
SCROLL_FRAMES_PER_SEC	folder-model-view/folder-view.cpp	/^#define SCROLL_FRAMES_PER_SEC /;"	d	file:
SEVERE	job.h	/^        SEVERE,$/;"	e	enum:dingjing::Job::ErrorSeverity
Status	file-read-write.h	/^        enum Status$/;"	g	class:dingjing::FileReadAndWrite
THUMBNAILJOB_H	thumbnail-job.h	/^#define THUMBNAILJOB_H$/;"	d
Thumbnail	folder-model-view/folder-model-item.h	/^        struct Thumbnail$/;"	s	class:dingjing::FolderModelItem
ThumbnailData	folder-model-view/folder-model.h	/^        ThumbnailData(int size) : mSize{size}, mRefCount{1} {}$/;"	f	struct:dingjing::FolderModel::ThumbnailData
ThumbnailData	folder-model-view/folder-model.h	/^    struct ThumbnailData$/;"	s	class:dingjing::FolderModel
ThumbnailFailed	folder-model-view/folder-model-item.h	/^            ThumbnailFailed$/;"	e	enum:dingjing::FolderModelItem::ThumbnailStatus
ThumbnailJob	thumbnail-job.cpp	/^ThumbnailJob::ThumbnailJob(FileInfoList files, int size): mSize{size}, mFiles{std::move(files)},/;"	f	class:dingjing::ThumbnailJob
ThumbnailJob	thumbnail-job.h	/^class EXPORT_IMPORT_LIBRARY ThumbnailJob : public Job$/;"	c	namespace:dingjing
ThumbnailLoaded	folder-model-view/folder-model-item.h	/^            ThumbnailLoaded,$/;"	e	enum:dingjing::FolderModelItem::ThumbnailStatus
ThumbnailLoading	folder-model-view/folder-model-item.h	/^            ThumbnailLoading,$/;"	e	enum:dingjing::FolderModelItem::ThumbnailStatus
ThumbnailMode	folder-model-view/folder-view.h	/^        ThumbnailMode,$/;"	e	enum:dingjing::FolderView::ViewMode
ThumbnailNotChecked	folder-model-view/folder-model-item.h	/^            ThumbnailNotChecked,$/;"	e	enum:dingjing::FolderModelItem::ThumbnailStatus
ThumbnailStatus	folder-model-view/folder-model-item.h	/^        enum ThumbnailStatus$/;"	g	class:dingjing::FolderModelItem
Thumbnailer	thumbnailer.cpp	/^    Thumbnailer::Thumbnailer(const char* id, GKeyFile* kf):$/;"	f	class:dingjing::Thumbnailer
Thumbnailer	thumbnailer.h	/^    class Thumbnailer$/;"	c	namespace:dingjing
UNKNOWN	job.h	/^        UNKNOWN,$/;"	e	enum:dingjing::Job::ErrorSeverity
UTILS_H	utils.h	/^#define UTILS_H$/;"	d
Utils	utils.h	/^class Utils$/;"	c	namespace:dingjing
ViewMode	folder-model-view/folder-view.h	/^    enum ViewMode$/;"	g	class:dingjing::FolderView
Volume	volume-manager.h	/^    explicit Volume(GVolume* gvol, bool addRef): GVolumePtr{gvol, addRef}{}$/;"	f	class:dingjing::Volume
Volume	volume-manager.h	/^    explicit Volume(GVolumePtr gvol): GVolumePtr{std::move(gvol)} {}$/;"	f	class:dingjing::Volume
Volume	volume-manager.h	/^class EXPORT_IMPORT_LIBRARY Volume : public GVolumePtr$/;"	c	namespace:dingjing
VolumeManager	volume-manager.cpp	/^    VolumeManager::VolumeManager(): QObject(), monitor_{g_volume_monitor_get(), false}$/;"	f	class:dingjing::VolumeManager
VolumeManager	volume-manager.h	/^class EXPORT_IMPORT_LIBRARY VolumeManager : public QObject$/;"	c	namespace:dingjing
WARNING	job.h	/^        WARNING,$/;"	e	enum:dingjing::Job::ErrorSeverity
WHITE	c/log/clib-log.c	/^#define WHITE(/;"	d	file:
XDNDWORKAROUND_H	x-dnd-workaround.h	/^#define XDNDWORKAROUND_H$/;"	d
XI_ButtonRelease	x-dnd-workaround.cpp	/^#define XI_ButtonRelease /;"	d	file:
XdndWorkaround	x-dnd-workaround.cpp	/^XdndWorkaround::XdndWorkaround()$/;"	f	class:XdndWorkaround
XdndWorkaround	x-dnd-workaround.h	/^class XdndWorkaround : public QAbstractNativeEventFilter$/;"	c
YELLOW	c/log/clib-log.c	/^#define YELLOW(/;"	d	file:
_CLIBARRAYLIST_H	c/array/clib-array-list.h	/^#define _CLIBARRAYLIST_H$/;"	d
_CLIBBSTRING_H	c/string/clib-bstring.h	/^#define _CLIBBSTRING_H$/;"	d
_CLIBDOUBLELIST_H	c/list/clib-double-list.h	/^#define _CLIBDOUBLELIST_H$/;"	d
_CLIBFILEENUMERATOR_H	c/file/clib-file-enumerator.h	/^#define _CLIBFILEENUMERATOR_H$/;"	d
_CLIBMACRO_H	c/common/clib-macro.h	/^#define _CLIBMACRO_H$/;"	d
_CLIBRET_H	c/common/clib-ret.h	/^#define _CLIBRET_H$/;"	d
_CLIBTHREADPOOL_H	c/thread_pool/clib-thread-pool.h	/^#define _CLIBTHREADPOOL_H$/;"	d
_CLIBUTIL_H	c/util/clib-util.h	/^#define _CLIBUTIL_H$/;"	d
_CLIB_ALIGN_H	c/rpc/clib-align.h	/^#define _CLIB_ALIGN_H$/;"	d
_CLIB_CONF_H	c/config/clib-conf.h	/^#define _CLIB_CONF_H$/;"	d
_CLIB_GLOBAL_H	clib-global.h	/^#define _CLIB_GLOBAL_H$/;"	d
_CLIB_RANDOM_H	c/random/clib-random.h	/^#define _CLIB_RANDOM_H$/;"	d
_CLIB_RPCPACK_H	c/rpc/clib-rpcpack.h	/^#define _CLIB_RPCPACK_H$/;"	d
_CLIB_STRING_H	c/string/clib-string.h	/^#define _CLIB_STRING_H$/;"	d
_CTOOL_ALIGN_H	c/rpc/ctool_align.h	/^#define _CTOOL_ALIGN_H$/;"	d
_FILE_READ_WRITE_H	file-read-write.h	/^#define _FILE_READ_WRITE_H$/;"	d
_FmConfig	fm-config.h	/^struct _FmConfig$/;"	s
__anon029902020102	thumbnail-job.cpp	/^        file->mimeType()->forEachThumbnailer([&](const std::shared_ptr<const Thumbnailer>& thumb/;"	f	function:dingjing::ThumbnailJob::generateThumbnail	file:
__anon3051330b0102	folder-model-view/folder-view.cpp	/^    connect(action, &QAction::triggered, action, [this] (bool checked) {$/;"	f	function:dingjing::FolderViewTreeView::headerContextMenu	file:
__anon3051330b0202	folder-model-view/folder-view.cpp	/^                    connect(action, &QAction::triggered, action, [this, column] (bool checked) {$/;"	f	function:dingjing::FolderViewTreeView::headerContextMenu	file:
__anon3051330b0302	folder-model-view/folder-view.cpp	/^        connect(treeView, &FolderViewTreeView::columnResizedByUser, [this](int visualIndex, int /;"	f	function:dingjing::FolderView::setViewMode	file:
__anon3051330b0402	folder-model-view/folder-view.cpp	/^        connect(treeView, &FolderViewTreeView::autoResizeEnabled, [this]() {$/;"	f	function:dingjing::FolderView::setViewMode	file:
__anon3051330b0502	folder-model-view/folder-view.cpp	/^        connect(treeView, &FolderViewTreeView::columnHiddenByUser, [this](int visibleIndex, bool/;"	f	function:dingjing::FolderView::setViewMode	file:
__anon38f028e10102	folder-model-view/folder-model.cpp	/^    auto it = std::find_if(mThumbnailData.begin(), mThumbnailData.end(), [size](ThumbnailData& i/;"	f	function:dingjing::FolderModel::queueLoadThumbnail	file:
__anon38f028e10202	folder-model-view/folder-model.cpp	/^    auto it = std::find_if(mThumbnailData.begin(), mThumbnailData.end(), [size](ThumbnailData& i/;"	f	function:dingjing::FolderModel::cacheThumbnails	file:
__anon4cb127d30103	c/tree/clib-avl-tree.h	/^typedef enum {$/;"	g
__anon4d33341a0108	c/config/clib-conf.c	/^{$/;"	s	file:
__anon4d33341a0208	c/config/clib-conf.c	/^{$/;"	s	file:
__anon5350a68c010a	c/rpc/clib-rpcpack.h	/^typedef union {$/;"	u
__anon5350a68c0208	c/rpc/clib-rpcpack.h	/^    struct {$/;"	s	union:__anon5350a68c010a
__anon5350a68c0308	c/rpc/clib-rpcpack.h	/^typedef struct {$/;"	s
__anon5350a68c0408	c/rpc/clib-rpcpack.h	/^typedef struct {$/;"	s
__anon5350a68c050a	c/rpc/clib-rpcpack.h	/^    union {$/;"	u	struct:__anon5350a68c0408
__anon5350a68c0608	c/rpc/clib-rpcpack.h	/^        struct {$/;"	s	union:__anon5350a68c0408::__anon5350a68c050a
__anon5350a68c0708	c/rpc/clib-rpcpack.h	/^        struct {$/;"	s	union:__anon5350a68c0408::__anon5350a68c050a
__anon5350a68c0808	c/rpc/clib-rpcpack.h	/^typedef struct {$/;"	s
__anon5350a68c0908	c/rpc/clib-rpcpack.h	/^typedef struct {$/;"	s
__anon7e2e3da70102	folder-model-view/folder-item-delegate.cpp	/^    connect(this,  &QAbstractItemDelegate::closeEditor, [=]{mHasEditor = false;});$/;"	f	function:dingjing::FolderItemDelegate::FolderItemDelegate	file:
__anon7e2e3da70202	folder-model-view/folder-item-delegate.cpp	/^            QTimer::singleShot(0, lineEdit, [lineEdit]() {$/;"	f	function:dingjing::FolderItemDelegate::setEditorData	file:
__anon8bee06e70103	c/log/clib-log.h	/^typedef enum {$/;"	g
__anon8bee06e70203	c/log/clib-log.h	/^typedef enum {$/;"	g
__anon8bee06e70303	c/log/clib-log.h	/^typedef enum {$/;"	g
__anon96960b770103	c/common/clib-ret.h	/^{$/;"	g
__anonead7b46e0102	pathbar-model-view/path-editor.cpp	/^            QTimer::singleShot(0, mCompleter, [this, key] {$/;"	f	function:dingjing::PathEditor::event	file:
__anonead7b46e0202	pathbar-model-view/path-editor.cpp	/^            QTimer::singleShot(0, mCompleter, [this] {$/;"	f	function:dingjing::PathEditor::event	file:
_array_list_node_t	c/array/clib-array-list.c	/^struct _array_list_node_t {$/;"	s	file:
_array_list_t	c/array/clib-array-list.c	/^struct _array_list_t {$/;"	s	file:
_avl_tree_node_t	c/tree/clib-avl-tree.c	/^struct _avl_tree_node_t {$/;"	s	file:
_avl_tree_t	c/tree/clib-avl-tree.c	/^struct _avl_tree_t {$/;"	s	file:
_base64_dec	c/base64/clib-base64.c	/^static const uint8_t _base64_dec[256] = {$/;"	v	typeref:typename:const uint8_t[256]	file:
_base64_enc	c/base64/clib-base64.c	/^static const char _base64_enc[64] = {$/;"	v	typeref:typename:const char[64]	file:
_base64_encode	c/base64/clib-base64.c	/^size_t _base64_encode(char* target, const void* source, size_t bytes, const char* table) {$/;"	f	typeref:typename:size_t
_bstring_t	c/string/clib-bstring.h	/^typedef struct _bstring_t$/;"	s
_cfg_mon	fm-config.h	/^    GFileMonitor *_cfg_mon;$/;"	m	struct:_FmConfig	typeref:typename:GFileMonitor *
_cfg_name	fm-config.h	/^    char *_cfg_name;$/;"	m	struct:_FmConfig	typeref:typename:char *
_double_list_iter_t	c/list/clib-double-list.h	/^struct _double_list_iter_t {$/;"	s
_double_list_node_t	c/list/clib-double-list.h	/^struct _double_list_node_t {$/;"	s
_double_list_t	c/list/clib-double-list.h	/^struct _double_list_t {$/;"	s
_file_enumerator_t	c/file/clib-file-enumerator.c	/^struct _file_enumerator_t$/;"	s	file:
_file_name	c/log/clib-log.c	/^static const char* _file_name(const char* path, int len) {$/;"	f	typeref:typename:const char *	file:
_fm_icon_from_name	icon-info.cpp	/^    extern "C" GIcon* _fm_icon_from_name(const char* name) {$/;"	f	namespace:dingjing	typeref:typename:GIcon *
_is_log_init	c/log/clib-log.c	/^static int _is_log_init = 0;                                            \/* 是否完成初始化/;"	v	typeref:typename:int	file:
_log_dir	c/log/clib-log.c	/^static char _log_dir[LOG_DIRNAME_LEN] = ".\/";                           \/* 日志输出文件夹/;"	v	typeref:typename:char[]	file:
_log_fd	c/log/clib-log.c	/^static int _log_fd = 0;                                                 \/* 当前打开的日志/;"	v	typeref:typename:int	file:
_log_get_time	c/log/clib-log.c	/^static void _log_get_time(char* str, int len, int flag) {$/;"	f	typeref:typename:void	file:
_log_level	c/log/clib-log.c	/^static log_level_t _log_level;                                          \/* 输出日至级别 */;"	v	typeref:typename:log_level_t	file:
_log_level_str	c/log/clib-log.c	/^static const char* _log_level_str[] = {$/;"	v	typeref:typename:const char * []	file:
_log_mutex	c/log/clib-log.c	/^static pthread_mutex_t _log_mutex;                                      \/* 日志锁 *\/$/;"	v	typeref:typename:pthread_mutex_t	file:
_log_open_rewrite	c/log/clib-log.c	/^static int _log_open_rewrite(const char *path) {$/;"	f	typeref:typename:int	file:
_log_prefix	c/log/clib-log.c	/^static char _log_prefix[LOG_FILENAME_LEN] = "log";                      \/* 日志名称 *\/$/;"	v	typeref:typename:char[]	file:
_log_print	c/log/clib-log.c	/^static int _log_print(log_level_t level, const char* tag, const char* file, int line, const char/;"	f	typeref:typename:int	file:
_log_rotate	c/log/clib-log.c	/^static log_rotate_t _log_rotate;                                        \/* 是否允许分文件/;"	v	typeref:typename:log_rotate_t	file:
_log_size	c/log/clib-log.c	/^static unsigned long long _log_size = 0;                                \/* 日志文件大小 */;"	v	typeref:typename:unsigned long long	file:
_log_suffix	c/log/clib-log.c	/^static char _log_suffix[LOG_FILENAME_LEN] = "log";                      \/* 日志扩展名 *\/$/;"	v	typeref:typename:char[]	file:
_log_type	c/log/clib-log.c	/^static log_type_t _log_type = LOG_TYPE_CONSOLE;                         \/* 日志默认输出到/;"	v	typeref:typename:log_type_t	file:
_log_write	c/log/clib-log.c	/^static ssize_t _log_write(struct iovec *vec, int n) {$/;"	f	typeref:typename:ssize_t	file:
_onCancellableCancelled	job.cpp	/^    void Job::_onCancellableCancelled(GCancellable* cancellable, Job* _this)$/;"	f	class:dingjing::Job	typeref:typename:void
_onFileChangeEvents	folder.h	/^        static void _onFileChangeEvents(GFileMonitor* monitor, GFile* file, GFile* other_file, G/;"	f	class:dingjing::Folder	typeref:typename:void
_onGMountAdded	volume-manager.h	/^    static void _onGMountAdded(GVolumeMonitor* \/*mon*\/, GMount* mnt, VolumeManager* _this)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
_onGMountChanged	volume-manager.h	/^    static void _onGMountChanged(GVolumeMonitor* \/*mon*\/, GMount* mnt, VolumeManager* _this)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
_onGMountRemoved	volume-manager.h	/^    static void _onGMountRemoved(GVolumeMonitor* \/*mon*\/, GMount* mnt, VolumeManager* _this)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
_onGVolumeAdded	volume-manager.h	/^    static void _onGVolumeAdded(GVolumeMonitor* \/*mon*\/, GVolume* vol, VolumeManager* _this)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
_onGVolumeChanged	volume-manager.h	/^    static void _onGVolumeChanged(GVolumeMonitor* \/*mon*\/, GVolume* vol, VolumeManager* _this)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
_onGVolumeRemoved	volume-manager.h	/^    static void _onGVolumeRemoved(GVolumeMonitor* \/*mon*\/, GVolume* vol, VolumeManager* _this)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
_open_file	c/log/clib-log.c	/^static int _open_file() {$/;"	f	typeref:typename:int	file:
_path_name	c/log/clib-log.c	/^static char _path_name[LOG_PATH_MAX] = {0};                             \/* 完整日志路径 */;"	v	typeref:typename:char[]	file:
_random	c/random/clib-random.c	/^uint64_t _random(uint64_t seed) $/;"	f	typeref:typename:uint64_t
_reserved1	fm-config.h	/^    gpointer _reserved1; \/* reserved space for updates until next ABI *\/$/;"	m	struct:_FmConfig	typeref:typename:gpointer
_reserved2	fm-config.h	/^    gpointer _reserved2;$/;"	m	struct:_FmConfig	typeref:typename:gpointer
_reserved3	fm-config.h	/^    gpointer _reserved3;$/;"	m	struct:_FmConfig	typeref:typename:gpointer
_reserved4	fm-config.h	/^    gpointer _reserved4;$/;"	m	struct:_FmConfig	typeref:typename:gpointer
_reserved5	fm-config.h	/^    gpointer _reserved5;$/;"	m	struct:_FmConfig	typeref:typename:gpointer
_reserved6	fm-config.h	/^    gpointer _reserved6;$/;"	m	struct:_FmConfig	typeref:typename:gpointer
_reserved7	fm-config.h	/^    gpointer _reserved7;$/;"	m	struct:_FmConfig	typeref:typename:gpointer
_thread_once	c/log/clib-log.c	/^static pthread_once_t _thread_once = PTHREAD_ONCE_INIT;                 \/* 确保初始化一次/;"	v	typeref:typename:pthread_once_t	file:
_thread_pool_t	c/thread_pool/clib-thread-pool.c	/^struct _thread_pool_t $/;"	s	file:
_thread_worker_t	c/thread_pool/clib-thread-pool.c	/^struct _thread_worker_t$/;"	s	file:
`clib_log.h clib_log.c`	c/log/README.md	/^### `clib_log.h clib_log.c`$/;"	S
activation	folder-model-view/folder-view.cpp	/^void FolderViewListView::activation(const QModelIndex& index)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
activation	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::activation(const QModelIndex& index) {$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
activationRoot	volume-manager.h	/^    FilePath activationRoot() const$/;"	f	class:dingjing::Volume	typeref:typename:FilePath
actualSize	icon-info-p.h	/^    QSize IconEngine::actualSize(const QSize& size, QIcon::Mode mode, QIcon::State state) {$/;"	f	class:dingjing::IconEngine	typeref:typename:QSize
addFile	icon-info-p.h	/^        void addFile(const QString& \/*fileName*\/, const QSize& \/*size*\/, QIcon::Mode \/*mode/;"	f	class:dingjing::IconEngine	typeref:typename:void
addFilter	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::addFilter(ProxyFolderModelFilter* filter) {$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
addPixmap	icon-info-p.h	/^        void addPixmap(const QPixmap& \/*pixmap*\/, QIcon::Mode \/*mode*\/, QIcon::State \/*stat/;"	f	class:dingjing::IconEngine	typeref:typename:void
addThumbnailer	mime-type.h	/^        void addThumbnailer(std::shared_ptr<const Thumbnailer> thumbnailer)$/;"	f	class:dingjing::MimeType	typeref:typename:void
addr	c/rpc/clib-rpcpack.h	/^    uint8_t addr[CLIB_RPCPACK_MAX_NSADDR_BYTES];$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint8_t[]
advanced_mode	fm-config.h	/^    gboolean advanced_mode;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
allThumbnailers_	thumbnailer.cpp	/^    std::vector<std::shared_ptr<Thumbnailer>> Thumbnailer::allThumbnailers_;$/;"	m	class:dingjing::Thumbnailer	typeref:typename:std::vector<std::shared_ptr<Thumbnailer>>
allThumbnailers_	thumbnailer.h	/^        static std::vector<std::shared_ptr<Thumbnailer>> allThumbnailers_;$/;"	m	class:dingjing::Thumbnailer	typeref:typename:std::vector<std::shared_ptr<Thumbnailer>>
archiver	fm-config.h	/^    char* archiver;$/;"	m	struct:_FmConfig	typeref:typename:char *
arg	c/thread_pool/clib-thread-pool.c	/^    void*                       arg;$/;"	m	struct:_thread_worker_t	typeref:typename:void *	file:
array_list_append	c/array/clib-array-list.c	/^array_value_t array_list_append(array_list_t* array, array_value_t value) {$/;"	f	typeref:typename:array_value_t
array_list_free	c/array/clib-array-list.c	/^void array_list_free(array_list_t** array) {$/;"	f	typeref:typename:void
array_list_length	c/array/clib-array-list.c	/^unsigned int array_list_length(array_list_t* array) {$/;"	f	typeref:typename:unsigned int
array_list_new	c/array/clib-array-list.c	/^array_list_t* array_list_new(unsigned long cap, array_list_value_cmp cb) {$/;"	f	typeref:typename:array_list_t *
array_list_node_t	c/array/clib-array-list.c	/^typedef struct _array_list_node_t array_list_node_t;$/;"	t	typeref:struct:_array_list_node_t	file:
array_list_print	c/array/clib-array-list.c	/^void array_list_print(array_list_t* array, array_list_print_cb print) {$/;"	f	typeref:typename:void
array_list_print_cb	c/array/clib-array-list.h	/^typedef void(*array_list_print_cb) (array_value_t v);$/;"	t	typeref:typename:void (*)(array_value_t v)
array_list_t	c/array/clib-array-list.h	/^typedef struct _array_list_t array_list_t;$/;"	t	typeref:struct:_array_list_t
array_list_value_cmp	c/array/clib-array-list.h	/^typedef int (*array_list_value_cmp) (array_value_t v1, array_value_t v2);$/;"	t	typeref:typename:int (*)(array_value_t v1,array_value_t v2)
array_value_t	c/array/clib-array-list.h	/^typedef void* array_value_t;$/;"	t	typeref:typename:void *
askUser	dnd-action-menu.cpp	/^Qt::DropAction DndActionMenu::askUser(Qt::DropActions possibleActions, QPoint pos)$/;"	f	class:dingjing::DndActionMenu	typeref:typename:Qt::DropAction
atime	file-info.h	/^        quint64 atime() const$/;"	f	class:dingjing::FileInfo	typeref:typename:quint64
atime_	file-info.h	/^        quint64 atime_;$/;"	m	class:dingjing::FileInfo	typeref:typename:quint64
atomName	x-dnd-workaround.cpp	/^QByteArray XdndWorkaround::atomName(xcb_atom_t atom)$/;"	f	class:XdndWorkaround	typeref:typename:QByteArray
autoSelectionDelay	folder-model-view/folder-view.h	/^    int autoSelectionDelay() const$/;"	f	class:dingjing::FolderView	typeref:typename:int
auto_selection_delay	fm-config.h	/^    gint auto_selection_delay;$/;"	m	struct:_FmConfig	typeref:typename:gint
avl_key_t	c/tree/clib-avl-tree.h	/^typedef void* avl_key_t;$/;"	t	typeref:typename:void *
avl_tree_balance_to_root	c/tree/clib-avl-tree.c	/^static void avl_tree_balance_to_root(avl_tree_t* tree, avl_tree_node_t* node) {$/;"	f	typeref:typename:void	file:
avl_tree_compare	c/tree/clib-avl-tree.h	/^typedef int (*avl_tree_compare)(avl_key_t k1, avl_key_t v2);$/;"	t	typeref:typename:int (*)(avl_key_t k1,avl_key_t v2)
avl_tree_free	c/tree/clib-avl-tree.c	/^void avl_tree_free(avl_tree_t* tree) {$/;"	f	typeref:typename:void
avl_tree_insert	c/tree/clib-avl-tree.c	/^avl_tree_node_t* avl_tree_insert(avl_tree_t* tree, avl_key_t key, avl_key_t value) {$/;"	f	typeref:typename:avl_tree_node_t *
avl_tree_lookup_node	c/tree/clib-avl-tree.c	/^avl_tree_node_t* avl_tree_lookup_node(avl_tree_t* tree, avl_key_t key) {$/;"	f	typeref:typename:avl_tree_node_t *
avl_tree_lookup_value	c/tree/clib-avl-tree.c	/^avl_value_t avl_tree_lookup_value(avl_tree_t *tree, avl_key_t key) {$/;"	f	typeref:typename:avl_value_t
avl_tree_new	c/tree/clib-avl-tree.c	/^avl_tree_t* avl_tree_new(avl_tree_compare func) {$/;"	f	typeref:typename:avl_tree_t *
avl_tree_node_balance	c/tree/clib-avl-tree.c	/^static avl_tree_node_t* avl_tree_node_balance(avl_tree_t* tree, avl_tree_node_t* node) {$/;"	f	typeref:typename:avl_tree_node_t *	file:
avl_tree_node_child	c/tree/clib-avl-tree.c	/^avl_tree_node_t *avl_tree_node_child(avl_tree_node_t *node, avl_tree_side_t side) {$/;"	f	typeref:typename:avl_tree_node_t *
avl_tree_node_get_replacement	c/tree/clib-avl-tree.c	/^static avl_tree_node_t* avl_tree_node_get_replacement(avl_tree_t* tree, avl_tree_node_t* node) {$/;"	f	typeref:typename:avl_tree_node_t *	file:
avl_tree_node_key	c/tree/clib-avl-tree.c	/^avl_key_t avl_tree_node_key(avl_tree_node_t* node) {$/;"	f	typeref:typename:avl_key_t
avl_tree_node_parent	c/tree/clib-avl-tree.c	/^avl_tree_node_t *avl_tree_node_parent(avl_tree_node_t *node) {$/;"	f	typeref:typename:avl_tree_node_t *
avl_tree_node_parent_sider	c/tree/clib-avl-tree.c	/^static avl_tree_side_t avl_tree_node_parent_sider(avl_tree_node_t* node) {$/;"	f	typeref:typename:avl_tree_side_t	file:
avl_tree_node_replace	c/tree/clib-avl-tree.c	/^static void avl_tree_node_replace(avl_tree_t* tree, avl_tree_node_t* node1, avl_tree_node_t* nod/;"	f	typeref:typename:void	file:
avl_tree_node_t	c/tree/clib-avl-tree.h	/^typedef struct _avl_tree_node_t avl_tree_node_t;$/;"	t	typeref:struct:_avl_tree_node_t
avl_tree_node_value	c/tree/clib-avl-tree.c	/^avl_value_t avl_tree_node_value(avl_tree_node_t* node) {$/;"	f	typeref:typename:avl_value_t
avl_tree_num	c/tree/clib-avl-tree.c	/^unsigned int avl_tree_num(avl_tree_t *tree) {$/;"	f	typeref:typename:unsigned int
avl_tree_print_key	c/tree/clib-avl-tree.h	/^typedef void (*avl_tree_print_key) (avl_key_t key);$/;"	t	typeref:typename:void (*)(avl_key_t key)
avl_tree_remove	c/tree/clib-avl-tree.c	/^int avl_tree_remove(avl_tree_t* tree, void* key) {$/;"	f	typeref:typename:int
avl_tree_remove_node	c/tree/clib-avl-tree.c	/^void avl_tree_remove_node(avl_tree_t *tree, avl_tree_node_t *node) {$/;"	f	typeref:typename:void
avl_tree_root_node	c/tree/clib-avl-tree.c	/^avl_tree_node_t* avl_tree_root_node(avl_tree_t *tree) {$/;"	f	typeref:typename:avl_tree_node_t *
avl_tree_rotate	c/tree/clib-avl-tree.c	/^static avl_tree_node_t* avl_tree_rotate(avl_tree_t* tree, avl_tree_node_t* node, avl_tree_side_t/;"	f	typeref:typename:avl_tree_node_t *	file:
avl_tree_side_t	c/tree/clib-avl-tree.h	/^} avl_tree_side_t;$/;"	t	typeref:enum:__anon4cb127d30103
avl_tree_subtree	c/tree/clib-avl-tree.c	/^static void avl_tree_subtree(avl_tree_node_t* node) {$/;"	f	typeref:typename:void	file:
avl_tree_subtree_height	c/tree/clib-avl-tree.c	/^int avl_tree_subtree_height(avl_tree_node_t* node) {$/;"	f	typeref:typename:int
avl_tree_t	c/tree/clib-avl-tree.h	/^typedef struct _avl_tree_t  avl_tree_t;$/;"	t	typeref:struct:_avl_tree_t
avl_tree_update_height	c/tree/clib-avl-tree.c	/^static void avl_tree_update_height(avl_tree_node_t* node) {$/;"	f	typeref:typename:void	file:
avl_value_t	c/tree/clib-avl-tree.h	/^typedef void* avl_value_t;$/;"	t	typeref:typename:void *
backupAsHidden	folder-model-view/proxy-folder-model.cpp	/^bool ProxyFolderModel::backupAsHidden() const$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:bool
backup_as_hidden	fm-config.h	/^    gboolean backup_as_hidden;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
base64_decode	c/base64/clib-base64.c	/^size_t base64_decode(void* target, const char* source, size_t bytes) {$/;"	f	typeref:typename:size_t
base64_encode	c/base64/clib-base64.c	/^size_t base64_encode(char* target, const void* source, size_t bytes) {$/;"	f	typeref:typename:size_t
baseName	file-path.cpp	/^CStrPtr FilePath::baseName() const$/;"	f	class:dingjing::FilePath	typeref:typename:CStrPtr
big_icon_size	fm-config.h	/^    gint big_icon_size;$/;"	m	struct:_FmConfig	typeref:typename:gint
blksize_	file-info.h	/^        uint64_t blksize_;$/;"	m	class:dingjing::FileInfo	typeref:typename:uint64_t
blocks_	file-info.h	/^        uint64_t blocks_;$/;"	m	class:dingjing::FileInfo	typeref:typename:uint64_t
bstring_avail	c/string/clib-bstring.c	/^size_t bstring_avail(const char* str)$/;"	f	typeref:typename:size_t
bstring_cat_len	c/string/clib-bstring.c	/^char* bstring_cat_len(char* str, const void* t, size_t len)$/;"	f	typeref:typename:char *
bstring_cat_str	c/string/clib-bstring.c	/^char* bstring_cat_str(char* str, const char* cstr)$/;"	f	typeref:typename:char *
bstring_clear	c/string/clib-bstring.c	/^void bstring_clear(char* str)$/;"	f	typeref:typename:void
bstring_compare	c/string/clib-bstring.c	/^int bstring_compare(const char* str1, const char* str2)$/;"	f	typeref:typename:int
bstring_copy	c/string/clib-bstring.c	/^char* bstring_copy(char* str, const char *cstr)$/;"	f	typeref:typename:char *
bstring_cover_len	c/string/clib-bstring.c	/^char* bstring_cover_len(char* str, const char *cstr, size_t cstrlen)$/;"	f	typeref:typename:char *
bstring_dup	c/string/clib-bstring.c	/^char* bstring_dup(const char* str)$/;"	f	typeref:typename:char *
bstring_empty	c/string/clib-bstring.c	/^char* bstring_empty(void)$/;"	f	typeref:typename:char *
bstring_expand_room	c/string/clib-bstring.c	/^char* bstring_expand_room(char* str, size_t addlen)$/;"	f	typeref:typename:char *
bstring_free	c/string/clib-bstring.c	/^void bstring_free(char* str)$/;"	f	typeref:typename:void
bstring_grow_by_zero	c/string/clib-bstring.c	/^char* bstring_grow_by_zero(char* str, size_t len)$/;"	f	typeref:typename:char *
bstring_keep_range	c/string/clib-bstring.c	/^void bstring_keep_range(char* str, int start, int end)$/;"	f	typeref:typename:void
bstring_len	c/string/clib-bstring.c	/^size_t bstring_len(const char* str)$/;"	f	typeref:typename:size_t
bstring_new	c/string/clib-bstring.c	/^char* bstring_new(const char *str)$/;"	f	typeref:typename:char *
bstring_new_len	c/string/clib-bstring.c	/^char* bstring_new_len(const void* str, size_t strl)$/;"	f	typeref:typename:char *
bstring_strim	c/string/clib-bstring.c	/^char* bstring_strim(char* str, const char *ceilStr)$/;"	f	typeref:typename:char *
bstring_t	c/string/clib-bstring.h	/^typedef struct _bstring_t   bstring_t;$/;"	t	typeref:struct:_bstring_t
bstring_t	c/string/clib-bstring.h	/^} bstring_t;$/;"	t	typeref:struct:_bstring_t
buf	c/string/clib-bstring.h	/^    char   buf[];                                   \/\/  等价于 char* 但是与 char* 不同/;"	m	struct:_bstring_t	typeref:typename:char[]
buttonRelease	x-dnd-workaround.cpp	/^void XdndWorkaround::buttonRelease()$/;"	f	class:XdndWorkaround	typeref:typename:void
bytes_array	c/config/clib-conf.c	/^    uint8_t *bytes_array;$/;"	m	struct:__anon4d33341a0208	typeref:typename:uint8_t *	file:
bytes_asize	c/config/clib-conf.c	/^    uint32_t bytes_asize;$/;"	m	struct:__anon4d33341a0208	typeref:typename:uint32_t	file:
bytes_count	c/config/clib-conf.c	/^    uint32_t bytes_count;$/;"	m	struct:__anon4d33341a0208	typeref:typename:uint32_t	file:
c 日志库	c/log/README.md	/^### c 日志库$/;"	S
cacheThumbnails	folder-model-view/folder-model.cpp	/^void FolderModel::cacheThumbnails(const int size)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
cache_	folder.cpp	/^    std::unordered_map<FilePath, std::weak_ptr<Folder>, FilePathHash> Folder::cache_;$/;"	m	class:dingjing::Folder	typeref:typename:std::unordered_map<FilePath,std::weak_ptr<Folder>,FilePathHash>
cache_	folder.h	/^        static std::unordered_map<FilePath, std::weak_ptr<Folder>, FilePathHash> cache_;$/;"	m	class:dingjing::Folder	typeref:typename:std::unordered_map<FilePath,std::weak_ptr<Folder>,FilePathHash>
cache_	icon-info.cpp	/^    std::unordered_map<GIcon*, std::shared_ptr<IconInfo>, IconInfo::GIconHash, IconInfo::GIconEq/;"	m	class:dingjing::IconInfo	typeref:typename:std::unordered_map<GIcon *,std::shared_ptr<IconInfo>,IconInfo::GIconHash,IconInfo::GIconEqual>
cache_	icon-info.h	/^    static std::unordered_map<GIcon*, std::shared_ptr<IconInfo>, GIconHash, GIconEqual> cache_;$/;"	m	class:dingjing::IconInfo	typeref:typename:std::unordered_map<GIcon *,std::shared_ptr<IconInfo>,GIconHash,GIconEqual>
cache_	mime-type.cpp	/^    std::unordered_map<const char*, std::shared_ptr<const MimeType>, CStrHash, CStrEqual> MimeTy/;"	m	class:dingjing::MimeType	typeref:typename:std::unordered_map<const char *,std::shared_ptr<const MimeType>,CStrHash,CStrEqual>
cache_	mime-type.h	/^        static std::unordered_map<const char*, std::shared_ptr<const MimeType>, CStrHash, CStrEq/;"	m	class:dingjing::MimeType	typeref:typename:std::unordered_map<const char *,std::shared_ptr<const MimeType>,CStrHash,CStrEqual>
call_seq	c/rpc/clib-rpcpack.h	/^            uint64_t call_seq;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0608	typeref:typename:uint64_t
call_state	c/rpc/clib-rpcpack.h	/^    uint8_t call_state;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint8_t
call_trace	c/rpc/clib-rpcpack.h	/^            rpcpack_trace_t call_trace;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0608	typeref:typename:rpcpack_trace_t
call_trace	c/rpc/clib-rpcpack.h	/^    rpcpack_trace_t call_trace;$/;"	m	struct:__anon5350a68c0308	typeref:typename:rpcpack_trace_t
canBeExecutable	mime-type.h	/^        bool canBeExecutable() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
canEject	volume-manager.h	/^    bool canEject() const$/;"	f	class:dingjing::Volume	typeref:typename:bool
canMount	volume-manager.h	/^    bool canMount() const$/;"	f	class:dingjing::Volume	typeref:typename:bool
canSetHidden	file-info.h	/^        bool canSetHidden() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
canSetIcon	file-info.h	/^        bool canSetIcon() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
canSetName	file-info.h	/^        bool canSetName() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
canThumbnail	file-info.cpp	/^    bool FileInfo::canThumbnail() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
canUnmount	volume-manager.h	/^    bool canUnmount() const {$/;"	f	class:dingjing::Mount	typeref:typename:bool
cancel	job.cpp	/^    void Job::cancel()$/;"	f	class:dingjing::Job	typeref:typename:void
cancellable	c/file/clib-file-enumerator.c	/^    GCancellable*       cancellable;$/;"	m	struct:_file_enumerator_t	typeref:typename:GCancellable *	file:
cancellable	job.cpp	/^    const GCancellablePtr& Job::cancellable() const$/;"	f	class:dingjing::Job	typeref:typename:const GCancellablePtr &
cancellableHandler_	job.h	/^    gulong cancellableHandler_;$/;"	m	class:dingjing::Job	typeref:typename:gulong
cancellable_	job.h	/^    GCancellablePtr cancellable_;$/;"	m	class:dingjing::Job	typeref:typename:GCancellablePtr
cap	c/array/clib-array-list.c	/^    unsigned long           cap;        \/\/ 总空间$/;"	m	struct:_array_list_t	typeref:typename:unsigned long	file:
changeEvent	pathbar-model-view/pathbar-p.h	/^    void changeEvent(QEvent* event) override$/;"	f	class:dingjing::PathButton	typeref:typename:void
changeFileName	utils.cpp	/^bool dingjing::Utils::changeFileName(const dingjing::FilePath &filePath, const QString &newName,/;"	f	class:dingjing::Utils	typeref:typename:bool
check_dir	c/log/clib-log.c	/^static int check_dir (const char* path) {$/;"	f	typeref:typename:int	file:
child	file-path.cpp	/^FilePath FilePath::child(const char *name) const$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath
childDragEnterEvent	folder-model-view/folder-view.cpp	/^void FolderView::childDragEnterEvent(QDragEnterEvent* event)$/;"	f	class:dingjing::FolderView	typeref:typename:void
childDragLeaveEvent	folder-model-view/folder-view.cpp	/^void FolderView::childDragLeaveEvent(QDragLeaveEvent* e)$/;"	f	class:dingjing::FolderView	typeref:typename:void
childDragMoveEvent	folder-model-view/folder-view.cpp	/^void FolderView::childDragMoveEvent(QDragMoveEvent* e)$/;"	f	class:dingjing::FolderView	typeref:typename:void
childDropEvent	folder-model-view/folder-view.cpp	/^void FolderView::childDropEvent(QDropEvent* e)$/;"	f	class:dingjing::FolderView	typeref:typename:void
childMousePressEvent	folder-model-view/folder-view.cpp	/^void FolderView::childMousePressEvent(QMouseEvent* event)$/;"	f	class:dingjing::FolderView	typeref:typename:void
childView	folder-model-view/folder-view.cpp	/^QAbstractItemView* FolderView::childView() const$/;"	f	class:dingjing::FolderView	typeref:typename:QAbstractItemView *
children	c/file/clib-file-enumerator.c	/^    GList*              children;$/;"	m	struct:_file_enumerator_t	typeref:typename:GList *	file:
children	c/tree/clib-avl-tree.c	/^    avl_tree_node_t*        children[2];$/;"	m	struct:_avl_tree_node_t	typeref:typename:avl_tree_node_t * [2]	file:
cint16	clib-global.h	/^typedef short                           cint16;             \/\/ 16 bit signed$/;"	t	typeref:typename:short
cint32	clib-global.h	/^typedef int                             cint32;             \/\/ 32 bit signed$/;"	t	typeref:typename:int
cint64	clib-global.h	/^typedef long long                       cint64;             \/\/ 64 bit signed$/;"	t	typeref:typename:long long
cint8	clib-global.h	/^typedef signed char                     cint8;              \/\/ 8 bit signed$/;"	t	typeref:typename:signed char
clientMessage	x-dnd-workaround.cpp	/^bool XdndWorkaround::clientMessage(xcb_client_message_event_t* event)$/;"	f	class:XdndWorkaround	typeref:typename:bool
clone	icon-info-p.h	/^    QIconEngine* IconEngine::clone() const {$/;"	f	class:dingjing::IconEngine	typeref:typename:QIconEngine *
closeEditor	folder-model-view/folder-item-delegate.cpp	/^            Q_EMIT QAbstractItemDelegate::closeEditor(editor, QAbstractItemDelegate::NoHint);$/;"	m	class:dingjing::FolderItemDelegate::eventFilter::QAbstractItemDelegate	typeref:typename:Q_EMIT	file:
closeEditor	pathbar-model-view/pathbar.cpp	/^void PathBar::closeEditor()$/;"	f	class:dingjing::PathBar	typeref:typename:void
cmp_func	c/array/clib-array-list.c	/^    array_list_value_cmp    cmp_func;   \/\/ 比较两个值的大小$/;"	m	struct:_array_list_t	typeref:typename:array_list_value_cmp	file:
cmp_func	c/tree/clib-avl-tree.c	/^    avl_tree_compare        cmp_func;$/;"	m	struct:_avl_tree_t	typeref:typename:avl_tree_compare	file:
code	smart-ptr.hpp	/^    unsigned int code() const$/;"	f	class:dingjing::GErrorPtr	typeref:typename:unsigned int
columnCount	folder-model-view/folder-model.cpp	/^int FolderModel::columnCount(const QModelIndex& parent = QModelIndex()) const$/;"	f	class:dingjing::FolderModel	typeref:typename:int
commandForUri	thumbnailer.cpp	/^    CStrPtr Thumbnailer::commandForUri(const char* uri, const char* output_file, guint size) con/;"	f	class:dingjing::Thumbnailer	typeref:typename:CStrPtr
command_flag	c/rpc/clib-rpcpack.h	/^            uint8_t command_flag;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0608	typeref:typename:uint8_t
command_type	c/rpc/clib-rpcpack.h	/^            uint16_t command_type;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0608	typeref:typename:uint16_t
command_ver	c/rpc/clib-rpcpack.h	/^            uint8_t command_ver;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0608	typeref:typename:uint8_t
commitData	folder-model-view/folder-item-delegate.cpp	/^            Q_EMIT QAbstractItemDelegate::commitData(editor);$/;"	m	class:dingjing::FolderItemDelegate::eventFilter::QAbstractItemDelegate	typeref:typename:Q_EMIT	file:
common_read_line	c/util/clib-util.c	/^static CLIB_RET common_read_line (int fd, char* buf, int buf_size)$/;"	f	typeref:typename:CLIB_RET	file:
common_str_is_number	c/util/clib-util.c	/^static CLIB_RET common_str_is_number (const char* str)$/;"	f	typeref:typename:CLIB_RET	file:
conf_data_t	c/config/clib-conf.c	/^} conf_data_t;$/;"	t	typeref:struct:__anon4d33341a0208	file:
conf_dump	c/config/clib-conf.c	/^void conf_dump(void *conf) {$/;"	f	typeref:typename:void
conf_kv_t	c/config/clib-conf.c	/^} conf_kv_t;$/;"	t	typeref:struct:__anon4d33341a0108	file:
conf_load	c/config/clib-conf.c	/^int conf_load(void *conf, const char *path_name, uint32_t buf_size, uint32_t kv_asize)$/;"	f	typeref:typename:int
conf_udec	c/config/clib-conf.c	/^uint64_t conf_udec(void *conf, const char *key, uint64_t def) $/;"	f	typeref:typename:uint64_t
conf_uhex	c/config/clib-conf.c	/^uint64_t conf_uhex(void *conf, const char *key, uint64_t def) $/;"	f	typeref:typename:uint64_t
conf_value	c/config/clib-conf.c	/^const char *conf_value(void *conf, const char *key, const char *def) $/;"	f	typeref:typename:const char *
confirm_del	fm-config.h	/^    gboolean confirm_del;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
confirm_trash	fm-config.h	/^    gboolean confirm_trash;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
contextMenuEvent	folder-model-view/folder-view.cpp	/^void FolderView::contextMenuEvent(QContextMenuEvent* event)$/;"	f	class:dingjing::FolderView	typeref:typename:void
contextMenuEvent	pathbar-model-view/pathbar.cpp	/^void PathBar::contextMenuEvent(QContextMenuEvent* event)$/;"	f	class:dingjing::PathBar	typeref:typename:void
copyPath	pathbar-model-view/pathbar.cpp	/^void PathBar::copyPath()$/;"	f	class:dingjing::PathBar	typeref:typename:void
createEditor	folder-model-view/folder-item-delegate.cpp	/^QWidget* FolderItemDelegate::createEditor(QWidget* parent, const QStyleOptionViewItem& option, c/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:QWidget *
crtime	file-info.h	/^        quint64 crtime() const$/;"	f	class:dingjing::FileInfo	typeref:typename:quint64
crtime_	file-info.h	/^        quint64 crtime_;$/;"	m	class:dingjing::FileInfo	typeref:typename:quint64
ctime	file-info.h	/^        quint64 ctime() const$/;"	f	class:dingjing::FileInfo	typeref:typename:quint64
ctime_	file-info.h	/^        quint64 ctime_;$/;"	m	class:dingjing::FileInfo	typeref:typename:quint64
cuint16	clib-global.h	/^typedef unsigned short                  cuint16;            \/\/ 16 bit unsigned$/;"	t	typeref:typename:unsigned short
cuint32	clib-global.h	/^typedef unsigned int                    cuint32;            \/\/ 32 bit unsogned$/;"	t	typeref:typename:unsigned int
cuint64	clib-global.h	/^typedef unsigned long long              cuint64;            \/\/ 64 bit unsigned$/;"	t	typeref:typename:unsigned long long
cuint8	clib-global.h	/^typedef unsigned char                   cuint8;             \/\/ 8 bit unsigned$/;"	t	typeref:typename:unsigned char
currentPath	file-info-job.h	/^        const FilePath& currentPath() const$/;"	f	class:dingjing::FileInfoJob	typeref:typename:const FilePath &
currentPath_	file-info-job.h	/^        FilePath currentPath_;$/;"	m	class:dingjing::FileInfoJob	typeref:typename:FilePath
cursorOnSelectionCorner	folder-model-view/folder-view-p.h	/^    inline bool cursorOnSelectionCorner() const$/;"	f	class:dingjing::FolderViewListView	typeref:typename:bool
data	c/array/clib-array-list.c	/^    array_value_t           data;$/;"	m	struct:_array_list_node_t	typeref:typename:array_value_t	file:
data	folder-model-view/folder-model.cpp	/^QVariant FolderModel::data(const QModelIndex& index, int role\/* = Qt::DisplayRole*\/) const$/;"	f	class:dingjing::FolderModel	typeref:typename:QVariant
data	folder-model-view/proxy-folder-model.cpp	/^QVariant ProxyFolderModel::data(const QModelIndex& index, int role) const$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:QVariant
dataChanged	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::dataChanged(const QModelIndex& topLeft, const QModelIndex& bottomRight,/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
data_buf	c/rpc/clib-rpcpack.h	/^    uint8_t data_buf[CLIB_RPCPACK_MAX_NSDATA_BYTES];$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint8_t[]
defaultGFileInfoQueryAttribs	file-info.cpp	/^    const char defaultGFileInfoQueryAttribs[] = "standard::*,"$/;"	v	namespace:dingjing	typeref:typename:const char[]
defaultLocation	volume-manager.h	/^    FilePath defaultLocation() const {$/;"	f	class:dingjing::Mount	typeref:typename:FilePath
defer_content_test	fm-config.h	/^    gboolean defer_content_test;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
defer_content_test	folder.h	/^        bool defer_content_test : 1;$/;"	m	class:dingjing::Folder	typeref:typename:bool:1
delta	folder-model-view/folder-view.h	/^        int delta;$/;"	m	struct:dingjing::FolderView::scrollData	typeref:typename:int
depth_count	c/rpc/clib-rpcpack.h	/^        uint64_t depth_count :4;$/;"	m	struct:__anon5350a68c010a::__anon5350a68c0208	typeref:typename:uint64_t:4
desc	mime-type.h	/^        const char* desc() const$/;"	f	class:dingjing::MimeType	typeref:typename:const char *
desc_	mime-type.h	/^        mutable CStrPtr desc_;$/;"	m	class:dingjing::MimeType	typeref:typename:CStrPtr
description	file-info.h	/^        QString description() const$/;"	f	class:dingjing::FileInfo	typeref:typename:QString
desktopEntry	mime-type.h	/^        static std::shared_ptr<const MimeType> desktopEntry()$/;"	f	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
desktopEntry_	mime-type.cpp	/^    std::shared_ptr<const MimeType> MimeType::desktopEntry_; \/\/ application\/x-desktop$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
desktopEntry_	mime-type.h	/^        static std::shared_ptr<const MimeType> desktopEntry_; \/\/ application\/x-desktop$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
detailError	file-read-write.cpp	/^void FileReadAndWrite::detailError (GError** error)$/;"	f	class:FileReadAndWrite	typeref:typename:void
device	volume-manager.h	/^    CStrPtr device() const$/;"	f	class:dingjing::Volume	typeref:typename:CStrPtr
dingjing	dir-list-job.cpp	/^namespace dingjing$/;"	n	file:
dingjing	dir-list-job.h	/^namespace dingjing$/;"	n
dingjing	dnd-action-menu.cpp	/^namespace dingjing$/;"	n	file:
dingjing	dnd-action-menu.h	/^namespace dingjing$/;"	n
dingjing	file-info-job.cpp	/^namespace dingjing$/;"	n	file:
dingjing	file-info-job.h	/^namespace dingjing$/;"	n
dingjing	file-info-p.h	/^namespace dingjing$/;"	n
dingjing	file-info.cpp	/^namespace dingjing$/;"	n	file:
dingjing	file-info.h	/^namespace dingjing$/;"	n
dingjing	file-path.cpp	/^namespace dingjing$/;"	n	file:
dingjing	file-path.h	/^namespace dingjing$/;"	n
dingjing	file-read-write.h	/^namespace dingjing$/;"	n
dingjing	filesystem-info-job.cpp	/^namespace dingjing$/;"	n	file:
dingjing	filesystem-info-job.h	/^namespace dingjing$/;"	n
dingjing	folder-model-view/cached-folder-model.cpp	/^namespace dingjing$/;"	n	file:
dingjing	folder-model-view/cached-folder-model.h	/^namespace dingjing$/;"	n
dingjing	folder-model-view/folder-item-delegate.cpp	/^namespace dingjing$/;"	n	file:
dingjing	folder-model-view/folder-item-delegate.h	/^namespace dingjing$/;"	n
dingjing	folder-model-view/folder-model-item.cpp	/^namespace dingjing$/;"	n	file:
dingjing	folder-model-view/folder-model-item.h	/^namespace dingjing$/;"	n
dingjing	folder-model-view/folder-model.cpp	/^namespace dingjing$/;"	n	file:
dingjing	folder-model-view/folder-model.h	/^namespace dingjing$/;"	n
dingjing	folder-model-view/folder-view-p.h	/^namespace dingjing {$/;"	n
dingjing	folder-model-view/folder-view.cpp	/^namespace dingjing$/;"	n	file:
dingjing	folder-model-view/folder-view.h	/^namespace dingjing$/;"	n
dingjing	folder-model-view/proxy-folder-model.cpp	/^namespace dingjing$/;"	n	file:
dingjing	folder-model-view/proxy-folder-model.h	/^namespace dingjing$/;"	n
dingjing	folder.cpp	/^namespace dingjing$/;"	n	file:
dingjing	folder.h	/^namespace dingjing$/;"	n
dingjing	icon-info-p.h	/^namespace dingjing {$/;"	n
dingjing	icon-info.cpp	/^namespace dingjing$/;"	n	file:
dingjing	icon-info.h	/^namespace dingjing$/;"	n
dingjing	job.cpp	/^namespace dingjing$/;"	n	file:
dingjing	job.h	/^namespace dingjing$/;"	n
dingjing	job_p.h	/^namespace dingjing$/;"	n
dingjing	mime-type.cpp	/^namespace dingjing$/;"	n	file:
dingjing	mime-type.h	/^namespace dingjing$/;"	n
dingjing	pathbar-model-view/path-editor-p.h	/^namespace dingjing$/;"	n
dingjing	pathbar-model-view/path-editor.cpp	/^namespace dingjing$/;"	n	file:
dingjing	pathbar-model-view/path-editor.h	/^namespace dingjing$/;"	n
dingjing	pathbar-model-view/pathbar-p.h	/^namespace dingjing$/;"	n
dingjing	pathbar-model-view/pathbar.cpp	/^namespace dingjing$/;"	n	file:
dingjing	pathbar-model-view/pathbar.h	/^namespace dingjing$/;"	n
dingjing	smart-ptr.hpp	/^namespace dingjing$/;"	n
dingjing	thumbnail-job.cpp	/^namespace dingjing$/;"	n	file:
dingjing	thumbnail-job.h	/^namespace dingjing$/;"	n
dingjing	thumbnailer.cpp	/^namespace dingjing$/;"	n	file:
dingjing	thumbnailer.h	/^namespace dingjing$/;"	n
dingjing	utils.h	/^namespace dingjing$/;"	n
dingjing	volume-manager.cpp	/^namespace dingjing$/;"	n	file:
dingjing	volume-manager.h	/^namespace dingjing$/;"	n
dirInfo	dir-list-job.h	/^        std::shared_ptr<const FileInfo> dirInfo() const {$/;"	f	class:dingjing::DirListJob	typeref:typename:std::shared_ptr<const FileInfo>
dirInfo_	folder.h	/^        std::shared_ptr<const FileInfo> dirInfo_;$/;"	m	class:dingjing::Folder	typeref:typename:std::shared_ptr<const FileInfo>
dirMonitor_	folder.h	/^        GFileMonitorPtr dirMonitor_;$/;"	m	class:dingjing::Folder	typeref:typename:GFileMonitorPtr
dirPath	dir-list-job.h	/^        FilePath dirPath() const {$/;"	f	class:dingjing::DirListJob	typeref:typename:FilePath
dirPath	file-info.h	/^        const FilePath& dirPath() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const FilePath &
dirPath_	file-info.h	/^        FilePath dirPath_;$/;"	m	class:dingjing::FileInfo	typeref:typename:FilePath
dirPath_	folder.h	/^        FilePath dirPath_;$/;"	m	class:dingjing::Folder	typeref:typename:FilePath
dir_fi	dir-list-job.h	/^        std::shared_ptr<const FileInfo> dir_fi;$/;"	m	class:dingjing::DirListJob	typeref:typename:std::shared_ptr<const FileInfo>
dir_path	dir-list-job.h	/^        FilePath dir_path;$/;"	m	class:dingjing::DirListJob	typeref:typename:FilePath
direction	c/list/clib-double-list.h	/^    int                 direction;                          \/\/  迭代器的方向$/;"	m	struct:_double_list_iter_t	typeref:typename:int
dirlist_job	folder.h	/^        DirListJob* dirlist_job;$/;"	m	class:dingjing::Folder	typeref:typename:DirListJob *
dispName_	file-info.h	/^        QString dispName_;$/;"	m	class:dingjing::FileInfo	typeref:typename:QString
displayCrtime	folder-model-view/folder-model-item.cpp	/^const QString &FolderModelItem::displayCrtime() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:const QString &
displayDtime	folder-model-view/folder-model-item.cpp	/^const QString &FolderModelItem::displayDtime() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:const QString &
displayMtime	folder-model-view/folder-model-item.cpp	/^const QString &FolderModelItem::displayMtime() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:const QString &
displayName	file-info.h	/^        const QString& displayName() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const QString &
displayName	file-path.cpp	/^CStrPtr FilePath::displayName() const$/;"	f	class:dingjing::FilePath	typeref:typename:CStrPtr
displayName	folder-model-view/folder-model-item.cpp	/^const QString& FolderModelItem::displayName() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:const QString &
displaySize	folder-model-view/folder-model-item.cpp	/^const QString& FolderModelItem::displaySize() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:const QString &
domain	smart-ptr.hpp	/^    std::uint32_t domain() const$/;"	f	class:dingjing::GErrorPtr	typeref:typename:std::uint32_t
double_list_iter_t	c/list/clib-double-list.h	/^typedef struct _double_list_iter_t double_list_iter_t;$/;"	t	typeref:struct:_double_list_iter_t
double_list_node_t	c/list/clib-double-list.h	/^typedef struct _double_list_node_t double_list_node_t;$/;"	t	typeref:struct:_double_list_node_t
double_list_t	c/list/clib-double-list.h	/^typedef struct _double_list_t double_list_t;$/;"	t	typeref:struct:_double_list_t
dragEnterEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::dragEnterEvent(QDragEnterEvent* event)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
dragEnterEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::dragEnterEvent(QDragEnterEvent* event)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
dragLeaveEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::dragLeaveEvent(QDragLeaveEvent* e)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
dragLeaveEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::dragLeaveEvent(QDragLeaveEvent* e)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
dragMoveEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::dragMoveEvent(QDragMoveEvent* e)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
dragMoveEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::dragMoveEvent(QDragMoveEvent* e)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
drawText	folder-model-view/folder-item-delegate.cpp	/^void FolderItemDelegate::drawText(QPainter* painter, QStyleOptionViewItem& opt, QRectF& textRect/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
dropEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::dropEvent(QDropEvent* e)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
dropEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::dropEvent(QDropEvent* e)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
dropMimeData	folder-model-view/folder-model.cpp	/^bool FolderModel::dropMimeData(const QMimeData* data, Qt::DropAction action, int row, int column/;"	f	class:dingjing::FolderModel	typeref:typename:bool
drop_default_action	fm-config.h	/^    gint drop_default_action;$/;"	m	struct:_FmConfig	typeref:typename:gint
dtime	file-info.h	/^        quint64 dtime() const$/;"	f	class:dingjing::FileInfo	typeref:typename:quint64
dtime_	file-info.h	/^        quint64 dtime_;$/;"	m	class:dingjing::FileInfo	typeref:typename:quint64
dup	c/list/clib-double-list.h	/^    void* (*dup)(void* ptr);                                \/\/  节点值复制函数$/;"	m	struct:_double_list_t	typeref:typename:void * (*)(void * ptr)
emblems	file-info.h	/^        const std::forward_list<std::shared_ptr<const IconInfo>>& emblems() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const std::forward_list<std::shared_ptr<const IconInfo>> &
emblems	icon-info.cpp	/^    std::forward_list<std::shared_ptr<const IconInfo>> IconInfo::emblems() const {$/;"	f	class:dingjing::IconInfo	typeref:typename:std::forward_list<std::shared_ptr<const IconInfo>>
emblems_	file-info.h	/^        std::forward_list<std::shared_ptr<const IconInfo>> emblems_;$/;"	m	class:dingjing::FileInfo	typeref:typename:std::forward_list<std::shared_ptr<const IconInfo>>
emitClickedAt	folder-model-view/folder-view.cpp	/^void FolderView::emitClickedAt(ClickType type, const QPoint& pos)$/;"	f	class:dingjing::FolderView	typeref:typename:void
emitError	job.cpp	/^    Job::ErrorAction Job::emitError(const GErrorPtr &err, Job::ErrorSeverity severity)$/;"	f	class:dingjing::Job	typeref:typename:Job::ErrorAction
emit_files_found	dir-list-job.h	/^        bool emit_files_found;$/;"	m	class:dingjing::DirListJob	typeref:typename:bool
end	c/array/clib-array-list.c	/^    array_list_node_t*      end;        \/\/ 数据末尾节点$/;"	m	struct:_array_list_t	typeref:typename:array_list_node_t *	file:
ensureToggledVisible	pathbar-model-view/pathbar.cpp	/^void PathBar::ensureToggledVisible()$/;"	f	class:dingjing::PathBar	typeref:typename:void
enumerator	c/file/clib-file-enumerator.c	/^    GFileEnumerator*    enumerator;$/;"	m	struct:_file_enumerator_t	typeref:typename:GFileEnumerator *	file:
err_	smart-ptr.hpp	/^    GError* err_;$/;"	m	class:dingjing::GErrorPtr	typeref:typename:GError *
error	c/file/clib-file-enumerator.c	/^    GError*             error;$/;"	m	struct:_file_enumerator_t	typeref:typename:GError *	file:
event	folder-model-view/folder-view.cpp	/^bool FolderView::event(QEvent* event)$/;"	f	class:dingjing::FolderView	typeref:typename:bool
event	pathbar-model-view/path-editor.cpp	/^bool PathEditor::event(QEvent* e)$/;"	f	class:dingjing::PathEditor	typeref:typename:bool
eventFileAdded	folder.cpp	/^    bool Folder::eventFileAdded(const FilePath &path)$/;"	f	class:dingjing::Folder	typeref:typename:bool
eventFileChanged	folder.cpp	/^    bool Folder::eventFileChanged(const FilePath &path)$/;"	f	class:dingjing::Folder	typeref:typename:bool
eventFileDeleted	folder.cpp	/^    void Folder::eventFileDeleted(const FilePath& path)$/;"	f	class:dingjing::Folder	typeref:typename:void
eventFilter	folder-model-view/folder-item-delegate.cpp	/^bool FolderItemDelegate::eventFilter(QObject* object, QEvent* event)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:bool
eventFilter	folder-model-view/folder-view.cpp	/^bool FolderView::eventFilter(QObject* watched, QEvent* event)$/;"	f	class:dingjing::FolderView	typeref:typename:bool
exec	dir-list-job.cpp	/^    void DirListJob::exec()$/;"	f	class:dingjing::DirListJob	typeref:typename:void
exec	file-info-job.cpp	/^    void FileInfoJob::exec()$/;"	f	class:dingjing::FileInfoJob	typeref:typename:void
exec	filesystem-info-job.cpp	/^    void FilesystemInfoJob::exec()$/;"	f	class:dingjing::FilesystemInfoJob	typeref:typename:void
exec	thumbnail-job.cpp	/^void ThumbnailJob::exec()$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:void
exec	volume-manager.cpp	/^    void VolumeManager::GetGVolumeMonitorJob::exec()$/;"	f	class:dingjing::VolumeManager::GetGVolumeMonitorJob	typeref:typename:void
exec_	thumbnailer.h	/^        CStrPtr exec_;$/;"	m	class:dingjing::Thumbnailer	typeref:typename:CStrPtr
external_thumbnail_max	fm-config.h	/^    gint external_thumbnail_max;$/;"	m	struct:_FmConfig	typeref:typename:gint
fallbackIconNames	icon-info.cpp	/^    static const char* fallbackIconNames[] = {$/;"	v	namespace:dingjing	typeref:typename:const char * []	file:
fallbackQicons_	icon-info.cpp	/^    QList<QIcon> IconInfo::fallbackQicons_;$/;"	m	class:dingjing::IconInfo	typeref:typename:QList<QIcon>
fallbackQicons_	icon-info.h	/^    static QList<QIcon> fallbackQicons_;$/;"	m	class:dingjing::IconInfo	typeref:typename:QList<QIcon>
file	c/file/clib-file-enumerator.c	/^    GFile*              file;$/;"	m	struct:_file_enumerator_t	typeref:typename:GFile *	file:
fileByName	folder.cpp	/^    std::shared_ptr<const FileInfo> Folder::fileByName(const char* name) const$/;"	f	class:dingjing::Folder	typeref:typename:std::shared_ptr<const FileInfo>
fileExists	utils.cpp	/^bool dingjing::Utils::fileExists(const QString& file)$/;"	f	class:dingjing::Utils	typeref:typename:bool
fileInfoFromIndex	folder-model-view/folder-model.cpp	/^std::shared_ptr<const FileInfo> FolderModel::fileInfoFromIndex(const QModelIndex& index) const$/;"	f	class:dingjing::FolderModel	typeref:typename:std::shared_ptr<const FileInfo>
fileInfoFromIndex	folder-model-view/proxy-folder-model.cpp	/^std::shared_ptr<const FileInfo> ProxyFolderModel::fileInfoFromIndex(const QModelIndex& index) co/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:std::shared_ptr<const FileInfo>
fileInfoFromPath	folder-model-view/folder-model.cpp	/^std::shared_ptr<const FileInfo> FolderModel::fileInfoFromPath(const FilePath& path) const {$/;"	f	class:dingjing::FolderModel	typeref:typename:std::shared_ptr<const FileInfo>
fileInfoFromPath	folder-model-view/proxy-folder-model.cpp	/^std::shared_ptr<const FileInfo> ProxyFolderModel::fileInfoFromPath(const FilePath &path) const$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:std::shared_ptr<const FileInfo>
fileInfoRole	folder-model-view/folder-item-delegate.h	/^    int fileInfoRole()$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:int
fileLauncher	folder-model-view/folder-view.h	/^    FileLauncher* fileLauncher()$/;"	f	class:dingjing::FolderView	typeref:typename:FileLauncher *
filePath_	file-info.h	/^        FilePath filePath_;$/;"	m	class:dingjing::FileInfo	typeref:typename:FilePath
file_enumerator_free	c/file/clib-file-enumerator.c	/^void file_enumerator_free (file_enumerator_t* enumerator)$/;"	f	typeref:typename:void
file_enumerator_get_children	c/file/clib-file-enumerator.c	/^void* file_enumerator_get_children (file_enumerator_t* enumerator)$/;"	f	typeref:typename:void *
file_enumerator_new	c/file/clib-file-enumerator.c	/^file_enumerator_t* file_enumerator_new (char* uri)$/;"	f	typeref:typename:file_enumerator_t *
file_enumerator_t	c/file/clib-file-enumerator.h	/^typedef struct _file_enumerator_t file_enumerator_t;$/;"	t	typeref:struct:_file_enumerator_t
fileinfoJobs_	folder.h	/^        std::vector<FileInfoJob*> fileinfoJobs_;$/;"	m	class:dingjing::Folder	typeref:typename:std::vector<FileInfoJob * >
files	dir-list-job.h	/^        FileInfoList& files() {$/;"	f	class:dingjing::DirListJob	typeref:typename:FileInfoList &
files	file-info-job.h	/^        const FileInfoList& files() const$/;"	f	class:dingjing::FileInfoJob	typeref:typename:const FileInfoList &
files	folder.cpp	/^    FileInfoList Folder::files() const$/;"	f	class:dingjing::Folder	typeref:typename:FileInfoList
files_	dir-list-job.h	/^        FileInfoList files_;$/;"	m	class:dingjing::DirListJob	typeref:typename:FileInfoList
files_	folder.h	/^        std::unordered_map<const std::string, std::shared_ptr<const FileInfo>, std::hash<std::st/;"	m	class:dingjing::Folder	typeref:typename:std::unordered_map<const std::string,std::shared_ptr<const FileInfo>,std::hash<std::string>>
filesystemId	file-info.h	/^        const char* filesystemId() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const char *
filesystemId_	file-info.h	/^        const char* filesystemId_;$/;"	m	class:dingjing::FileInfo	typeref:typename:const char *
filesystem_info_pending	folder.h	/^        bool filesystem_info_pending;$/;"	m	class:dingjing::Folder	typeref:typename:bool
filterAcceptsRow	folder-model-view/proxy-folder-model.cpp	/^bool ProxyFolderModel::filterAcceptsRow(int source_row, const QModelIndex& source_parent) const$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:bool
findByPath	folder.cpp	/^    std::shared_ptr<Folder> Folder::findByPath(const FilePath& path)$/;"	f	class:dingjing::Folder	typeref:typename:std::shared_ptr<Folder>
findItemByFileInfo	folder-model-view/folder-model.cpp	/^QList< FolderModelItem >::iterator FolderModel::findItemByFileInfo(const FileInfo* info, int* ro/;"	f	class:dingjing::FolderModel	typeref:typename:QList<FolderModelItem>::iterator
findItemByName	folder-model-view/folder-model.cpp	/^QList<FolderModelItem>::iterator FolderModel::findItemByName(const char* name, int* row)$/;"	f	class:dingjing::FolderModel	typeref:typename:QList<FolderModelItem>::iterator
findThumbnail	folder-model-view/folder-model-item.cpp	/^FolderModelItem::Thumbnail* FolderModelItem::findThumbnail(int size)$/;"	f	class:dingjing::FolderModelItem	typeref:typename:FolderModelItem::Thumbnail *
find_thumbnailers_in_data_dir	thumbnailer.cpp	/^    static void find_thumbnailers_in_data_dir(std::unordered_map<std::string, const char*>& hash/;"	f	namespace:dingjing	typeref:typename:void	file:
firstThumbnailer	mime-type.h	/^        std::shared_ptr<const Thumbnailer> firstThumbnailer() const$/;"	f	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const Thumbnailer>
flags	dir-list-job.h	/^        Flags flags;$/;"	m	class:dingjing::DirListJob	typeref:typename:Flags
flags	folder-model-view/folder-model.cpp	/^Qt::ItemFlags FolderModel::flags(const QModelIndex& index) const$/;"	f	class:dingjing::FolderModel	typeref:typename:Qt::ItemFlags
fm_config_init	fm-config.cpp	/^void fm_config_init() {$/;"	f	typeref:typename:void
focusInEvent	pathbar-model-view/path-editor.cpp	/^void PathEditor::focusInEvent(QFocusEvent* e)$/;"	f	class:dingjing::PathEditor	typeref:typename:void
focusOutEvent	pathbar-model-view/path-editor.cpp	/^void PathEditor::focusOutEvent(QFocusEvent* e)$/;"	f	class:dingjing::PathEditor	typeref:typename:void
folder	folder-model-view/folder-model.h	/^    const std::shared_ptr<Folder>& folder() const$/;"	f	class:dingjing::FolderModel	typeref:typename:const std::shared_ptr<Folder> &
folder	folder-model-view/folder-view.h	/^    std::shared_ptr<Folder> folder() const$/;"	f	class:dingjing::FolderView	typeref:typename:std::shared_ptr<Folder>
folderFirst	folder-model-view/proxy-folder-model.cpp	/^bool ProxyFolderModel::folderFirst()$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:bool
folderInfo	folder-model-view/folder-view.h	/^    std::shared_ptr<const FileInfo> folderInfo() const$/;"	f	class:dingjing::FolderView	typeref:typename:std::shared_ptr<const FileInfo>
forEachFile	folder.h	/^        void forEachFile(std::function<void (const std::shared_ptr<const FileInfo>&)> func) cons/;"	f	class:dingjing::Folder	typeref:typename:void
forEachThumbnailer	mime-type.h	/^        void forEachThumbnailer(std::function<bool(const std::shared_ptr<const Thumbnailer>&)> f/;"	f	class:dingjing::MimeType	typeref:typename:void
force_startup_notify	fm-config.h	/^    gboolean force_startup_notify;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
format_cmd	fm-config.h	/^    gchar *format_cmd;$/;"	m	struct:_FmConfig	typeref:typename:gchar *
free	c/list/clib-double-list.h	/^    void (*free) (void* ptr);                               \/\/  节点值释放函数$/;"	m	struct:_double_list_t	typeref:typename:void (*)(void * ptr)
free	c/string/clib-bstring.h	/^    unsigned int     free;$/;"	m	struct:_bstring_t	typeref:typename:unsigned int
freeCompleter	pathbar-model-view/path-editor.cpp	/^void PathEditor::freeCompleter()$/;"	f	class:dingjing::PathEditor	typeref:typename:void
freeSize	filesystem-info-job.h	/^        uint64_t freeSize() const {$/;"	f	class:dingjing::FilesystemInfoJob	typeref:typename:uint64_t
freeSize_	filesystem-info-job.h	/^        uint64_t freeSize_;$/;"	m	class:dingjing::FilesystemInfoJob	typeref:typename:uint64_t
fromDisplayName	file-path.cpp	/^FilePath FilePath::fromDisplayName(const char *path)$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath
fromGIcon	icon-info.cpp	/^    std::shared_ptr<const IconInfo> IconInfo::fromGIcon(GIconPtr gicon) {$/;"	f	class:dingjing::IconInfo	typeref:typename:std::shared_ptr<const IconInfo>
fromGIcon	icon-info.h	/^    static std::shared_ptr<const IconInfo> fromGIcon(GIcon* gicon) {$/;"	f	class:dingjing::IconInfo	typeref:typename:std::shared_ptr<const IconInfo>
fromLocalPath	file-path.cpp	/^FilePath FilePath::fromLocalPath(const char *path)$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath
fromName	icon-info.cpp	/^    std::shared_ptr<const IconInfo> IconInfo::fromName(const char* name) {$/;"	f	class:dingjing::IconInfo	typeref:typename:std::shared_ptr<const IconInfo>
fromName	mime-type.cpp	/^    std::shared_ptr<const MimeType> MimeType::fromName(const char* typeName)$/;"	f	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
fromPath	folder.cpp	/^    std::shared_ptr<Folder> Folder::fromPath(const FilePath& path)$/;"	f	class:dingjing::Folder	typeref:typename:std::shared_ptr<Folder>
fromPathStr	file-path.cpp	/^FilePath FilePath::fromPathStr(const char *pathStr)$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath
fromUri	file-path.cpp	/^FilePath FilePath::fromUri(const char *uri)$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath
fsInfoJob_	folder.h	/^        FilesystemInfoJob* fsInfoJob_;$/;"	m	class:dingjing::Folder	typeref:typename:FilesystemInfoJob *
fs_free_size	folder.h	/^        uint64_t fs_free_size;$/;"	m	class:dingjing::Folder	typeref:typename:uint64_t
fs_size_cancellable	folder.h	/^        GCancellablePtr fs_size_cancellable;$/;"	m	class:dingjing::Folder	typeref:typename:GCancellablePtr
fs_total_size	folder.h	/^        uint64_t fs_total_size;$/;"	m	class:dingjing::Folder	typeref:typename:uint64_t
gCacheKey	folder-model-view/cached-folder-model.h	/^    constexpr static const char*    gCacheKey = "CachedFolderModel";$/;"	m	class:dingjing::CachedFolderModel	typeref:typename:const char *
gConfig	fm-config.cpp	/^static FmConfig gConfig;$/;"	v	typeref:typename:FmConfig	file:
gFileInfo	file-info.h	/^        GObjectPtr<GFileInfo> gFileInfo() const$/;"	f	class:dingjing::FileInfo	typeref:typename:GObjectPtr<GFileInfo>
gFmConfig	fm-config.cpp	/^FmConfig* gFmConfig = &gConfig;$/;"	v	typeref:typename:FmConfig *
generateThumbnail	thumbnail-job.cpp	/^QImage ThumbnailJob::generateThumbnail(const std::shared_ptr<const FileInfo>& file, const FilePa/;"	f	class:dingjing::ThumbnailJob	typeref:typename:QImage
genericEvent	x-dnd-workaround.cpp	/^bool XdndWorkaround::genericEvent(xcb_ge_generic_event_t* event)$/;"	f	class:XdndWorkaround	typeref:typename:bool
get	smart-ptr.hpp	/^    GError* get() const$/;"	f	class:dingjing::GErrorPtr	typeref:typename:GError *
get	smart-ptr.hpp	/^    T* get() const$/;"	f	class:dingjing::GObjectPtr	typeref:typename:T *
getCustomColumnWidths	folder-model-view/folder-view.h	/^    QList<int> getCustomColumnWidths() const {$/;"	f	class:dingjing::FolderView	typeref:typename:QList<int>
getFileType	utils.cpp	/^GFileType dingjing::Utils::getFileType(const QString &uri)$/;"	f	class:dingjing::Utils	typeref:typename:GFileType
getFilesystemInfo	folder.cpp	/^    bool Folder::getFilesystemInfo(uint64_t* total_size, uint64_t* free_size) const$/;"	f	class:dingjing::Folder	typeref:typename:bool
getFirst	icon-info.cpp	/^    static QIcon getFirst(const QList<QIcon> & icons)$/;"	f	namespace:dingjing	typeref:typename:QIcon	file:
getHiddenColumns	folder-model-view/folder-view.h	/^    QList<int> getHiddenColumns() const {$/;"	f	class:dingjing::FolderView	typeref:typename:QList<int>
getMargins	folder-model-view/folder-item-delegate.h	/^    QSize getMargins() const$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:QSize
getMargins	folder-model-view/folder-view.h	/^    QSize getMargins() const$/;"	f	class:dingjing::FolderView	typeref:typename:QSize
getViewOptions	folder-model-view/folder-view-p.h	/^    inline QStyleOptionViewItem getViewOptions()$/;"	f	class:dingjing::FolderViewListView	typeref:typename:QStyleOptionViewItem
get_dir	c/log/clib-log.c	/^static const char* get_dir(const char* path) {$/;"	f	typeref:typename:const char *	file:
get_file_size	c/log/clib-log.c	/^static unsigned long long get_file_size(const char *path) {$/;"	f	typeref:typename:unsigned long long	file:
gfile	file-path.cpp	/^const GObjectPtr<GFile> &FilePath::gfile() const$/;"	f	class:dingjing::FilePath	typeref:typename:const GObjectPtr<GFile> &
gicon	icon-info.h	/^    GIconPtr gicon() const {$/;"	f	class:dingjing::IconInfo	typeref:typename:GIconPtr
gicon_	icon-info.h	/^    GIconPtr gicon_;$/;"	m	class:dingjing::IconInfo	typeref:typename:GIconPtr
gid	file-info.h	/^        gid_t gid() const$/;"	f	class:dingjing::FileInfo	typeref:typename:gid_t
gid_	file-info.h	/^        gid_t gid_;$/;"	m	class:dingjing::FileInfo	typeref:typename:gid_t
globalInstance	volume-manager.cpp	/^    std::shared_ptr<VolumeManager> VolumeManager::globalInstance()$/;"	f	class:dingjing::VolumeManager	typeref:typename:std::shared_ptr<VolumeManager>
globalInstance_	volume-manager.cpp	/^    std::weak_ptr<VolumeManager> VolumeManager::globalInstance_;$/;"	m	class:dingjing::VolumeManager	typeref:typename:std::weak_ptr<VolumeManager>
globalInstance_	volume-manager.h	/^    static std::weak_ptr<VolumeManager> globalInstance_;$/;"	m	class:dingjing::VolumeManager	typeref:typename:std::weak_ptr<VolumeManager>
gobj_	smart-ptr.hpp	/^    mutable T* gobj_;$/;"	m	class:dingjing::GObjectPtr	typeref:typename:T *
guessFromFileName	mime-type.cpp	/^    std::shared_ptr<const MimeType> MimeType::guessFromFileName(const char* fileName)$/;"	f	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
hasEditor	folder-model-view/folder-item-delegate.h	/^    bool hasEditor() const$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:bool
hasEmblems	icon-info.h	/^    bool hasEmblems() const {$/;"	f	class:dingjing::IconInfo	typeref:typename:bool
hasFileMonitor	folder.cpp	/^    bool Folder::hasFileMonitor() const$/;"	f	class:dingjing::Folder	typeref:typename:bool
hasParent	file-path.cpp	/^bool FilePath::hasParent() const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
hasSelection	folder-model-view/folder-view.cpp	/^bool FolderView::hasSelection() const$/;"	f	class:dingjing::FolderView	typeref:typename:bool
hasUriScheme	file-path.cpp	/^bool FilePath::hasUriScheme(const char *scheme) const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
has_fs_info	folder.h	/^        bool has_fs_info : 1;$/;"	m	class:dingjing::Folder	typeref:typename:bool:1
has_idle_reload_handler	folder.h	/^        bool has_idle_reload_handler;$/;"	m	class:dingjing::Folder	typeref:typename:bool
has_idle_update_handler	folder.h	/^        bool has_idle_update_handler;$/;"	m	class:dingjing::Folder	typeref:typename:bool
hash	file-path.cpp	/^unsigned int FilePath::hash() const$/;"	f	class:dingjing::FilePath	typeref:typename:unsigned int
head	c/array/clib-array-list.c	/^    array_list_node_t*      head;       \/\/ 数据根节点$/;"	m	struct:_array_list_t	typeref:typename:array_list_node_t *	file:
head	c/list/clib-double-list.h	/^    double_list_node_t* head;                               \/\/  表头结点$/;"	m	struct:_double_list_t	typeref:typename:double_list_node_t *
head_len	c/rpc/clib-rpcpack.h	/^            uint32_t head_len;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0608	typeref:typename:uint32_t
headerContextMenu	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::headerContextMenu(const QPoint &p) {$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
headerData	folder-model-view/folder-model.cpp	/^QVariant FolderModel::headerData(int section, Qt::Orientation orientation, int role\/* = Qt::Dis/;"	f	class:dingjing::FolderModel	typeref:typename:QVariant
height	c/tree/clib-avl-tree.c	/^    int                     height;$/;"	m	struct:_avl_tree_node_t	typeref:typename:int	file:
hiddenLast	folder-model-view/proxy-folder-model.cpp	/^bool ProxyFolderModel::hiddenLast()$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:bool
homeDir	file-path.cpp	/^const FilePath &FilePath::homeDir()$/;"	f	class:dingjing::FilePath	typeref:typename:const FilePath &
icon	file-info.h	/^        const std::shared_ptr<const IconInfo>& icon() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const std::shared_ptr<const IconInfo> &
icon	folder-model-view/folder-model-item.cpp	/^QIcon FolderModelItem::icon() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:QIcon
icon	mime-type.h	/^        const std::shared_ptr<const IconInfo>& icon() const$/;"	f	class:dingjing::MimeType	typeref:typename:const std::shared_ptr<const IconInfo> &
icon	volume-manager.h	/^    std::shared_ptr<const IconInfo> icon() const {$/;"	f	class:dingjing::Mount	typeref:typename:std::shared_ptr<const IconInfo>
icon	volume-manager.h	/^    std::shared_ptr<const IconInfo> icon() const$/;"	f	class:dingjing::Volume	typeref:typename:std::shared_ptr<const IconInfo>
iconInfoRole	folder-model-view/folder-item-delegate.h	/^    int iconInfoRole()$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:int
iconModeFromState	folder-model-view/folder-item-delegate.cpp	/^QIcon::Mode FolderItemDelegate::iconModeFromState(const QStyle::State state)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:QIcon::Mode
iconSize	folder-model-view/folder-item-delegate.h	/^    inline QSize iconSize() const$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:QSize
iconSize	folder-model-view/folder-view.cpp	/^QSize FolderView::iconSize(ViewMode mode) const$/;"	f	class:dingjing::FolderView	typeref:typename:QSize
iconViewTextSize	folder-model-view/folder-item-delegate.cpp	/^QSize FolderItemDelegate::iconViewTextSize(const QModelIndex& index) const$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:QSize
icon_	file-info.h	/^        std::shared_ptr<const IconInfo> icon_;$/;"	m	class:dingjing::FileInfo	typeref:typename:std::shared_ptr<const IconInfo>
icon_	mime-type.h	/^        std::shared_ptr<const IconInfo> icon_;$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const IconInfo>
id_	thumbnailer.h	/^        CStrPtr id_;$/;"	m	class:dingjing::Thumbnailer	typeref:typename:CStrPtr
image	folder-model-view/folder-model-item.h	/^            QImage          image;$/;"	m	struct:dingjing::FolderModelItem::Thumbnail	typeref:typename:QImage
incremental	dir-list-job.h	/^        bool incremental() const {$/;"	f	class:dingjing::DirListJob	typeref:typename:bool
index	folder-model-view/folder-model.cpp	/^QModelIndex FolderModel::index(int row, int column, const QModelIndex& \/*parent*\/) const$/;"	f	class:dingjing::FolderModel	typeref:typename:QModelIndex
indexAt	folder-model-view/folder-view.cpp	/^QModelIndex FolderViewListView::indexAt(const QPoint& point) const$/;"	f	class:dingjing::FolderViewListView	typeref:typename:QModelIndex
indexFromFolderPath	folder-model-view/folder-view.cpp	/^QModelIndex FolderView::indexFromFolderPath(const FilePath& folderPath) const$/;"	f	class:dingjing::FolderView	typeref:typename:QModelIndex
indexFromPath	folder-model-view/proxy-folder-model.cpp	/^QModelIndex ProxyFolderModel::indexFromPath(const FilePath &path) const$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:QModelIndex
inf_	file-info.h	/^        GObjectPtr<GFileInfo> inf_;$/;"	m	class:dingjing::FileInfo	typeref:typename:GObjectPtr<GFileInfo>
info	folder.cpp	/^    const std::shared_ptr<const FileInfo>& Folder::info() const$/;"	f	class:dingjing::Folder	typeref:typename:const std::shared_ptr<const FileInfo> &
info_	icon-info-p.h	/^        std::weak_ptr<const dingjing::IconInfo> info_;$/;"	m	class:dingjing::IconEngine	typeref:typename:std::weak_ptr<const dingjing::IconInfo>
info_sec	c/config/re.conf	/^info_sec=60$/;"	k
inodeDirectory	mime-type.h	/^        static std::shared_ptr<const MimeType> inodeDirectory()$/;"	f	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeDirectory_	mime-type.cpp	/^    std::shared_ptr<const MimeType> MimeType::inodeDirectory_;  \/\/ inode\/directory$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeDirectory_	mime-type.h	/^        static std::shared_ptr<const MimeType> inodeDirectory_;  \/\/ inode\/directory$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeMountPoint	mime-type.h	/^        static std::shared_ptr<const MimeType> inodeMountPoint()$/;"	f	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeMountPoint_	mime-type.cpp	/^    std::shared_ptr<const MimeType> MimeType::inodeMountPoint_;  \/\/ inode\/mount-point$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeMountPoint_	mime-type.h	/^        static std::shared_ptr<const MimeType> inodeMountPoint_;  \/\/ inode\/mount-point$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeShortcut	mime-type.h	/^        static std::shared_ptr<const MimeType> inodeShortcut()$/;"	f	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeShortcut_	mime-type.cpp	/^    std::shared_ptr<const MimeType> MimeType::inodeShortcut_;  \/\/ inode\/x-shortcut$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
inodeShortcut_	mime-type.h	/^        static std::shared_ptr<const MimeType> inodeShortcut_;  \/\/ inode\/x-shortcut$/;"	m	class:dingjing::MimeType	typeref:typename:std::shared_ptr<const MimeType>
insertFiles	folder-model-view/folder-model.cpp	/^void FolderModel::insertFiles(int row, const FileInfoList& files)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
internAtom	x-dnd-workaround.cpp	/^xcb_atom_t XdndWorkaround::internAtom(const char* name, int len)$/;"	f	class:XdndWorkaround	typeref:typename:xcb_atom_t
internalQicon	icon-info.cpp	/^    QIcon IconInfo::internalQicon() const {$/;"	f	class:dingjing::IconInfo	typeref:typename:QIcon
internalQicons_	icon-info.h	/^    mutable QList<QIcon> internalQicons_;$/;"	m	class:dingjing::IconInfo	typeref:typename:QList<QIcon>
invertSelection	folder-model-view/folder-view.cpp	/^void FolderView::invertSelection()$/;"	f	class:dingjing::FolderView	typeref:typename:void
isAccessible	file-info.h	/^        bool isAccessible() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isAccessible_	file-info.h	/^        bool isAccessible_ : 1; \/* TRUE if can be read by user *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isAvailable	filesystem-info-job.h	/^        bool isAvailable() const {$/;"	f	class:dingjing::FilesystemInfoJob	typeref:typename:bool
isAvailable_	filesystem-info-job.h	/^        bool isAvailable_;$/;"	m	class:dingjing::FilesystemInfoJob	typeref:typename:bool
isBackup	file-info.h	/^        bool isBackup() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isBackup_	file-info.h	/^        bool isBackup_ : 1; \/* TRUE if file is backup *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isCancelled	job.cpp	/^    bool Job::isCancelled() const$/;"	f	class:dingjing::Job	typeref:typename:bool
isDeletable	file-info.h	/^        bool isDeletable() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isDeletable_	file-info.h	/^        bool isDeletable_ : 1; \/* TRUE if can be deleted by user *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isDesktopEntry	file-info.h	/^        bool isDesktopEntry() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isDesktopEntry	mime-type.h	/^        bool isDesktopEntry() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
isDir	file-info.h	/^        bool isDir() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isDir	mime-type.h	/^        bool isDir() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
isEmpty	folder.cpp	/^    bool Folder::isEmpty() const$/;"	f	class:dingjing::Folder	typeref:typename:bool
isExecutableType	file-info.cpp	/^    bool FileInfo::isExecutableType() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isHidden	file-info.h	/^        bool isHidden() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isHiddenChangeable_	file-info.h	/^        bool isHiddenChangeable_ : 1; \/* TRUE if hidden can be changed *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isHidden_	file-info.h	/^        bool isHidden_ : 1; \/* TRUE if file is hidden *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isIconChangeable_	file-info.h	/^        bool isIconChangeable_ : 1; \/* TRUE if icon can be changed *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isImage	file-info.h	/^        bool isImage() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isImage	mime-type.h	/^        bool isImage() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
isIncremental	folder.cpp	/^    bool Folder::isIncremental() const$/;"	f	class:dingjing::Folder	typeref:typename:bool
isLoaded	folder.cpp	/^    bool Folder::isLoaded() const$/;"	f	class:dingjing::Folder	typeref:typename:bool
isMountable	file-info.h	/^        bool isMountable() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isMountable	mime-type.h	/^        bool isMountable() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
isMountable_	file-info.h	/^        bool isMountable_ : 1; \/* TRUE if file is mountable type *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isNameChangeable_	file-info.h	/^        bool isNameChangeable_ : 1; \/* TRUE if name can be changed *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isNative	file-info.h	/^        bool isNative() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isNative	file-path.cpp	/^bool FilePath::isNative() const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
isParentOf	file-path.cpp	/^bool FilePath::isParentOf(const FilePath &other) const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
isPrefixOf	file-path.cpp	/^bool FilePath::isPrefixOf(const FilePath &other) const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
isReadOnly_	file-info.h	/^        bool isReadOnly_ : 1; \/* TRUE if host FS is R\/O *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isSameFilesystem	file-info.cpp	/^    bool FileInfoList::isSameFilesystem() const$/;"	f	class:dingjing::FileInfoList	typeref:typename:bool
isSameType	file-info.cpp	/^    bool FileInfoList::isSameType() const$/;"	f	class:dingjing::FileInfoList	typeref:typename:bool
isShortcut	file-info.h	/^        bool isShortcut() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isShortcut	mime-type.h	/^        bool isShortcut() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
isShortcut_	file-info.h	/^        bool isShortcut_ : 1; \/* TRUE if file is shortcut type *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
isSupportedImageType	thumbnail-job.cpp	/^bool ThumbnailJob::isSupportedImageType(const std::shared_ptr<const MimeType>& mimeType) const$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:bool
isSymlink	file-info.h	/^        bool isSymlink() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isText	file-info.h	/^        bool isText() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isText	mime-type.h	/^        bool isText() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
isThumbnailOutdated	thumbnail-job.cpp	/^bool ThumbnailJob::isThumbnailOutdated(const std::shared_ptr<const FileInfo>& file, const QImage/;"	f	class:dingjing::ThumbnailJob	typeref:typename:bool
isTrustable	file-info.cpp	/^    bool FileInfo::isTrustable() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isUnknownType	file-info.h	/^        bool isUnknownType() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isUnknownType	mime-type.h	/^        bool isUnknownType() const$/;"	f	class:dingjing::MimeType	typeref:typename:bool
isValid	file-path.cpp	/^bool FilePath::isValid() const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
isValid	folder.cpp	/^    bool Folder::isValid() const$/;"	f	class:dingjing::Folder	typeref:typename:bool
isValid	icon-info.h	/^    bool isValid() const {$/;"	f	class:dingjing::IconInfo	typeref:typename:bool
isWritable	file-info.h	/^        bool isWritable() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isWritableDirectory	file-info.h	/^        bool isWritableDirectory() const$/;"	f	class:dingjing::FileInfo	typeref:typename:bool
isWritable_	file-info.h	/^        bool isWritable_ : 1; \/* TRUE if can be written to by user *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:bool:1
itemFromIndex	folder-model-view/folder-model.cpp	/^FolderModelItem* FolderModel::itemFromIndex(const QModelIndex& index) const$/;"	f	class:dingjing::FolderModel	typeref:typename:FolderModelItem *
itemSize	folder-model-view/folder-item-delegate.h	/^    inline QSize itemSize() const$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:QSize
item_asize	c/rpc/clib-rpcpack.h	/^    uint32_t item_asize;$/;"	m	struct:__anon5350a68c0908	typeref:typename:uint32_t
item_count	c/rpc/clib-rpcpack.h	/^    uint32_t item_count;$/;"	m	struct:__anon5350a68c0408	typeref:typename:uint32_t
job_	job_p.h	/^    Job* job_;$/;"	m	class:dingjing::JobThread	typeref:typename:Job *
k_bpos	c/config/clib-conf.c	/^    uint32_t k_bpos;$/;"	m	struct:__anon4d33341a0108	typeref:typename:uint32_t	file:
key	c/tree/clib-avl-tree.c	/^    avl_key_t               key;$/;"	m	struct:_avl_tree_node_t	typeref:typename:avl_key_t	file:
key	icon-info-p.h	/^    QString IconEngine::key() const {$/;"	f	class:dingjing::IconEngine	typeref:typename:QString
keyboardSearch	folder-model-view/folder-view-p.h	/^    void keyboardSearch(const QString &search) override$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
kv_array	c/config/clib-conf.c	/^    conf_kv_t *kv_array;$/;"	m	struct:__anon4d33341a0208	typeref:typename:conf_kv_t *	file:
kv_asize	c/config/clib-conf.c	/^    uint32_t kv_asize;$/;"	m	struct:__anon4d33341a0208	typeref:typename:uint32_t	file:
kv_count	c/config/clib-conf.c	/^    uint32_t kv_count;$/;"	m	struct:__anon4d33341a0208	typeref:typename:uint32_t	file:
label	volume-manager.h	/^    CStrPtr label() const$/;"	f	class:dingjing::Volume	typeref:typename:CStrPtr
layoutColumns	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::layoutColumns()$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
leftFrames	folder-model-view/folder-view.h	/^        int leftFrames;$/;"	m	struct:dingjing::FolderView::scrollData	typeref:typename:int
len	c/list/clib-double-list.h	/^    unsigned long len;                                      \/\/  链表所含的节点数量$/;"	m	struct:_double_list_t	typeref:typename:unsigned long
len	c/rpc/clib-rpcpack.h	/^    uint32_t len;$/;"	m	struct:__anon5350a68c0808	typeref:typename:uint32_t
len	c/string/clib-bstring.h	/^    unsigned int     len;$/;"	m	struct:_bstring_t	typeref:typename:unsigned int
length	c/array/clib-array-list.c	/^    unsigned long           length;     \/\/ 已用空间$/;"	m	struct:_array_list_t	typeref:typename:unsigned long	file:
lessThan	folder-model-view/proxy-folder-model.cpp	/^bool ProxyFolderModel::lessThan(const QModelIndex& left, const QModelIndex& right) const$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:bool
line_type	c/rpc/clib-rpcpack.h	/^    uint32_t line_type;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint32_t
list_add_node_head	c/list/clib-double-list.c	/^double_list_t* list_add_node_head(double_list_t* list, void* value) {$/;"	f	typeref:typename:double_list_t *
list_add_node_tail	c/list/clib-double-list.c	/^double_list_t* list_add_node_tail(double_list_t* list, void *value) {$/;"	f	typeref:typename:double_list_t *
list_create	c/list/clib-double-list.c	/^double_list_t* list_create() {$/;"	f	typeref:typename:double_list_t *
list_del_node	c/list/clib-double-list.c	/^void list_del_node(double_list_t*list, double_list_node_t* delNode) {$/;"	f	typeref:typename:void
list_dup_list	c/list/clib-double-list.c	/^double_list_t* list_dup_list(double_list_t* orig) {$/;"	f	typeref:typename:double_list_t *
list_free	c/list/clib-double-list.c	/^void list_free(double_list_t* list) {$/;"	f	typeref:typename:void
list_free_iterator	c/list/clib-double-list.c	/^void list_free_iterator(double_list_iter_t* iter) {$/;"	f	typeref:typename:void
list_get_iterator	c/list/clib-double-list.c	/^double_list_iter_t* list_get_iterator(double_list_t* list, int direction) {$/;"	f	typeref:typename:double_list_iter_t *
list_index	c/list/clib-double-list.c	/^double_list_node_t* list_index(double_list_t* list, long index) {$/;"	f	typeref:typename:double_list_node_t *
list_next_data	c/list/clib-double-list.c	/^double_list_node_t* list_next_data(double_list_iter_t* iter) {$/;"	f	typeref:typename:double_list_node_t *
list_rewind_head	c/list/clib-double-list.c	/^void list_rewind_head(double_list_t* list, double_list_iter_t* iter) {$/;"	f	typeref:typename:void
list_rewind_tail	c/list/clib-double-list.c	/^void list_rewind_tail(double_list_t* list, double_list_iter_t* iter) {$/;"	f	typeref:typename:void
list_rotate	c/list/clib-double-list.c	/^void list_rotate(double_list_t* list) {$/;"	f	typeref:typename:void
list_search_value	c/list/clib-double-list.c	/^double_list_node_t* list_search_value(double_list_t* list, void *value) {$/;"	f	typeref:typename:double_list_node_t *
list_view_size_units	fm-config.h	/^    gchar *list_view_size_units;$/;"	m	struct:_FmConfig	typeref:typename:gchar *
loadAll	thumbnailer.cpp	/^    void Thumbnailer::loadAll()$/;"	f	class:dingjing::Thumbnailer	typeref:typename:void
loadForFile	thumbnail-job.cpp	/^QImage ThumbnailJob::loadForFile(const std::shared_ptr<const FileInfo> &file)$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:QImage
loadPendingThumbnails	folder-model-view/folder-model.cpp	/^void FolderModel::loadPendingThumbnails()$/;"	f	class:dingjing::FolderModel	typeref:typename:void
localFilesOnly	thumbnail-job.cpp	/^bool ThumbnailJob::localFilesOnly()$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:bool
localPath	file-path.cpp	/^CStrPtr FilePath::localPath() const$/;"	f	class:dingjing::FilePath	typeref:typename:CStrPtr
lock	c/thread_pool/clib-thread-pool.c	/^    pthread_mutex_t             lock;$/;"	m	struct:_thread_pool_t	typeref:typename:pthread_mutex_t	file:
logLevel	c/syslog/clib-syslog.c	/^static int logLevel = LOG_DEBUG;$/;"	v	typeref:typename:int	file:
logLevel	c/syslog/clib-syslog.c	/^static int logLevel = LOG_INFO;$/;"	v	typeref:typename:int	file:
log_destroy	c/log/clib-log.c	/^void log_destroy(void) {$/;"	f	typeref:typename:void
log_file	c/config/re.conf	/^log_file=\/data\/log\/se\/re.log$/;"	k
log_init	c/log/clib-log.c	/^int log_init(log_type_t type, log_level_t level, log_rotate_t rotate, unsigned long long log_siz/;"	f	typeref:typename:int
log_init_once	c/log/clib-log.c	/^static void log_init_once(void) {$/;"	f	typeref:typename:void	file:
log_knum	c/config/re.conf	/^log_knum=10$/;"	k
log_level	c/config/re.conf	/^log_level=6$/;"	k
log_level_t	c/log/clib-log.h	/^} log_level_t;$/;"	t	typeref:enum:__anon8bee06e70203
log_msize	c/config/re.conf	/^log_msize=0$/;"	k
log_print	c/log/clib-log.c	/^int log_print(log_level_t level, const char *tag, const char *file,$/;"	f	typeref:typename:int
log_rotate_t	c/log/clib-log.h	/^} log_rotate_t;$/;"	t	typeref:enum:__anon8bee06e70303
log_type_t	c/log/clib-log.h	/^} log_type_t;$/;"	t	typeref:enum:__anon8bee06e70103
logd	c/log/clib-log.h	/^#define logd(/;"	d
loge	c/log/clib-log.h	/^#define loge(/;"	d
logi	c/log/clib-log.h	/^#define logi(/;"	d
logv	c/log/clib-log.h	/^#define logv(/;"	d
logw	c/log/clib-log.h	/^#define logw(/;"	d
mActivationAllowed	folder-model-view/folder-view-p.h	/^    bool                                mActivationAllowed;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:bool
mActivationAllowed	folder-model-view/folder-view-p.h	/^    bool                mActivationAllowed;$/;"	m	class:dingjing::FolderViewListView	typeref:typename:bool
mAddIcon	folder-model-view/folder-item-delegate.h	/^    QIcon           mAddIcon;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QIcon
mAutoSelectionDelay	folder-model-view/folder-view.h	/^    int                     mAutoSelectionDelay;$/;"	m	class:dingjing::FolderView	typeref:typename:int
mAutoSelectionTimer	folder-model-view/folder-view.h	/^    QTimer*                 mAutoSelectionTimer;$/;"	m	class:dingjing::FolderView	typeref:typename:QTimer *
mBackupAsHidden	folder-model-view/proxy-folder-model.h	/^    bool                                mBackupAsHidden;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:bool
mButtonsLayout	pathbar-model-view/pathbar.h	/^    QHBoxLayout*        mButtonsLayout;$/;"	m	class:dingjing::PathBar	typeref:typename:QHBoxLayout *
mButtonsWidget	pathbar-model-view/pathbar.h	/^    QWidget*            mButtonsWidget;$/;"	m	class:dingjing::PathBar	typeref:typename:QWidget *
mCancel	file-read-write.h	/^        GCancellable*           mCancel = nullptr;          \/\/ temp param$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:GCancellable *
mCancelAction	dnd-action-menu.h	/^    QAction*        mCancelAction;$/;"	m	class:dingjing::DndActionMenu	typeref:typename:QAction *
mCancellable	pathbar-model-view/path-editor-p.h	/^    GCancellable*           mCancellable;$/;"	m	class:dingjing::PathEditorJob	typeref:typename:GCancellable *
mCancellable	pathbar-model-view/path-editor.h	/^    GCancellable*               mCancellable;$/;"	m	class:dingjing::PathEditor	typeref:typename:GCancellable *
mCancellable	thumbnail-job.h	/^    GCancellablePtr             mCancellable;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:GCancellablePtr
mCollator	folder-model-view/proxy-folder-model.h	/^    QCollator                           mCollator;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:QCollator
mCompleter	pathbar-model-view/path-editor.h	/^    QCompleter*                 mCompleter;$/;"	m	class:dingjing::PathEditor	typeref:typename:QCompleter *
mCopyAction	dnd-action-menu.h	/^    QAction*        mCopyAction;$/;"	m	class:dingjing::DndActionMenu	typeref:typename:QAction *
mCopyFlags	file-read-write.h	/^        GFileCopyFlags          mCopyFlags;$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:GFileCopyFlags
mCtrlDragSelectionFlag	folder-model-view/folder-view-p.h	/^    QItemSelectionModel::SelectionFlag  mCtrlDragSelectionFlag;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:QItemSelectionModel::SelectionFlag
mCtrlRightClick	folder-model-view/folder-view.h	/^    bool                    mCtrlRightClick; \/\/ show folder context menu with Ctrl + right cli/;"	m	class:dingjing::FolderView	typeref:typename:bool
mCurrentPath	pathbar-model-view/pathbar.h	/^    FilePath            mCurrentPath;   \/\/ currently active path$/;"	m	class:dingjing::PathBar	typeref:typename:FilePath
mCurrentPrefix	pathbar-model-view/path-editor.h	/^    QString                     mCurrentPrefix;$/;"	m	class:dingjing::PathEditor	typeref:typename:QString
mCursorOnSelectionCorner	folder-model-view/folder-view-p.h	/^    mutable bool        mCursorOnSelectionCorner;$/;"	m	class:dingjing::FolderViewListView	typeref:typename:bool
mCustomColumnWidths	folder-model-view/folder-view-p.h	/^    QList<int>                          mCustomColumnWidths;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:QList<int>
mCustomColumnWidths	folder-model-view/folder-view.h	/^    QList<int>              mCustomColumnWidths;$/;"	m	class:dingjing::FolderView	typeref:typename:QList<int>
mCutFilesHashSet	folder-model-view/folder-model.h	/^    HashSet                             mCutFilesHashSet;$/;"	m	class:dingjing::FolderModel	typeref:typename:HashSet
mDestFile	file-read-write.h	/^        GFile*                  mDestFile = nullptr;$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:GFile *
mDirName	pathbar-model-view/path-editor-p.h	/^    GFile*                  mDirName;$/;"	m	class:dingjing::PathEditorJob	typeref:typename:GFile *
mDispCrtime	folder-model-view/folder-model-item.h	/^        mutable QString                     mDispCrtime;$/;"	m	class:dingjing::FolderModelItem	typeref:typename:QString
mDispDtime	folder-model-view/folder-model-item.h	/^        mutable QString                     mDispDtime;$/;"	m	class:dingjing::FolderModelItem	typeref:typename:QString
mDispMtime	folder-model-view/folder-model-item.h	/^        mutable QString                     mDispMtime;$/;"	m	class:dingjing::FolderModelItem	typeref:typename:QString
mDispSize	folder-model-view/folder-model-item.h	/^        mutable QString                     mDispSize;$/;"	m	class:dingjing::FolderModelItem	typeref:typename:QString
mDoingLayout	folder-model-view/folder-view-p.h	/^    bool                                mDoingLayout;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:bool
mEdit	pathbar-model-view/path-editor-p.h	/^    PathEditor*             mEdit;$/;"	m	class:dingjing::PathEditorJob	typeref:typename:PathEditor *
mError	file-read-write.h	/^        GError**                mError = nullptr;           \/\/ temp param$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:GError **
mFileInfoRole	folder-model-view/folder-item-delegate.h	/^    int             mFileInfoRole;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:int
mFileLauncher	folder-model-view/folder-view.h	/^    FileLauncher*           mFileLauncher;$/;"	m	class:dingjing::FolderView	typeref:typename:FileLauncher *
mFiles	thumbnail-job.h	/^    FileInfoList                mFiles;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:FileInfoList
mFilters	folder-model-view/proxy-folder-model.h	/^    QList<ProxyFolderModelFilter*>      mFilters;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:QList<ProxyFolderModelFilter * >
mFolder	folder-model-view/folder-model.h	/^    std::shared_ptr<Folder>             mFolder;$/;"	m	class:dingjing::FolderModel	typeref:typename:std::shared_ptr<Folder>
mFolderFirst	folder-model-view/proxy-folder-model.h	/^    bool                                mFolderFirst;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:bool
mGfile	file-path.h	/^    GObjectPtr<GFile>           mGfile;$/;"	m	class:dingjing::FilePath	typeref:typename:GObjectPtr<GFile>
mGlobalItemPressPoint	folder-model-view/folder-view-p.h	/^    QPoint                              mGlobalItemPressPoint; \/\/ to prevent dragging when onl/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:QPoint
mGlobalItemPressPoint	folder-model-view/folder-view-p.h	/^    QPoint              mGlobalItemPressPoint; \/\/ to prevent dragging when only the view is sc/;"	m	class:dingjing::FolderViewListView	typeref:typename:QPoint
mHasCutfile	folder-model-view/folder-model.h	/^    bool                                mHasCutfile = false;$/;"	m	class:dingjing::FolderModel	typeref:typename:bool
mHasEditor	folder-model-view/folder-item-delegate.h	/^    mutable bool    mHasEditor;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:bool
mHasPendingThumbnailHandler	folder-model-view/folder-model.h	/^    bool                                mHasPendingThumbnailHandler = false;$/;"	m	class:dingjing::FolderModel	typeref:typename:bool
mHiddenColumns	folder-model-view/folder-view-p.h	/^    QSet<int>                           mHiddenColumns;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:QSet<int>
mHiddenColumns	folder-model-view/folder-view.h	/^    QSet<int>               mHiddenColumns;$/;"	m	class:dingjing::FolderView	typeref:typename:QSet<int>
mHiddenLast	folder-model-view/proxy-folder-model.h	/^    bool                                mHiddenLast;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:bool
mHomeDir	file-path.cpp	/^FilePath FilePath::mHomeDir;$/;"	m	class:dingjing::FilePath	typeref:typename:FilePath
mHomeDir	file-path.h	/^    static FilePath             mHomeDir;$/;"	m	class:dingjing::FilePath	typeref:typename:FilePath
mIconInfoRole	folder-model-view/folder-item-delegate.h	/^    int             mIconInfoRole;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:int
mIconSize	folder-model-view/folder-item-delegate.h	/^    QSize           mIconSize;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QSize
mIconSize	folder-model-view/folder-view.h	/^    QSize                   mIconSize[NumViewModes];$/;"	m	class:dingjing::FolderView	typeref:typename:QSize[]
mInfo	folder-model-view/folder-model-item.h	/^        std::shared_ptr<const FileInfo>     mInfo;$/;"	m	class:dingjing::FolderModelItem	typeref:typename:std::shared_ptr<const FileInfo>
mIsCut	folder-model-view/folder-model-item.h	/^        bool                                mIsCut;$/;"	m	class:dingjing::FolderModelItem	typeref:typename:bool
mIsLoaded	folder-model-view/folder-model.h	/^    bool                                mIsLoaded = false;$/;"	m	class:dingjing::FolderModel	typeref:typename:bool
mItemDelegateMargins	folder-model-view/folder-view.h	/^    QSize                   mItemDelegateMargins;$/;"	m	class:dingjing::FolderView	typeref:typename:QSize
mItemSize	folder-model-view/folder-item-delegate.h	/^    QSize           mItemSize;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QSize
mItems	folder-model-view/folder-model.h	/^    QList<FolderModelItem>              mItems;$/;"	m	class:dingjing::FolderModel	typeref:typename:QList<FolderModelItem>
mLastAutoSelectionIndex	folder-model-view/folder-view.h	/^    QModelIndex             mLastAutoSelectionIndex;$/;"	m	class:dingjing::FolderView	typeref:typename:QModelIndex
mLastDrag	x-dnd-workaround.h	/^    QPointer<QDrag>     mLastDrag;$/;"	m	class:XdndWorkaround	typeref:typename:QPointer<QDrag>
mLastTypedText	pathbar-model-view/path-editor.h	/^    QString                     mLastTypedText;$/;"	m	class:dingjing::PathEditor	typeref:typename:QString
mLayoutTimer	folder-model-view/folder-view-p.h	/^    QTimer*                             mLayoutTimer;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:QTimer *
mLinkAction	dnd-action-menu.h	/^    QAction*        mLinkAction;$/;"	m	class:dingjing::DndActionMenu	typeref:typename:QAction *
mLocalFilesOnly	thumbnail-job.cpp	/^bool ThumbnailJob::mLocalFilesOnly = true;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:bool
mLocalFilesOnly	thumbnail-job.h	/^    static bool                 mLocalFilesOnly;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:bool
mMargins	folder-model-view/folder-item-delegate.h	/^    QSize           mMargins;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QSize
mMaxExternalThumbnailFileSize	thumbnail-job.cpp	/^int ThumbnailJob::mMaxExternalThumbnailFileSize = -1;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:int
mMaxExternalThumbnailFileSize	thumbnail-job.h	/^    static int                  mMaxExternalThumbnailFileSize;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:int
mMaxThumbnailFileSize	thumbnail-job.cpp	/^int ThumbnailJob::mMaxThumbnailFileSize = 4096;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:int
mMaxThumbnailFileSize	thumbnail-job.h	/^    static int                  mMaxThumbnailFileSize;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:int
mMd5Calc	thumbnail-job.h	/^    GChecksum*                  mMd5Calc;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:GChecksum *
mMode	folder-model-view/folder-view.h	/^    ViewMode                mMode;$/;"	m	class:dingjing::FolderView	typeref:typename:ViewMode
mModel	folder-model-view/folder-view.h	/^    ProxyFolderModel*       mModel;$/;"	m	class:dingjing::FolderView	typeref:typename:ProxyFolderModel *
mModel	pathbar-model-view/path-editor.h	/^    QStringListModel*           mModel;$/;"	m	class:dingjing::PathEditor	typeref:typename:QStringListModel *
mMouseLeftPressed	folder-model-view/folder-view-p.h	/^    bool                mMouseLeftPressed;$/;"	m	class:dingjing::FolderViewListView	typeref:typename:bool
mMousePressPoint	folder-model-view/folder-view-p.h	/^    QPoint                              mMousePressPoint;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:QPoint
mMoveAction	dnd-action-menu.h	/^    QAction*        mMoveAction;$/;"	m	class:dingjing::DndActionMenu	typeref:typename:QAction *
mName	pathbar-model-view/pathbar-p.h	/^    std::string         mName;$/;"	m	class:dingjing::PathButton	typeref:typename:std::string
mOffset	file-read-write.h	/^        goffset                 mOffset = 0;                \/\/ 记录当前进度$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:goffset
mPause	file-read-write.h	/^        QMutex                  mPause;$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:QMutex
mPendingThumbnailJobs	folder-model-view/folder-model.h	/^    std::vector<ThumbnailJob*>          mPendingThumbnailJobs;$/;"	m	class:dingjing::FolderModel	typeref:typename:std::vector<ThumbnailJob * >
mPendingThumbnails	folder-model-view/folder-model.h	/^        FileInfoList    mPendingThumbnails;$/;"	m	struct:dingjing::FolderModel::ThumbnailData	typeref:typename:FileInfoList
mProgress	file-read-write.h	/^        GFileProgressCallback   mProgress;$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:GFileProgressCallback
mProgressData	file-read-write.h	/^        gpointer                mProgressData;$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:gpointer
mQueuedScrollSteps	folder-model-view/folder-view.h	/^    QList<scrollData>       mQueuedScrollSteps;$/;"	m	class:dingjing::FolderView	typeref:typename:QList<scrollData>
mRefCount	folder-model-view/cached-folder-model.h	/^    int                             mRefCount;$/;"	m	class:dingjing::CachedFolderModel	typeref:typename:int
mRefCount	folder-model-view/folder-model.h	/^        int             mRefCount;$/;"	m	struct:dingjing::FolderModel::ThumbnailData	typeref:typename:int
mRemoveIcon	folder-model-view/folder-item-delegate.h	/^    QIcon           mRemoveIcon;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QIcon
mResults	thumbnail-job.h	/^    std::vector<QImage>         mResults;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:std::vector<QImage>
mRubberBandRect	folder-model-view/folder-view-p.h	/^    QRect                               mRubberBandRect;$/;"	m	class:dingjing::FolderViewTreeView	typeref:typename:QRect
mScrollArea	pathbar-model-view/pathbar.h	/^    QScrollArea*        mScrollArea;$/;"	m	class:dingjing::PathBar	typeref:typename:QScrollArea *
mScrollToEnd	pathbar-model-view/pathbar.h	/^    QToolButton*        mScrollToEnd;$/;"	m	class:dingjing::PathBar	typeref:typename:QToolButton *
mScrollToStart	pathbar-model-view/pathbar.h	/^    QToolButton*        mScrollToStart;$/;"	m	class:dingjing::PathBar	typeref:typename:QToolButton *
mSelChangedTimer	folder-model-view/folder-view.h	/^    QTimer*                 mSelChangedTimer;$/;"	m	class:dingjing::FolderView	typeref:typename:QTimer *
mShadowColor	folder-model-view/folder-item-delegate.h	/^    QColor          mShadowColor;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QColor
mShadowHidden	folder-model-view/folder-item-delegate.h	/^    bool            mShadowHidden;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:bool
mShadowHidden	folder-model-view/folder-view.h	/^    bool                    mShadowHidden;$/;"	m	class:dingjing::FolderView	typeref:typename:bool
mShowFullNames	folder-model-view/folder-model.h	/^    bool                                mShowFullNames = false;$/;"	m	class:dingjing::FolderModel	typeref:typename:bool
mShowHidden	folder-model-view/proxy-folder-model.h	/^    bool                                mShowHidden;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:bool
mShowThumbnails	folder-model-view/proxy-folder-model.h	/^    bool                                mShowThumbnails;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:bool
mSize	folder-model-view/folder-model.h	/^        int             mSize;$/;"	m	struct:dingjing::FolderModel::ThumbnailData	typeref:typename:int
mSize	thumbnail-job.h	/^    int                         mSize;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:int
mSmoothScrollTimer	folder-model-view/folder-view.h	/^    QTimer*                 mSmoothScrollTimer;$/;"	m	class:dingjing::FolderView	typeref:typename:QTimer *
mSrcFile	file-read-write.h	/^        GFile*                  mSrcFile = nullptr;$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:GFile *
mStatus	file-read-write.h	/^        enum Status             mStatus = INVALID;          \/\/ 记录运行状态$/;"	m	class:dingjing::FileReadAndWrite	typeref:enum:Status
mSubDirs	pathbar-model-view/path-editor-p.h	/^    QStringList             mSubDirs;$/;"	m	class:dingjing::PathEditorJob	typeref:typename:QStringList
mSymlinkIcon	folder-model-view/folder-item-delegate.h	/^    QIcon           mSymlinkIcon;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QIcon
mTempPathEdit	pathbar-model-view/pathbar.h	/^    PathEditor*         mTempPathEdit;$/;"	m	class:dingjing::PathBar	typeref:typename:PathEditor *
mThreadPool	thumbnail-job.cpp	/^QThreadPool* ThumbnailJob::mThreadPool = nullptr;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:QThreadPool *
mThreadPool	thumbnail-job.h	/^    static QThreadPool*         mThreadPool;$/;"	m	class:dingjing::ThumbnailJob	typeref:typename:QThreadPool *
mThumbnailData	folder-model-view/folder-model.h	/^    std::forward_list<ThumbnailData>    mThumbnailData;$/;"	m	class:dingjing::FolderModel	typeref:typename:std::forward_list<ThumbnailData>
mThumbnailSize	folder-model-view/proxy-folder-model.h	/^    int                                 mThumbnailSize;$/;"	m	class:dingjing::ProxyFolderModel	typeref:typename:int
mThumbnails	folder-model-view/folder-model-item.h	/^        QVector<Thumbnail>                  mThumbnails;$/;"	m	class:dingjing::FolderModelItem	typeref:typename:QVector<Thumbnail>
mToggledBtn	pathbar-model-view/pathbar.h	/^    PathButton*         mToggledBtn;$/;"	m	class:dingjing::PathBar	typeref:typename:PathButton *
mTotalSize	file-read-write.h	/^        goffset                 mTotalSize = 0;             \/\/ 记录当前进度$/;"	m	class:dingjing::FileReadAndWrite	typeref:typename:goffset
mTriggeredByFocusInEvent	pathbar-model-view/path-editor-p.h	/^    bool                    mTriggeredByFocusInEvent;$/;"	m	class:dingjing::PathEditorJob	typeref:typename:bool
mUntrustedIcon	folder-model-view/folder-item-delegate.h	/^    QIcon           mUntrustedIcon;$/;"	m	class:dingjing::FolderItemDelegate	typeref:typename:QIcon
mView	folder-model-view/folder-view.h	/^    QAbstractItemView*      mView;$/;"	m	class:dingjing::FolderView	typeref:typename:QAbstractItemView *
mXinput2Enabled	x-dnd-workaround.h	/^    bool                mXinput2Enabled;$/;"	m	class:XdndWorkaround	typeref:typename:bool
mXinputErrorBase	x-dnd-workaround.h	/^    int                 mXinputErrorBase;$/;"	m	class:XdndWorkaround	typeref:typename:int
mXinputEventBase	x-dnd-workaround.h	/^    int                 mXinputEventBase;$/;"	m	class:XdndWorkaround	typeref:typename:int
mXinputOpCode	x-dnd-workaround.h	/^    int                 mXinputOpCode;$/;"	m	class:XdndWorkaround	typeref:typename:int
makeDirectory	folder.cpp	/^    bool Folder::makeDirectory(const char* \/*name*\/, GError** \/*error*\/)$/;"	f	class:dingjing::Folder	typeref:typename:bool
makeTooltip	folder-model-view/folder-model.cpp	/^QString FolderModel::makeTooltip(FolderModelItem* item) const$/;"	f	class:dingjing::FolderModel	typeref:typename:QString
match	c/list/clib-double-list.h	/^    int (*match) (void* ptr, void* key);                    \/\/  节点值对比函数$/;"	m	struct:_double_list_t	typeref:typename:int (*)(void * ptr,void * key)
maxExternalThumbnailFileSize	thumbnail-job.cpp	/^int ThumbnailJob::maxExternalThumbnailFileSize()$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:int
maxThumbnailFileSize	thumbnail-job.cpp	/^int ThumbnailJob::maxThumbnailFileSize()$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:int
message	smart-ptr.hpp	/^    QString message() const$/;"	f	class:dingjing::GErrorPtr	typeref:typename:QString
midorder_print_tree	c/tree/clib-avl-tree.c	/^void midorder_print_tree(avl_tree_node_t *node, avl_tree_print_key print) {$/;"	f	typeref:typename:void
mimeData	folder-model-view/folder-model.cpp	/^QMimeData* FolderModel::mimeData(const QModelIndexList& indexes) const$/;"	f	class:dingjing::FolderModel	typeref:typename:QMimeData *
mimeType	file-info.h	/^        const std::shared_ptr<const MimeType>& mimeType() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const std::shared_ptr<const MimeType> &
mimeType_	file-info.h	/^        std::shared_ptr<const MimeType> mimeType_;$/;"	m	class:dingjing::FileInfo	typeref:typename:std::shared_ptr<const MimeType>
mimeTypes	folder-model-view/folder-model.cpp	/^QStringList FolderModel::mimeTypes() const$/;"	f	class:dingjing::FolderModel	typeref:typename:QStringList
mkdir_r	c/log/clib-log.c	/^static int mkdir_r(const char* path, mode_t mode) {$/;"	f	typeref:typename:int	file:
mode	file-info.h	/^        mode_t mode() const$/;"	f	class:dingjing::FileInfo	typeref:typename:mode_t
mode_	file-info.h	/^        mode_t mode_;$/;"	m	class:dingjing::FileInfo	typeref:typename:mode_t
model	folder-model-view/folder-view.cpp	/^ProxyFolderModel* FolderView::model() const$/;"	f	class:dingjing::FolderView	typeref:typename:ProxyFolderModel *
modelFromFolder	folder-model-view/cached-folder-model.cpp	/^CachedFolderModel* CachedFolderModel::modelFromFolder(const std::shared_ptr<Folder>& folder)$/;"	f	class:dingjing::CachedFolderModel	typeref:typename:CachedFolderModel *
modelFromPath	folder-model-view/cached-folder-model.cpp	/^CachedFolderModel* CachedFolderModel::modelFromPath(const FilePath& path)$/;"	f	class:dingjing::CachedFolderModel	typeref:typename:CachedFolderModel *
modules_blacklist	fm-config.h	/^    gchar **modules_blacklist;$/;"	m	struct:_FmConfig	typeref:typename:gchar **
modules_whitelist	fm-config.h	/^    gchar **modules_whitelist;$/;"	m	struct:_FmConfig	typeref:typename:gchar **
monitor_	volume-manager.h	/^        GVolumeMonitorPtr monitor_;$/;"	m	class:dingjing::VolumeManager::GetGVolumeMonitorJob	typeref:typename:GVolumeMonitorPtr
monitor_	volume-manager.h	/^    GVolumeMonitorPtr monitor_;$/;"	m	class:dingjing::VolumeManager	typeref:typename:GVolumeMonitorPtr
mount	volume-manager.h	/^    GMountPtr mount() const$/;"	f	class:dingjing::Volume	typeref:typename:GMountPtr
mounts	volume-manager.h	/^    const std::vector<Mount>& mounts() const$/;"	f	class:dingjing::VolumeManager	typeref:typename:const std::vector<Mount> &
mounts_	volume-manager.h	/^    std::vector<Mount> mounts_;$/;"	m	class:dingjing::VolumeManager	typeref:typename:std::vector<Mount>
mouseDoubleClickEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::mouseDoubleClickEvent(QMouseEvent* event)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
mouseDoubleClickEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::mouseDoubleClickEvent(QMouseEvent* event) {$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
mouseMoveEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::mouseMoveEvent(QMouseEvent* event) {$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
mouseMoveEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::mouseMoveEvent(QMouseEvent* event)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
mousePressEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::mousePressEvent(QMouseEvent* event) {$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
mousePressEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::mousePressEvent(QMouseEvent* event)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
mousePressEvent	pathbar-model-view/pathbar.cpp	/^void PathBar::mousePressEvent(QMouseEvent* event)$/;"	f	class:dingjing::PathBar	typeref:typename:void
mouseReleaseEvent	folder-model-view/folder-view.cpp	/^void FolderViewListView::mouseReleaseEvent(QMouseEvent* event)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
mouseReleaseEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::mouseReleaseEvent(QMouseEvent* event)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
moveCursor	folder-model-view/folder-view.cpp	/^QModelIndex FolderViewListView::moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modi/;"	f	class:dingjing::FolderViewListView	typeref:typename:QModelIndex
ms_call	c/rpc/clib-rpcpack.h	/^    uint16_t ms_call;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint16_t
ms_poll	c/rpc/clib-rpcpack.h	/^    uint16_t ms_poll;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint16_t
ms_recv	c/rpc/clib-rpcpack.h	/^    uint16_t ms_recv;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint16_t
ms_send	c/rpc/clib-rpcpack.h	/^    uint16_t ms_send;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint16_t
mtime	file-info.h	/^        quint64 mtime() const$/;"	f	class:dingjing::FileInfo	typeref:typename:quint64
mtime_	file-info.h	/^        quint64 mtime_;$/;"	m	class:dingjing::FileInfo	typeref:typename:quint64
mutex_	dir-list-job.h	/^        mutable std::mutex mutex_;$/;"	m	class:dingjing::DirListJob	typeref:typename:std::mutex
mutex_	folder.cpp	/^    std::mutex Folder::mutex_;$/;"	m	class:dingjing::Folder	typeref:typename:std::mutex
mutex_	folder.h	/^        static std::mutex mutex_;$/;"	m	class:dingjing::Folder	typeref:typename:std::mutex
mutex_	icon-info.cpp	/^    std::mutex IconInfo::mutex_;$/;"	m	class:dingjing::IconInfo	typeref:typename:std::mutex
mutex_	icon-info.h	/^    static std::mutex mutex_;$/;"	m	class:dingjing::IconInfo	typeref:typename:std::mutex
mutex_	mime-type.cpp	/^    std::mutex MimeType::mutex_;$/;"	m	class:dingjing::MimeType	typeref:typename:std::mutex
mutex_	mime-type.h	/^        static std::mutex mutex_;$/;"	m	class:dingjing::MimeType	typeref:typename:std::mutex
mutex_	thumbnailer.cpp	/^    std::mutex Thumbnailer::mutex_;$/;"	m	class:dingjing::Thumbnailer	typeref:typename:std::mutex
mutex_	thumbnailer.h	/^        static std::mutex mutex_;$/;"	m	class:dingjing::Thumbnailer	typeref:typename:std::mutex
mutex_	volume-manager.cpp	/^    std::mutex VolumeManager::mutex_;$/;"	m	class:dingjing::VolumeManager	typeref:typename:std::mutex
mutex_	volume-manager.h	/^    static std::mutex mutex_;$/;"	m	class:dingjing::VolumeManager	typeref:typename:std::mutex
name	file-info.h	/^        const std::string& name() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const std::string &
name	folder-model-view/folder-model-item.cpp	/^const std::string &dingjing::FolderModelItem::name() const$/;"	f	class:dingjing::dingjing::FolderModelItem	typeref:typename:const std::string &
name	mime-type.h	/^        const char* name() const$/;"	f	class:dingjing::MimeType	typeref:typename:const char *
name	pathbar-model-view/pathbar-p.h	/^    std::string name() const$/;"	f	class:dingjing::PathButton	typeref:typename:std::string
name	volume-manager.h	/^    CStrPtr name() const {$/;"	f	class:dingjing::Mount	typeref:typename:CStrPtr
name	volume-manager.h	/^    CStrPtr name() const$/;"	f	class:dingjing::Volume	typeref:typename:CStrPtr
name_	file-info.h	/^        std::string name_;$/;"	m	class:dingjing::FileInfo	typeref:typename:std::string
name_	mime-type.h	/^        CStrPtr name_;$/;"	m	class:dingjing::MimeType	typeref:typename:CStrPtr
nativeEventFilter	x-dnd-workaround.cpp	/^bool XdndWorkaround::nativeEventFilter(const QByteArray& eventType, void* message, long* \/*resu/;"	f	class:XdndWorkaround	typeref:typename:bool
next	c/array/clib-array-list.c	/^    array_list_node_t*      next;$/;"	m	struct:_array_list_node_t	typeref:typename:array_list_node_t *	file:
next	c/list/clib-double-list.h	/^    double_list_node_t* next;                               \/\/  后置节点$/;"	m	struct:_double_list_node_t	typeref:typename:double_list_node_t *
next	c/list/clib-double-list.h	/^    double_list_node_t* next;                               \/\/  当前迭代器的节点$/;"	m	struct:_double_list_iter_t	typeref:typename:double_list_node_t *
next	c/thread_pool/clib-thread-pool.c	/^    struct _thread_worker_t*    next;$/;"	m	struct:_thread_worker_t	typeref:struct:_thread_worker_t *	file:
no_child_non_expandable	fm-config.h	/^    gboolean no_child_non_expandable;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
no_usb_trash	fm-config.h	/^    gboolean no_usb_trash;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
node_flag	c/rpc/clib-rpcpack.h	/^    uint8_t node_flag;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint8_t
node_id0	c/rpc/clib-rpcpack.h	/^        uint64_t node_id0 :10;$/;"	m	struct:__anon5350a68c010a::__anon5350a68c0208	typeref:typename:uint64_t:10
node_id1	c/rpc/clib-rpcpack.h	/^        uint64_t node_id1 :10;$/;"	m	struct:__anon5350a68c010a::__anon5350a68c0208	typeref:typename:uint64_t:10
node_id2	c/rpc/clib-rpcpack.h	/^        uint64_t node_id2 :10;$/;"	m	struct:__anon5350a68c010a::__anon5350a68c0208	typeref:typename:uint64_t:10
node_id3	c/rpc/clib-rpcpack.h	/^        uint64_t node_id3 :10;$/;"	m	struct:__anon5350a68c010a::__anon5350a68c0208	typeref:typename:uint64_t:10
node_id4	c/rpc/clib-rpcpack.h	/^        uint64_t node_id4 :10;$/;"	m	struct:__anon5350a68c010a::__anon5350a68c0208	typeref:typename:uint64_t:10
node_id5	c/rpc/clib-rpcpack.h	/^        uint64_t node_id5 :10;$/;"	m	struct:__anon5350a68c010a::__anon5350a68c0208	typeref:typename:uint64_t:10
node_num	c/tree/clib-avl-tree.c	/^    unsigned int            node_num;$/;"	m	struct:_avl_tree_t	typeref:typename:unsigned int	file:
off	c/rpc/clib-rpcpack.h	/^    uint32_t off;$/;"	m	struct:__anon5350a68c0808	typeref:typename:uint32_t
onAutoSelectionTimeout	folder-model-view/folder-view.cpp	/^void FolderView::onAutoSelectionTimeout()$/;"	f	class:dingjing::FolderView	typeref:typename:void
onButtonToggled	pathbar-model-view/pathbar.cpp	/^void PathBar::onButtonToggled(bool checked)$/;"	f	class:dingjing::PathBar	typeref:typename:void
onCancellableCancelled	job.cpp	/^    void Job::onCancellableCancelled(GCancellable* \/*cancellable*\/)$/;"	f	class:dingjing::Job	typeref:typename:void
onClipboardDataChange	folder-model-view/folder-model.cpp	/^void FolderModel::onClipboardDataChange()$/;"	f	class:dingjing::FolderModel	typeref:typename:void
onClosingEditor	folder-model-view/folder-view.cpp	/^void FolderView::onClosingEditor(QWidget* editor, QAbstractItemDelegate::EndEditHint hint)$/;"	f	class:dingjing::FolderView	typeref:typename:void
onDirChanged	folder.cpp	/^    void Folder::onDirChanged(GFileMonitorEvent evt)$/;"	f	class:dingjing::Folder	typeref:typename:void
onDirListFinished	folder.cpp	/^    void Folder::onDirListFinished()$/;"	f	class:dingjing::Folder	typeref:typename:void
onFileChangeEvents	folder.cpp	/^    void Folder::onFileChangeEvents(GFileMonitor* \/*monitor*\/, GFile* gf, GFile* \/*other_file/;"	f	class:dingjing::Folder	typeref:typename:void
onFileClicked	folder-model-view/folder-view.cpp	/^void FolderView::onFileClicked(int type, const std::shared_ptr<const FileInfo> &fileInfo)$/;"	f	class:dingjing::FolderView	typeref:typename:void
onFileInfoFinished	folder.cpp	/^    void Folder::onFileInfoFinished()$/;"	f	class:dingjing::Folder	typeref:typename:void
onFileSystemInfoFinished	folder.cpp	/^    void Folder::onFileSystemInfoFinished() {$/;"	f	class:dingjing::Folder	typeref:typename:void
onFilesAdded	folder-model-view/folder-model.cpp	/^void FolderModel::onFilesAdded(const FileInfoList& files)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
onFilesChanged	folder-model-view/folder-model.cpp	/^void FolderModel::onFilesChanged(std::vector<FileInfoPair>& files)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
onFilesRemoved	folder-model-view/folder-model.cpp	/^void FolderModel::onFilesRemoved(const FileInfoList& files)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
onFinishLoading	folder-model-view/folder-model.cpp	/^void FolderModel::onFinishLoading()$/;"	f	class:dingjing::FolderModel	typeref:typename:void
onGMountAdded	volume-manager.cpp	/^    void VolumeManager::onGMountAdded(GMount* mnt)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
onGMountChanged	volume-manager.cpp	/^    void VolumeManager::onGMountChanged(GMount* mnt)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
onGMountRemoved	volume-manager.cpp	/^    void VolumeManager::onGMountRemoved(GMount* mnt)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
onGVolumeAdded	volume-manager.cpp	/^    void VolumeManager::onGVolumeAdded(GVolume* vol)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
onGVolumeChanged	volume-manager.cpp	/^    void VolumeManager::onGVolumeChanged(GVolume* vol)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
onGVolumeRemoved	volume-manager.cpp	/^    void VolumeManager::onGVolumeRemoved(GVolume* vol)$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
onGetGVolumeMonitorFinished	volume-manager.cpp	/^    void VolumeManager::onGetGVolumeMonitorFinished()$/;"	f	class:dingjing::VolumeManager	typeref:typename:void
onIdleReload	folder.cpp	/^    void Folder::onIdleReload()$/;"	f	class:dingjing::Folder	typeref:typename:void
onItemActivated	folder-model-view/folder-view.cpp	/^void FolderView::onItemActivated(QModelIndex index)$/;"	f	class:dingjing::FolderView	typeref:typename:void
onJobFinished	pathbar-model-view/path-editor.cpp	/^void PathEditor::onJobFinished()$/;"	f	class:dingjing::PathEditor	typeref:typename:void
onMountAdded	folder.cpp	/^    void Folder::onMountAdded(const Mount& mnt)$/;"	f	class:dingjing::Folder	typeref:typename:void
onMountRemoved	folder.cpp	/^    void Folder::onMountRemoved(const Mount& mnt)$/;"	f	class:dingjing::Folder	typeref:typename:void
onReturnPressed	pathbar-model-view/pathbar.cpp	/^void PathBar::onReturnPressed()$/;"	f	class:dingjing::PathBar	typeref:typename:void
onScrollButtonClicked	pathbar-model-view/pathbar.cpp	/^void PathBar::onScrollButtonClicked()$/;"	f	class:dingjing::PathBar	typeref:typename:void
onSelChangedTimeout	folder-model-view/folder-view.cpp	/^void FolderView::onSelChangedTimeout()$/;"	f	class:dingjing::FolderView	typeref:typename:void
onSelectionChanged	folder-model-view/folder-view.cpp	/^void FolderView::onSelectionChanged(const QItemSelection& \/*selected*\/, const QItemSelection& /;"	f	class:dingjing::FolderView	typeref:typename:void
onSortFilterChanged	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::onSortFilterChanged() {$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
onStartLoading	folder-model-view/folder-model.cpp	/^void FolderModel::onStartLoading()$/;"	f	class:dingjing::FolderModel	typeref:typename:void
onTextChanged	pathbar-model-view/path-editor.cpp	/^void PathEditor::onTextChanged(const QString& text)$/;"	f	class:dingjing::PathEditor	typeref:typename:void
onTextEdited	pathbar-model-view/path-editor.cpp	/^void PathEditor::onTextEdited(const QString& text)$/;"	f	class:dingjing::PathEditor	typeref:typename:void
onThumbnailJobFinished	folder-model-view/folder-model.cpp	/^void FolderModel::onThumbnailJobFinished()$/;"	f	class:dingjing::FolderModel	typeref:typename:void
onThumbnailLoaded	folder-model-view/folder-model.cpp	/^void FolderModel::onThumbnailLoaded(const std::shared_ptr<const FileInfo>& file, int size, const/;"	f	class:dingjing::FolderModel	typeref:typename:void
onThumbnailLoaded	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::onThumbnailLoaded(const QModelIndex& srcIndex, int size) {$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
only_user_templates	fm-config.h	/^    gboolean only_user_templates;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
openEditor	pathbar-model-view/pathbar.cpp	/^void PathBar::openEditor()$/;"	f	class:dingjing::PathBar	typeref:typename:void
operator !=	file-path.cpp	/^bool FilePath::operator !=(const FilePath &other) const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
operator !=	file-path.cpp	/^bool FilePath::operator !=(std::nullptr_t) const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
operator !=	smart-ptr.hpp	/^    bool operator != (std::nullptr_t) const {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:bool
operator !=	smart-ptr.hpp	/^    bool operator != (std::nullptr_t) const$/;"	f	class:dingjing::GObjectPtr	typeref:typename:bool
operator &	smart-ptr.hpp	/^    GError** operator&() {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:GError **
operator ()	icon-info.h	/^        bool operator()(GIcon* gicon1, GIcon* gicon2) const {$/;"	f	struct:dingjing::IconInfo::GIconEqual	typeref:typename:bool
operator ()	icon-info.h	/^        std::size_t operator()(GIcon* gicon) const {$/;"	f	struct:dingjing::IconInfo::GIconHash	typeref:typename:std::size_t
operator ()	smart-ptr.hpp	/^    bool operator()(const char* str1, const char* str2) const {$/;"	f	struct:dingjing::CStrEqual	typeref:typename:bool
operator ()	smart-ptr.hpp	/^    std::size_t operator()(const char* str) const {$/;"	f	struct:dingjing::CStrHash	typeref:typename:std::size_t
operator ()	smart-ptr.hpp	/^    void operator()(char* ptr) const {$/;"	f	struct:dingjing::CStrDeleter	typeref:typename:void
operator ()	smart-ptr.hpp	/^    void operator()(char** ptr) const {$/;"	f	struct:dingjing::CStrVDeleter	typeref:typename:void
operator () 	file-path.h	/^    std::size_t operator() (const FilePath& path) const {$/;"	f	struct:dingjing::FilePathHash	typeref:typename:std::size_t
operator ->	smart-ptr.hpp	/^    GError* operator->() {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:GError *
operator ->	smart-ptr.hpp	/^    const GError* operator->() const {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:const GError *
operator =	file-path.cpp	/^FilePath &FilePath::operator =(const FilePath &&other) noexcept$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath &
operator =	file-path.cpp	/^FilePath &FilePath::operator =(const FilePath &other)$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath &
operator =	smart-ptr.hpp	/^    GErrorPtr& operator = (GError*&& err) {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:GErrorPtr &
operator =	smart-ptr.hpp	/^    GErrorPtr& operator = (GErrorPtr&& other) noexcept {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:GErrorPtr &
operator =	smart-ptr.hpp	/^    GObjectPtr& operator = (GObjectPtr&& other) noexcept$/;"	f	class:dingjing::GObjectPtr	typeref:typename:GObjectPtr &
operator =	smart-ptr.hpp	/^    GObjectPtr& operator = (T* gobj)$/;"	f	class:dingjing::GObjectPtr	typeref:typename:GObjectPtr &
operator =	smart-ptr.hpp	/^    GObjectPtr& operator = (const GObjectPtr& other)$/;"	f	class:dingjing::GObjectPtr	typeref:typename:GObjectPtr &
operator ==	file-path.cpp	/^bool FilePath::operator ==(GFile *other_gfile) const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
operator ==	file-path.cpp	/^bool FilePath::operator ==(const FilePath &other) const$/;"	f	class:dingjing::FilePath	typeref:typename:bool
operator ==	smart-ptr.hpp	/^    bool operator == (GError* err) const {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:bool
operator ==	smart-ptr.hpp	/^    bool operator == (T* gobj) const$/;"	f	class:dingjing::GObjectPtr	typeref:typename:bool
operator ==	smart-ptr.hpp	/^    bool operator == (const GErrorPtr& other) const {$/;"	f	class:dingjing::GErrorPtr	typeref:typename:bool
operator ==	smart-ptr.hpp	/^    bool operator == (const GObjectPtr& other) const$/;"	f	class:dingjing::GObjectPtr	typeref:typename:bool
ownerGroup	folder-model-view/folder-model-item.cpp	/^QString FolderModelItem::ownerGroup() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:QString
ownerName	folder-model-view/folder-model-item.cpp	/^QString FolderModelItem::ownerName() const$/;"	f	class:dingjing::FolderModelItem	typeref:typename:QString
pack_buf	c/rpc/clib-rpcpack.h	/^    uint8_t *pack_buf;$/;"	m	struct:__anon5350a68c0908	typeref:typename:uint8_t *
pack_cur	c/rpc/clib-rpcpack.h	/^    uint8_t *pack_cur;$/;"	m	struct:__anon5350a68c0908	typeref:typename:uint8_t *
pack_end	c/rpc/clib-rpcpack.h	/^    uint8_t *pack_end;$/;"	m	struct:__anon5350a68c0908	typeref:typename:uint8_t *
pack_head	c/rpc/clib-rpcpack.h	/^    rpcpack_head_t *pack_head;$/;"	m	struct:__anon5350a68c0908	typeref:typename:rpcpack_head_t *
pad1	c/rpc/clib-rpcpack.h	/^            uint64_t pad1;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0708	typeref:typename:uint64_t
pad2	c/rpc/clib-rpcpack.h	/^            uint64_t pad2;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0708	typeref:typename:uint64_t
pad3	c/rpc/clib-rpcpack.h	/^            uint64_t pad3;$/;"	m	struct:__anon5350a68c0408::__anon5350a68c050a::__anon5350a68c0708	typeref:typename:uint64_t
paint	folder-model-view/folder-item-delegate.cpp	/^void FolderItemDelegate::paint(QPainter* painter, const QStyleOptionViewItem& option, const QMod/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
paint	icon-info-p.h	/^    void IconEngine::paint(QPainter* painter, const QRect& rect, QIcon::Mode mode, QIcon::State /;"	f	class:dingjing::IconEngine	typeref:typename:void
paintEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::paintEvent(QPaintEvent * event)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
pane_icon_size	fm-config.h	/^    gint pane_icon_size;$/;"	m	struct:_FmConfig	typeref:typename:gint
parent	c/tree/clib-avl-tree.c	/^    avl_tree_node_t*        parent;$/;"	m	struct:_avl_tree_node_t	typeref:typename:avl_tree_node_t *	file:
parent	file-path.cpp	/^FilePath FilePath::parent() const$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath
parent	fm-config.h	/^    GObject parent;$/;"	m	struct:_FmConfig	typeref:typename:GObject
parent	folder-model-view/folder-model.cpp	/^QModelIndex FolderModel::parent(const QModelIndex& \/*index*\/) const$/;"	f	class:dingjing::FolderModel	typeref:typename:QModelIndex
path	file-info.h	/^        FilePath path() const$/;"	f	class:dingjing::FileInfo	typeref:typename:FilePath
path	folder-model-view/folder-model.h	/^    FilePath path()$/;"	f	class:dingjing::FolderModel	typeref:typename:FilePath
path	folder-model-view/folder-view.h	/^    FilePath path()$/;"	f	class:dingjing::FolderView	typeref:typename:FilePath
path	folder.cpp	/^    const FilePath& Folder::path() const$/;"	f	class:dingjing::Folder	typeref:typename:const FilePath &
path	pathbar-model-view/pathbar.h	/^    const FilePath& path()$/;"	f	class:dingjing::PathBar	typeref:typename:const FilePath &
pathForButton	pathbar-model-view/pathbar.cpp	/^FilePath PathBar::pathForButton(PathButton* btn)$/;"	f	class:dingjing::PathBar	typeref:typename:FilePath
pathListFromQUrls	utils.cpp	/^dingjing::FilePathList dingjing::Utils::pathListFromQUrls(QList<QUrl> urls)$/;"	f	class:dingjing::Utils	typeref:typename:dingjing::FilePathList
pathListFromUriList	utils.cpp	/^dingjing::FilePathList dingjing::Utils::pathListFromUriList(const char *uriList)$/;"	f	class:dingjing::Utils	typeref:typename:dingjing::FilePathList
pathListToUriList	utils.cpp	/^QByteArray dingjing::Utils::pathListToUriList(const dingjing::FilePathList &paths)$/;"	f	class:dingjing::Utils	typeref:typename:QByteArray
path_	filesystem-info-job.h	/^        FilePath path_;$/;"	m	class:dingjing::FilesystemInfoJob	typeref:typename:FilePath
paths	file-info-job.h	/^        const FilePathList& paths() const$/;"	f	class:dingjing::FileInfoJob	typeref:typename:const FilePathList &
paths	file-info.h	/^        FilePathList paths() const$/;"	f	class:dingjing::FileInfoList	typeref:typename:FilePathList
paths_	file-info-job.h	/^        FilePathList paths_;$/;"	m	class:dingjing::FileInfoJob	typeref:typename:FilePathList
paths_to_add	folder.h	/^        FilePathList paths_to_add;$/;"	m	class:dingjing::Folder	typeref:typename:FilePathList
paths_to_del	folder.h	/^        FilePathList paths_to_del;$/;"	m	class:dingjing::Folder	typeref:typename:FilePathList
paths_to_update	folder.h	/^        FilePathList paths_to_update;$/;"	m	class:dingjing::Folder	typeref:typename:FilePathList
pause	file-read-write.cpp	/^void FileReadAndWrite::pause ()$/;"	f	class:FileReadAndWrite	typeref:typename:void
paused_	job.h	/^    bool paused_;$/;"	m	class:dingjing::Job	typeref:typename:bool
pending_change_notify	folder.h	/^        bool pending_change_notify;$/;"	m	class:dingjing::Folder	typeref:typename:bool
pixmap	icon-info-p.h	/^    QPixmap IconEngine::pixmap(const QSize& size, QIcon::Mode mode, QIcon::State state) {$/;"	f	class:dingjing::IconEngine	typeref:typename:QPixmap
places_applications	fm-config.h	/^    gboolean places_applications;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
places_computer	fm-config.h	/^    gboolean places_computer;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
places_desktop	fm-config.h	/^    gboolean places_desktop;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
places_home	fm-config.h	/^    gboolean places_home;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
places_network	fm-config.h	/^    gboolean places_network;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
places_root	fm-config.h	/^    gboolean places_root;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
places_trash	fm-config.h	/^    gboolean places_trash;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
places_unmounted	fm-config.h	/^    gboolean places_unmounted;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
port	c/rpc/clib-rpcpack.h	/^    uint16_t port;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint16_t
pos_array	c/rpc/clib-rpcpack.h	/^    rpcpack_pos_t *pos_array;$/;"	m	struct:__anon5350a68c0908	typeref:typename:rpcpack_pos_t *
pos_off	c/rpc/clib-rpcpack.h	/^    uint32_t pos_off;$/;"	m	struct:__anon5350a68c0408	typeref:typename:uint32_t
postorder_print_tree	c/tree/clib-avl-tree.c	/^void postorder_print_tree(avl_tree_node_t *node, avl_tree_print_key print) {$/;"	f	typeref:typename:void
pre	c/list/clib-double-list.h	/^    double_list_node_t* pre;                                \/\/  前置节点$/;"	m	struct:_double_list_node_t	typeref:typename:double_list_node_t *
preorder_print_tree	c/tree/clib-avl-tree.c	/^void preorder_print_tree(avl_tree_node_t *node, avl_tree_print_key print) {$/;"	f	typeref:typename:void
prepareFileMenu	folder-model-view/folder-view.cpp	/^void FolderView::prepareFileMenu(FileMenu *menu)$/;"	f	class:dingjing::FolderView	typeref:typename:void
prepareFolderMenu	folder-model-view/folder-view.cpp	/^void FolderView::prepareFolderMenu(FolderMenu *menu)$/;"	f	class:dingjing::FolderView	typeref:typename:void
prev	c/array/clib-array-list.c	/^    array_list_node_t*      prev;$/;"	m	struct:_array_list_node_t	typeref:typename:array_list_node_t *	file:
processPendingChanges	folder.cpp	/^    void Folder::processPendingChanges()$/;"	f	class:dingjing::Folder	typeref:typename:void
qicon	icon-info.cpp	/^    QIcon IconInfo::qicon() const {$/;"	f	class:dingjing::IconInfo	typeref:typename:QIcon
qicon_	icon-info.h	/^    mutable QIcon qicon_;$/;"	m	class:dingjing::IconInfo	typeref:typename:QIcon
qiconsFromNames	icon-info.cpp	/^    QList<QIcon> IconInfo::qiconsFromNames(const char* const* names) {$/;"	f	class:dingjing::IconInfo	typeref:typename:QList<QIcon>
queryFilesystemInfo	folder.cpp	/^    void Folder::queryFilesystemInfo() {$/;"	f	class:dingjing::Folder	typeref:typename:void
queueLayoutColumns	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::queueLayoutColumns()$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
queueLoadThumbnail	folder-model-view/folder-model.cpp	/^void FolderModel::queueLoadThumbnail(const std::shared_ptr<const FileInfo>& file, int size)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
queueReload	folder.cpp	/^    void Folder::queueReload()$/;"	f	class:dingjing::Folder	typeref:typename:void
queueUpdate	folder.cpp	/^    void Folder::queueUpdate()$/;"	f	class:dingjing::Folder	typeref:typename:void
quick_exec	fm-config.h	/^    gboolean quick_exec;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
random_shuffle	c/random/clib-random.c	/^void random_shuffle(uint64_t seed, uint32_t *array, uint32_t size) $/;"	f	typeref:typename:void
readImageFromStream	thumbnail-job.cpp	/^QImage ThumbnailJob::readImageFromStream(GInputStream* stream, size_t len)$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:QImage
readJpegExif	thumbnail-job.cpp	/^bool ThumbnailJob::readJpegExif(GInputStream *stream, QImage& thumbnail, QTransform& matrix)$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:bool
ready	c/thread_pool/clib-thread-pool.c	/^    pthread_cond_t              ready;$/;"	m	struct:_thread_pool_t	typeref:typename:pthread_cond_t	file:
realSize	file-info.h	/^        uint64_t realSize() const$/;"	f	class:dingjing::FileInfo	typeref:typename:uint64_t
rectForIndex	folder-model-view/folder-view-p.h	/^    inline QRect rectForIndex(const QModelIndex & index) const$/;"	f	class:dingjing::FolderViewListView	typeref:typename:QRect
ref	folder-model-view/cached-folder-model.h	/^    void ref()$/;"	f	class:dingjing::CachedFolderModel	typeref:typename:void
relativePath	file-path.cpp	/^FilePath FilePath::relativePath(const char *relPath) const$/;"	f	class:dingjing::FilePath	typeref:typename:FilePath
relativePathStr	file-path.cpp	/^CStrPtr FilePath::relativePathStr(const FilePath &descendant) const$/;"	f	class:dingjing::FilePath	typeref:typename:CStrPtr
release	smart-ptr.hpp	/^    T* release()$/;"	f	class:dingjing::GObjectPtr	typeref:typename:T *
releaseThumbnails	folder-model-view/folder-model.cpp	/^void FolderModel::releaseThumbnails(int size)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
reload	folder.cpp	/^    void Folder::reload()$/;"	f	class:dingjing::Folder	typeref:typename:void
reloadCompleter	pathbar-model-view/path-editor.cpp	/^void PathEditor::reloadCompleter(bool triggeredByFocusInEvent)$/;"	f	class:dingjing::PathEditor	typeref:typename:void
removeAll	folder-model-view/folder-model.cpp	/^void FolderModel::removeAll()$/;"	f	class:dingjing::FolderModel	typeref:typename:void
removeFilter	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::removeFilter(ProxyFolderModelFilter* filter)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
removeThumbnail	folder-model-view/folder-model-item.cpp	/^void FolderModelItem::removeThumbnail(int size)$/;"	f	class:dingjing::FolderModelItem	typeref:typename:void
removeThumbnailer	mime-type.h	/^        void removeThumbnailer(std::shared_ptr<const Thumbnailer>& thumbnailer)$/;"	f	class:dingjing::MimeType	typeref:typename:void
reset	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::reset()$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
reset	smart-ptr.hpp	/^    void reset()$/;"	f	class:dingjing::GErrorPtr	typeref:typename:void
reset	smart-ptr.hpp	/^    void reset()$/;"	f	class:dingjing::GObjectPtr	typeref:typename:void
resizeEvent	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::resizeEvent(QResizeEvent* event)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
resizeEvent	pathbar-model-view/pathbar.cpp	/^void PathBar::resizeEvent(QResizeEvent* event)$/;"	f	class:dingjing::PathBar	typeref:typename:void
restart	file-read-write.cpp	/^void FileReadAndWrite::restart ()$/;"	f	class:FileReadAndWrite	typeref:typename:void
results	thumbnail-job.cpp	/^const std::vector<QImage>& ThumbnailJob::results() const$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:const std::vector<QImage> &
results_	file-info-job.h	/^        FileInfoList results_;$/;"	m	class:dingjing::FileInfoJob	typeref:typename:FileInfoList
root	c/tree/clib-avl-tree.c	/^    avl_tree_node_t*        root;$/;"	m	struct:_avl_tree_t	typeref:typename:avl_tree_node_t *	file:
root	volume-manager.h	/^    FilePath root() const {$/;"	f	class:dingjing::Mount	typeref:typename:FilePath
rowCount	folder-model-view/folder-model.cpp	/^int FolderModel::rowCount(const QModelIndex& parent) const$/;"	f	class:dingjing::FolderModel	typeref:typename:int
rowsAboutToBeRemoved	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::rowsAboutToBeRemoved(const QModelIndex& parent, int start, int end)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
rowsInserted	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::rowsInserted(const QModelIndex& parent, int start, int end)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
rpc_id	c/rpc/clib-rpcpack.h	/^    uint32_t rpc_id;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint32_t
rpcpack_begin	c/rpc/clib-rpcpack.c	/^int rpcpack_begin(rpcpack_data_t *pack_data, uint32_t item_asize, void *pack_buf, uint32_t pack_/;"	f	typeref:typename:int
rpcpack_cut	c/rpc/clib-rpcpack.c	/^int rpcpack_cut(rpcpack_data_t *pack_data, rpcpack_pos_t *pos_array, uint32_t item_id, uint32_t /;"	f	typeref:typename:int
rpcpack_data_t	c/rpc/clib-rpcpack.h	/^} rpcpack_data_t;$/;"	t	typeref:struct:__anon5350a68c0908
rpcpack_decode	c/rpc/clib-rpcpack.c	/^int rpcpack_decode(rpcpack_data_t *pack_data, void *pack_buf, uint32_t pack_len, uint64_t rpc_mo/;"	f	typeref:typename:int
rpcpack_dump	c/rpc/clib-rpcpack.c	/^static void rpcpack_dump(rpcpack_data_t *pack_data, uint32_t pack_len, const char *msg) $/;"	f	typeref:typename:void	file:
rpcpack_end	c/rpc/clib-rpcpack.c	/^int rpcpack_end(rpcpack_data_t *pack_data, rpcpack_pos_t *pos_array, uint32_t *pack_len, uint64_/;"	f	typeref:typename:int
rpcpack_error	c/rpc/clib-rpcpack.c	/^void rpcpack_error(rpcpack_data_t *pack_data, uint32_t *pack_len, uint64_t rpc_mode) $/;"	f	typeref:typename:void
rpcpack_get	c/rpc/clib-rpcpack.c	/^void* rpcpack_get(rpcpack_data_t *pack_data, rpcpack_pos_t *pos_array, uint32_t item_id, uint32_/;"	f	typeref:typename:void *
rpcpack_head	c/rpc/clib-rpcpack.c	/^int rpcpack_head(rpcpack_data_t *pack_data, void *pack_buf, uint32_t pack_len, uint64_t rpc_mode/;"	f	typeref:typename:int
rpcpack_head_t	c/rpc/clib-rpcpack.h	/^} rpcpack_head_t;$/;"	t	typeref:struct:__anon5350a68c0408
rpcpack_mov	c/rpc/clib-rpcpack.c	/^int rpcpack_mov(rpcpack_data_t *pack_data, rpcpack_pos_t *pos_array) $/;"	f	typeref:typename:int
rpcpack_naddr	c/rpc/clib-rpcpack.c	/^void rpcpack_naddr(rpcpack_ninfo_t *pack_ninfo, char *addr_buf) $/;"	f	typeref:typename:void
rpcpack_ninfo_t	c/rpc/clib-rpcpack.h	/^} rpcpack_ninfo_t;$/;"	t	typeref:struct:__anon5350a68c0308
rpcpack_pos_t	c/rpc/clib-rpcpack.h	/^} rpcpack_pos_t;$/;"	t	typeref:struct:__anon5350a68c0808
rpcpack_put	c/rpc/clib-rpcpack.c	/^void* rpcpack_put(rpcpack_data_t *pack_data, rpcpack_pos_t *pos_array, uint32_t item_len, uint32/;"	f	typeref:typename:void *
rpcpack_tdown	c/rpc/clib-rpcpack.c	/^int rpcpack_tdown(rpcpack_trace_t *pack_trace, uint32_t node_id) $/;"	f	typeref:typename:int
rpcpack_tnode	c/rpc/clib-rpcpack.c	/^int rpcpack_tnode(rpcpack_trace_t *pack_trace, uint32_t depth_count, uint32_t *node_id) $/;"	f	typeref:typename:int
rpcpack_trace	c/rpc/clib-rpcpack.c	/^int rpcpack_trace(void *pack_buf, uint32_t pack_len, rpcpack_trace_t *call_trace) $/;"	f	typeref:typename:int
rpcpack_trace_t	c/rpc/clib-rpcpack.h	/^} rpcpack_trace_t;$/;"	t	typeref:union:__anon5350a68c010a
run	file-read-write.cpp	/^void FileReadAndWrite::run ()$/;"	f	class:FileReadAndWrite	typeref:typename:void
run	job.cpp	/^    void Job::run()$/;"	f	class:dingjing::Job	typeref:typename:void
run	job_p.h	/^    void run() override$/;"	f	class:dingjing::JobThread	typeref:typename:void
run	thumbnailer.cpp	/^    bool Thumbnailer::run(const char* uri, const char* output_file, int size) const$/;"	f	class:dingjing::Thumbnailer	typeref:typename:bool
runAsync	job.cpp	/^    void Job::runAsync(QThread::Priority priority)$/;"	f	class:dingjing::Job	typeref:typename:void
runJob	pathbar-model-view/path-editor.cpp	/^void PathEditorJob::runJob()$/;"	f	class:dingjing::PathEditorJob	typeref:typename:void
saved_search	fm-config.h	/^    gchar *saved_search;$/;"	m	struct:_FmConfig	typeref:typename:gchar *
scrollAnimFrames	folder-model-view/folder-view.cpp	/^static const int scrollAnimFrames = SCROLL_FRAMES_PER_SEC * SCROLL_DURATION \/ 1000;$/;"	v	typeref:typename:const int	file:
scrollData	folder-model-view/folder-view.h	/^    struct scrollData$/;"	s	class:dingjing::FolderView
scrollSmoothly	folder-model-view/folder-view.cpp	/^void FolderView::scrollSmoothly()$/;"	f	class:dingjing::FolderView	typeref:typename:void
selectAll	folder-model-view/folder-view.cpp	/^void FolderView::selectAll()$/;"	f	class:dingjing::FolderView	typeref:typename:void
selectAll	folder-model-view/folder-view.cpp	/^void FolderViewListView::selectAll()$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
selectFiles	folder-model-view/folder-view.cpp	/^void FolderView::selectFiles(const FileInfoList& files, bool add)$/;"	f	class:dingjing::FolderView	typeref:typename:void
selectNextCompletionRow	pathbar-model-view/path-editor.cpp	/^void PathEditor::selectNextCompletionRow(bool downward)$/;"	f	class:dingjing::PathEditor	typeref:typename:void
selectedFilePaths	folder-model-view/folder-view.cpp	/^FilePathList FolderView::selectedFilePaths() const$/;"	f	class:dingjing::FolderView	typeref:typename:FilePathList
selectedFiles	folder-model-view/folder-view.cpp	/^FileInfoList FolderView::selectedFiles() const$/;"	f	class:dingjing::FolderView	typeref:typename:FileInfoList
selectedIndexes	folder-model-view/folder-view.cpp	/^QModelIndexList FolderView::selectedIndexes() const$/;"	f	class:dingjing::FolderView	typeref:typename:QModelIndexList
selectedRows	folder-model-view/folder-view.cpp	/^QModelIndexList FolderView::selectedRows(int column) const$/;"	f	class:dingjing::FolderView	typeref:typename:QModelIndexList
selectionModel	folder-model-view/folder-view.cpp	/^QItemSelectionModel* FolderView::selectionModel() const$/;"	f	class:dingjing::FolderView	typeref:typename:QItemSelectionModel *
selectionNotify	x-dnd-workaround.cpp	/^bool XdndWorkaround::selectionNotify(xcb_selection_notify_event_t* event)$/;"	f	class:XdndWorkaround	typeref:typename:bool
selectionRequest	x-dnd-workaround.cpp	/^bool XdndWorkaround::selectionRequest(xcb_selection_request_event_t* event)$/;"	f	class:XdndWorkaround	typeref:typename:bool
setArrowEnabledState	pathbar-model-view/pathbar.cpp	/^void PathBar::setArrowEnabledState(int value)$/;"	f	class:dingjing::PathBar	typeref:typename:void
setAutoSelectionDelay	folder-model-view/folder-view.cpp	/^void FolderView::setAutoSelectionDelay(int delay)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setBackupAsHidden	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setBackupAsHidden(bool backupAsHidden)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setCtrlRightClick	folder-model-view/folder-view.cpp	/^void FolderView::setCtrlRightClick(bool ctrlRightClick)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setCustomColumnWidths	folder-model-view/folder-view.cpp	/^void FolderView::setCustomColumnWidths(const QList<int> &widths)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setCustomColumnWidths	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::setCustomColumnWidths(const QList<int> &widths)$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
setEditorData	folder-model-view/folder-item-delegate.cpp	/^void FolderItemDelegate::setEditorData(QWidget* editor, const QModelIndex& index) const$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setFileInfoRole	folder-model-view/folder-item-delegate.h	/^    void setFileInfoRole(int role)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setFileLauncher	folder-model-view/folder-view.h	/^    void setFileLauncher(FileLauncher* launcher)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setFolder	folder-model-view/folder-model.cpp	/^void FolderModel::setFolder(const std::shared_ptr<Folder>& newFolder)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
setFolderFirst	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setFolderFirst(bool folderFirst)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setFromGFileInfo	file-info.cpp	/^    void FileInfo::setFromGFileInfo(const GObjectPtr<GFileInfo>& inf, const FilePath& filePath, /;"	f	class:dingjing::FileInfo	typeref:typename:void
setHiddenColumns	folder-model-view/folder-view.cpp	/^void FolderView::setHiddenColumns(const QList<int> &columns)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setHiddenColumns	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::setHiddenColumns(const QSet<int> &columns) {$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
setHiddenLast	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setHiddenLast(bool hiddenLast)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setIconInfoRole	folder-model-view/folder-item-delegate.h	/^    void setIconInfoRole(int role)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setIconSize	folder-model-view/folder-item-delegate.h	/^    inline void setIconSize(QSize size)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setIconSize	folder-model-view/folder-view.cpp	/^void FolderView::setIconSize(ViewMode mode, QSize size)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setItemSize	folder-model-view/folder-item-delegate.h	/^    inline void setItemSize(QSize size)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setLocalFilesOnly	thumbnail-job.cpp	/^void ThumbnailJob::setLocalFilesOnly(bool value)$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:void
setMargins	folder-model-view/folder-item-delegate.h	/^    void setMargins(QSize margins)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setMargins	folder-model-view/folder-view.cpp	/^void FolderView::setMargins(QSize size)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setMaxExternalThumbnailFileSize	thumbnail-job.cpp	/^void ThumbnailJob::setMaxExternalThumbnailFileSize(int size) {$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:void
setMaxThumbnailFileSize	thumbnail-job.cpp	/^void ThumbnailJob::setMaxThumbnailFileSize(int size) {$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:void
setModel	folder-model-view/folder-view.cpp	/^void FolderView::setModel(ProxyFolderModel* model)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setModel	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::setModel(QAbstractItemModel* model) {$/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
setName	pathbar-model-view/pathbar-p.h	/^    void setName(const std::string& name)$/;"	f	class:dingjing::PathButton	typeref:typename:void
setPath	pathbar-model-view/pathbar.cpp	/^void PathBar::setPath(FilePath path)$/;"	f	class:dingjing::PathBar	typeref:typename:void
setPositionForIndex	folder-model-view/folder-view-p.h	/^    inline void setPositionForIndex(const QPoint & position, const QModelIndex & index)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
setScrollButtonVisibility	pathbar-model-view/pathbar.cpp	/^void PathBar::setScrollButtonVisibility()$/;"	f	class:dingjing::PathBar	typeref:typename:void
setSelection	folder-model-view/folder-view.cpp	/^void FolderViewTreeView::setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags com/;"	f	class:dingjing::FolderViewTreeView	typeref:typename:void
setShadowColor	folder-model-view/folder-item-delegate.h	/^    void setShadowColor(const QColor& shadowColor)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setShadowHidden	folder-model-view/folder-item-delegate.h	/^    void setShadowHidden(bool value)$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
setShadowHidden	folder-model-view/folder-view.cpp	/^void FolderView::setShadowHidden(bool shadowHidden)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setShowFullName	folder-model-view/folder-model.h	/^    void setShowFullName(bool fullName)$/;"	f	class:dingjing::FolderModel	typeref:typename:void
setShowHidden	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setShowHidden(bool show)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setShowThumbnails	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setShowThumbnails(bool show)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setSortCaseSensitivity	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setSortCaseSensitivity(Qt::CaseSensitivity cs)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setSourceModel	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setSourceModel(QAbstractItemModel* model)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setThumbnailSize	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::setThumbnailSize(int size)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
setTrustable	file-info.cpp	/^    void FileInfo::setTrustable(bool trust) const$/;"	f	class:dingjing::FileInfo	typeref:typename:void
setViewMode	folder-model-view/folder-view.cpp	/^void FolderView::setViewMode(ViewMode mode)$/;"	f	class:dingjing::FolderView	typeref:typename:void
setWindowProperty	x-dnd-workaround.cpp	/^void XdndWorkaround::setWindowProperty(xcb_window_t window, xcb_atom_t propAtom, xcb_atom_t type/;"	f	class:XdndWorkaround	typeref:typename:void
shadowColor	folder-model-view/folder-item-delegate.h	/^    const QColor& shadowColor() const$/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:const QColor &
shadow_hidden	fm-config.h	/^    gboolean shadow_hidden;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
shouldAutoMount	volume-manager.h	/^    bool shouldAutoMount() const$/;"	f	class:dingjing::Volume	typeref:typename:bool
showHidden	folder-model-view/proxy-folder-model.cpp	/^bool ProxyFolderModel::showHidden() const$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:bool
showThumbnails	folder-model-view/proxy-folder-model.cpp	/^bool ProxyFolderModel::showThumbnails()$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:bool
show_full_names	fm-config.h	/^    gboolean show_full_names;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
show_internal_volumes	fm-config.h	/^    gboolean show_internal_volumes;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
show_thumbnail	fm-config.h	/^    gboolean show_thumbnail;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
shutdown	c/thread_pool/clib-thread-pool.c	/^    int                         shutdown;$/;"	m	struct:_thread_pool_t	typeref:typename:int	file:
si_unit	fm-config.h	/^    gboolean si_unit;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
single_click	fm-config.h	/^    gboolean single_click;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
size	file-info.h	/^        uint64_t size() const$/;"	f	class:dingjing::FileInfo	typeref:typename:uint64_t
size	filesystem-info-job.h	/^        uint64_t size() const {$/;"	f	class:dingjing::FilesystemInfoJob	typeref:typename:uint64_t
size	folder-model-view/folder-model-item.h	/^            int             size;$/;"	m	struct:dingjing::FolderModelItem::Thumbnail	typeref:typename:int
size	thumbnail-job.cpp	/^int ThumbnailJob::size() const$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:int
sizeHint	folder-model-view/folder-item-delegate.cpp	/^QSize FolderItemDelegate::sizeHint(const QStyleOptionViewItem& option, const QModelIndex& index)/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:QSize
size_	file-info.h	/^        uint64_t size_;$/;"	m	class:dingjing::FileInfo	typeref:typename:uint64_t
size_	filesystem-info-job.h	/^        uint64_t size_;$/;"	m	class:dingjing::FilesystemInfoJob	typeref:typename:uint64_t
small_icon_size	fm-config.h	/^    gint small_icon_size;$/;"	m	struct:_FmConfig	typeref:typename:gint
smart_desktop_autodrop	fm-config.h	/^    gboolean smart_desktop_autodrop;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
sort	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::sort(int column, Qt::SortOrder order)$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
startDrag	folder-model-view/folder-view.cpp	/^void FolderViewListView::startDrag(Qt::DropActions supportedActions)$/;"	f	class:dingjing::FolderViewListView	typeref:typename:void
status	folder-model-view/folder-model-item.h	/^            ThumbnailStatus status;$/;"	m	struct:dingjing::FolderModelItem::Thumbnail	typeref:typename:ThumbnailStatus
stop_emission	folder.h	/^        bool stop_emission; \/* don't set it 1 bit to not lock other bits *\/$/;"	m	class:dingjing::Folder	typeref:typename:bool
strescape	c/string/clib-string.c	/^size_t strescape(const char *src, size_t len, char *dst, size_t dst_len) $/;"	f	typeref:typename:size_t
stringMiddleTruncate	utils.cpp	/^QString dingjing::Utils::stringMiddleTruncate (const QString& str, uint truncateLength)$/;"	f	class:dingjing::Utils	typeref:typename:QString
strzcpy	c/string/clib-string.c	/^char* strzcpy(char *dest, const char *src, size_t n, uint32_t *out_len) $/;"	f	typeref:typename:char *
supportedDropActions	folder-model-view/folder-model.cpp	/^Qt::DropActions FolderModel::supportedDropActions() const$/;"	f	class:dingjing::FolderModel	typeref:typename:Qt::DropActions
sysCategory	c/syslog/clib-syslog.c	/^static char sysCategory[128] = {0};$/;"	v	typeref:typename:char[128]	file:
sysFacility	c/syslog/clib-syslog.c	/^static int sysFacility = 0;$/;"	v	typeref:typename:int	file:
syslog_info	c/syslog/clib-syslog.c	/^void syslog_info(int mlogLevel, const char *fileName, const char *functionName, int line, const /;"	f	typeref:typename:void
syslog_init	c/syslog/clib-syslog.c	/^void syslog_init(const char *category, int loglevel, int facility)$/;"	f	typeref:typename:void
system_gid_byname	c/util/clib-util.c	/^CLIB_RET system_gid_byname (const char* name, int* uid, int* gid,$/;"	f	typeref:typename:CLIB_RET
system_modules_blacklist	fm-config.h	/^    gchar **system_modules_blacklist; \/* concatenated from system, don't save! *\/$/;"	m	struct:_FmConfig	typeref:typename:gchar **
system_pid_byupname	c/util/clib-util.c	/^CLIB_RET system_pid_byupname (const char* pname, const char* uname, int* pid, int* ppid) $/;"	f	typeref:typename:CLIB_RET
system_user_num	c/util/clib-util.c	/^CLIB_RET system_user_num (int* user)$/;"	f	typeref:typename:CLIB_RET
tail	c/list/clib-double-list.h	/^    double_list_node_t* tail;                               \/\/  表尾节点$/;"	m	struct:_double_list_t	typeref:typename:double_list_node_t *
target	file-info.h	/^        const std::string& target() const$/;"	f	class:dingjing::FileInfo	typeref:typename:const std::string &
target_	file-info.h	/^        std::string target_; \/* target of shortcut or mountable. *\/$/;"	m	class:dingjing::FileInfo	typeref:typename:std::string
template_run_app	fm-config.h	/^    gboolean template_run_app;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
template_type_once	fm-config.h	/^    gboolean template_type_once;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
terminal	fm-config.h	/^    char* terminal;$/;"	m	struct:_FmConfig	typeref:typename:char *
threadPool	thumbnail-job.cpp	/^QThreadPool* ThumbnailJob::threadPool ()$/;"	f	class:dingjing::ThumbnailJob	typeref:typename:QThreadPool *
thread_pool_add_work	c/thread_pool/clib-thread-pool.c	/^int thread_pool_add_work (thread_worker_cb workerfunc, void* arg)$/;"	f	typeref:typename:int
thread_pool_destory	c/thread_pool/clib-thread-pool.c	/^void thread_pool_destory ()$/;"	f	typeref:typename:void
thread_pool_init	c/thread_pool/clib-thread-pool.c	/^int thread_pool_init (int num)$/;"	f	typeref:typename:int
thread_pool_routine	c/thread_pool/clib-thread-pool.c	/^static void* thread_pool_routine(void* arg)$/;"	f	typeref:typename:void *	file:
thread_pool_t	c/thread_pool/clib-thread-pool.h	/^typedef struct _thread_pool_t thread_pool_t;$/;"	t	typeref:struct:_thread_pool_t
thread_worker_cb	c/thread_pool/clib-thread-pool.h	/^typedef void* (*thread_worker_cb) (void* arg);$/;"	t	typeref:typename:void * (*)(void * arg)
thread_worker_t	c/thread_pool/clib-thread-pool.h	/^typedef struct _thread_worker_t thread_worker_t;$/;"	t	typeref:struct:_thread_worker_t
threadid	c/thread_pool/clib-thread-pool.c	/^    pthread_t*                  threadid;$/;"	m	struct:_thread_pool_t	typeref:typename:pthread_t *	file:
threadnum	c/thread_pool/clib-thread-pool.c	/^    int                         threadnum;$/;"	m	struct:_thread_pool_t	typeref:typename:int	file:
threadpool	c/thread_pool/clib-thread-pool.c	/^static thread_pool_t*           threadpool = NULL;$/;"	v	typeref:typename:thread_pool_t *	file:
thumbnailFromIndex	folder-model-view/folder-model.cpp	/^QImage FolderModel::thumbnailFromIndex(const QModelIndex& index, int size)$/;"	f	class:dingjing::FolderModel	typeref:typename:QImage
thumbnailSize	folder-model-view/proxy-folder-model.cpp	/^int ProxyFolderModel::thumbnailSize()$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:int
thumbnail_local	fm-config.h	/^    gboolean thumbnail_local;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
thumbnail_max	fm-config.h	/^    gint thumbnail_max;$/;"	m	struct:_FmConfig	typeref:typename:gint
thumbnail_size	fm-config.h	/^    gint thumbnail_size;$/;"	m	struct:_FmConfig	typeref:typename:gint
thumbnailers_	mime-type.h	/^        std::forward_list<std::shared_ptr<const Thumbnailer>> thumbnailers_;$/;"	m	class:dingjing::MimeType	typeref:typename:std::forward_list<std::shared_ptr<const Thumbnailer>>
toString	file-path.cpp	/^CStrPtr FilePath::toString() const$/;"	f	class:dingjing::FilePath	typeref:typename:CStrPtr
trace_sign	c/rpc/clib-rpcpack.h	/^    uint64_t trace_sign;$/;"	m	union:__anon5350a68c010a	typeref:typename:uint64_t
tran_len	c/rpc/clib-rpcpack.h	/^    uint32_t tran_len;$/;"	m	struct:__anon5350a68c0308	typeref:typename:uint32_t
try_exec_	thumbnailer.h	/^        CStrPtr try_exec_; \/* FIXME: is this useful? *\/$/;"	m	class:dingjing::Thumbnailer	typeref:typename:CStrPtr
type1	c/rpc/clib-rpcpack.h	/^    uint32_t type1;$/;"	m	struct:__anon5350a68c0808	typeref:typename:uint32_t
type2	c/rpc/clib-rpcpack.h	/^    uint32_t type2;$/;"	m	struct:__anon5350a68c0808	typeref:typename:uint32_t
uid	file-info.h	/^        uid_t uid() const$/;"	f	class:dingjing::FileInfo	typeref:typename:uid_t
uid_	file-info.h	/^        uid_t uid_;$/;"	m	class:dingjing::FileInfo	typeref:typename:uid_t
unref	folder-model-view/cached-folder-model.cpp	/^void CachedFolderModel::unref()$/;"	f	class:dingjing::CachedFolderModel	typeref:typename:void
updateCutFilesSet	folder-model-view/folder-model.cpp	/^void FolderModel::updateCutFilesSet() {$/;"	f	class:dingjing::FolderModel	typeref:typename:void
updateEditorGeometry	folder-model-view/folder-item-delegate.cpp	/^void FolderItemDelegate::updateEditorGeometry(QWidget* editor, const QStyleOptionViewItem& optio/;"	f	class:dingjing::FolderItemDelegate	typeref:typename:void
updateFilters	folder-model-view/proxy-folder-model.cpp	/^void ProxyFolderModel::updateFilters()$/;"	f	class:dingjing::ProxyFolderModel	typeref:typename:void
updateGridSize	folder-model-view/folder-view.cpp	/^void FolderView::updateGridSize()$/;"	f	class:dingjing::FolderView	typeref:typename:void
updateProgress	file-read-write.cpp	/^void FileReadAndWrite::updateProgress () const$/;"	f	class:FileReadAndWrite	typeref:typename:void
updateQIcons	icon-info.cpp	/^    void IconInfo::updateQIcons() {$/;"	f	class:dingjing::IconInfo	typeref:typename:void
updateScrollButtonVisibility	pathbar-model-view/pathbar.cpp	/^void PathBar::updateScrollButtonVisibility()$/;"	f	class:dingjing::PathBar	typeref:typename:void
uri	c/file/clib-file-enumerator.c	/^    char*               uri;$/;"	m	struct:_file_enumerator_t	typeref:typename:char *	file:
uri	file-path.cpp	/^CStrPtr FilePath::uri() const$/;"	f	class:dingjing::FilePath	typeref:typename:CStrPtr
uriScheme	file-path.cpp	/^CStrPtr FilePath::uriScheme() const$/;"	f	class:dingjing::FilePath	typeref:typename:CStrPtr
use_trash	fm-config.h	/^    gboolean use_trash;$/;"	m	struct:_FmConfig	typeref:typename:gboolean
uuid	volume-manager.h	/^    CStrPtr uuid() const {$/;"	f	class:dingjing::Mount	typeref:typename:CStrPtr
uuid	volume-manager.h	/^    CStrPtr uuid() const$/;"	f	class:dingjing::Volume	typeref:typename:CStrPtr
v_bpos	c/config/clib-conf.c	/^    uint32_t v_bpos;$/;"	m	struct:__anon4d33341a0108	typeref:typename:uint32_t	file:
value	c/list/clib-double-list.h	/^    void*               value;                              \/\/  值$/;"	m	struct:_double_list_node_t	typeref:typename:void *
value	c/tree/clib-avl-tree.c	/^    avl_value_t             value;$/;"	m	struct:_avl_tree_node_t	typeref:typename:avl_value_t	file:
viewMode	folder-model-view/folder-view.cpp	/^FolderView::ViewMode FolderView::viewMode() const$/;"	f	class:dingjing::FolderView	typeref:typename:FolderView::ViewMode
virtual_hook	icon-info-p.h	/^    void IconEngine::virtual_hook(int id, void* data) {$/;"	f	class:dingjing::IconEngine	typeref:typename:void
volume	volume-manager.h	/^    GVolumePtr volume() const {$/;"	f	class:dingjing::Mount	typeref:typename:GVolumePtr
volumeManager_	folder.h	/^        std::shared_ptr<VolumeManager> volumeManager_;$/;"	m	class:dingjing::Folder	typeref:typename:std::shared_ptr<VolumeManager>
volumes	volume-manager.h	/^    const std::vector<Volume>& volumes() const$/;"	f	class:dingjing::VolumeManager	typeref:typename:const std::vector<Volume> &
volumes_	volume-manager.h	/^    std::vector<Volume> volumes_;$/;"	m	class:dingjing::VolumeManager	typeref:typename:std::vector<Volume>
wants_incremental	folder.h	/^        bool wants_incremental;$/;"	m	class:dingjing::Folder	typeref:typename:bool
wheelEvent	pathbar-model-view/pathbar.cpp	/^void PathBar::wheelEvent(QWheelEvent* event)$/;"	f	class:dingjing::PathBar	typeref:typename:void
who_array_append	c/util/clib-util.c	/^static CLIB_RET who_array_append (char*** arr, char* user, char* host, int* index)$/;"	f	typeref:typename:CLIB_RET	file:
who_array_exist	c/util/clib-util.c	/^static CLIB_RET who_array_exist(char** arr, char* user, int size)$/;"	f	typeref:typename:CLIB_RET	file:
who_array_free	c/util/clib-util.c	/^static void who_array_free(char*** arr, int size)$/;"	f	typeref:typename:void	file:
windowProperty	x-dnd-workaround.cpp	/^QByteArray XdndWorkaround::windowProperty(xcb_window_t window, xcb_atom_t propAtom, xcb_atom_t t/;"	f	class:XdndWorkaround	typeref:typename:QByteArray
worker	c/thread_pool/clib-thread-pool.c	/^    thread_worker_cb            worker;$/;"	m	struct:_thread_worker_t	typeref:typename:thread_worker_cb	file:
workerlist	c/thread_pool/clib-thread-pool.c	/^    thread_worker_t*            workerlist;$/;"	m	struct:_thread_pool_t	typeref:typename:thread_worker_t *	file:
workernum	c/thread_pool/clib-thread-pool.c	/^    int                         workernum;$/;"	m	struct:_thread_pool_t	typeref:typename:int	file:
~CachedFolderModel	folder-model-view/cached-folder-model.cpp	/^CachedFolderModel::~CachedFolderModel()$/;"	f	class:dingjing::CachedFolderModel
~DndActionMenu	dnd-action-menu.cpp	/^DndActionMenu::~DndActionMenu()$/;"	f	class:dingjing::DndActionMenu
~FileInfo	file-info.cpp	/^    FileInfo::~FileInfo() {}$/;"	f	class:dingjing::FileInfo
~FileReadAndWrite	file-read-write.cpp	/^FileReadAndWrite::~FileReadAndWrite()$/;"	f	class:FileReadAndWrite
~Folder	folder.cpp	/^    Folder::~Folder()$/;"	f	class:dingjing::Folder
~FolderItemDelegate	folder-model-view/folder-item-delegate.cpp	/^FolderItemDelegate::~FolderItemDelegate() {$/;"	f	class:dingjing::FolderItemDelegate
~FolderModel	folder-model-view/folder-model.cpp	/^FolderModel::~FolderModel()$/;"	f	class:dingjing::FolderModel
~FolderModelItem	folder-model-view/folder-model-item.cpp	/^FolderModelItem::~FolderModelItem()$/;"	f	class:dingjing::FolderModelItem
~FolderView	folder-model-view/folder-view.cpp	/^FolderView::~FolderView()$/;"	f	class:dingjing::FolderView
~FolderViewListView	folder-model-view/folder-view.cpp	/^FolderViewListView::~FolderViewListView()$/;"	f	class:dingjing::FolderViewListView
~FolderViewTreeView	folder-model-view/folder-view.cpp	/^FolderViewTreeView::~FolderViewTreeView()$/;"	f	class:dingjing::FolderViewTreeView
~GErrorPtr	smart-ptr.hpp	/^    ~GErrorPtr()$/;"	f	class:dingjing::GErrorPtr
~GObjectPtr	smart-ptr.hpp	/^    ~GObjectPtr()$/;"	f	class:dingjing::GObjectPtr
~IconEngine	icon-info-p.h	/^    IconEngine::~IconEngine() {$/;"	f	class:dingjing::IconEngine
~IconInfo	icon-info.cpp	/^    IconInfo::~IconInfo() {$/;"	f	class:dingjing::IconInfo
~Job	job.cpp	/^    Job::~Job()$/;"	f	class:dingjing::Job
~MimeType	mime-type.cpp	/^    MimeType::~MimeType () {}$/;"	f	class:dingjing::MimeType
~PathEditor	pathbar-model-view/path-editor.cpp	/^PathEditor::~PathEditor()$/;"	f	class:dingjing::PathEditor
~PathEditorJob	pathbar-model-view/path-editor-p.h	/^    ~PathEditorJob() override$/;"	f	class:dingjing::PathEditorJob
~ProxyFolderModel	folder-model-view/proxy-folder-model.cpp	/^ProxyFolderModel::~ProxyFolderModel()$/;"	f	class:dingjing::ProxyFolderModel
~ProxyFolderModelFilter	folder-model-view/proxy-folder-model.h	/^    virtual ~ProxyFolderModelFilter() {}$/;"	f	class:dingjing::ProxyFolderModelFilter
~ThumbnailJob	thumbnail-job.cpp	/^ThumbnailJob::~ThumbnailJob()$/;"	f	class:dingjing::ThumbnailJob
~VolumeManager	volume-manager.cpp	/^    VolumeManager::~VolumeManager()$/;"	f	class:dingjing::VolumeManager
~XdndWorkaround	x-dnd-workaround.cpp	/^XdndWorkaround::~XdndWorkaround()$/;"	f	class:XdndWorkaround
